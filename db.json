{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/resume/resume.jpg","path":"resume/resume.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/resume/resume.pdf","path":"resume/resume.pdf","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"4546907ffdf9a28c4e3ff9756dc5c7bd241d96f7","modified":1518675204987},{"_id":"source/CNAME","hash":"52674ef453d21a9e4afd7008af4640893b8c4364","modified":1518530125679},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501628194000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501628194000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501628194000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501628194000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501628194000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501628194000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501628194000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501628194000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501628194000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501628194000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501628194000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501628194000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501628194000},{"_id":"themes/next/_config.yml","hash":"c5e607e5c8b5a83e9182373c501b4d91ab4b0b16","modified":1521456924508},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501628194000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1501628194000},{"_id":"source/_posts/2018年年度小目标.md","hash":"24d361c33777e96e1b82c2214e6d8f7acef9af82","modified":1520374829181},{"_id":"source/_posts/48个js代码片段.md","hash":"6c72e928c54d5868604aaba889d2585a2a5a5c6a","modified":1520374802027},{"_id":"source/_posts/CSS之清除浮动.md","hash":"d2a31932fe695300ac79f87c6bab978135117a1b","modified":1520417443158},{"_id":"source/_posts/PHP基础语法.md","hash":"75a9f32d05a946b24b468837ce83719d213d85e3","modified":1520374893977},{"_id":"source/_posts/Linux常用命令.md","hash":"47fa1dd7392aa6896b791cfe258abb4fb379f69e","modified":1520395200045},{"_id":"source/_posts/canvas.md","hash":"35e318f41963bcfb51819807296866767421995d","modified":1520374851710},{"_id":"source/_posts/console命令详解.md","hash":"0b42032cab2e0e2adecf6dec6ce6e3e237f9af8c","modified":1520374872073},{"_id":"source/_posts/hello world.md","hash":"f912302a4ae79d723bebdb315afc84d9432be824","modified":1520522633779},{"_id":"source/_posts/javascript高级.md","hash":"e41d85812577f53cb8a9152d26bd0f5fc07e8a04","modified":1520393330646},{"_id":"source/_posts/js知识点常记.md","hash":"5b9e43e63ce4403df33e618728dba0ba1f7b8d25","modified":1520393494590},{"_id":"source/_posts/vue阻止修饰符.md","hash":"81c1b63ad68808a493771aa6f55bd6c34ba06b03","modified":1520417062603},{"_id":"source/_posts/图表库ECharts介绍.md","hash":"6260f1e49e8fa6f5cd5f68dc704ee96a15ee2c50","modified":1520394801297},{"_id":"source/_posts/提高js性能技巧.md","hash":"1542e34ea2702a240563ce9f585be4507c2f68c9","modified":1520393870653},{"_id":"source/_posts/浅析nodejs(二).md","hash":"07c5211af8993167eec9f00bc62e46605d25b3af","modified":1520374921100},{"_id":"source/_posts/浅析nodejs.md","hash":"37a325a8622279acc473d3b5e795bb6631395c34","modified":1520374941384},{"_id":"source/about/index.md","hash":"516560415aec6af77fa346b58bf776656ad93e89","modified":1521458713753},{"_id":"source/categories/index.md","hash":"d1bf5141d6d356ce6894fb8cc3c5085f15595f81","modified":1518533113109},{"_id":"source/resume/index.md","hash":"a541dc5bd51bc188846ad15140556c8a0b287c09","modified":1520333974403},{"_id":"source/archives/index.md","hash":"1efe04a3e737c4a41beebf5a46845b7acf0a7739","modified":1518533126059},{"_id":"source/tags/index.md","hash":"7d852b25529af97ab3edb6f2219cf64c8a2eb7e0","modified":1518533193907},{"_id":"source/uploads/wechat-qcode.jpg","hash":"7a5ab9d8f7eb29b0dd3c477515aaf9e9408877bd","modified":1514014045803},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1501628194000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1501628194000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1501628194000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501628194000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501628194000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501628194000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501628194000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501628194000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501628194000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501628194000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501628194000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501628194000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501628194000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"6bf2ece64b4e850eab4dfbec775ecbc03a751f0e","modified":1520321161145},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501628194000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501628194000},{"_id":"themes/next/layout/_layout.swig","hash":"b2d5f65613b7eabc1a005309127d6da4f7fab15b","modified":1520397401590},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501628194000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501628194000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1518686234142},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501628194000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501628194000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501628194000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501628194000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501628194000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501628194000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501628194000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501628194000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501628194000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"a24b77fa4a72050580faa96a7f1c841af11af2e9","modified":1518684091964},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"0bd1e2cebdf9c0e1152868f16ec024cc933a8f9f","modified":1518683810990},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501628194000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d0123a58d35b55848d28267f861d059ab602a689","modified":1520130895328},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501628194000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"49c1d78c833a232a9710ec2612eac342e22c28c3","modified":1521457029959},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501628194000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"dfbffe350382cb065256e14df5e7ad7a5e4781c9","modified":1519663502674},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2a871a2dd184a2ff3cdb81e519f8b56411801517","modified":1518792620488},{"_id":"themes/next/layout/_partials/head.swig","hash":"b5d7b2f1a3676cc67e800b1deef053388b1676fb","modified":1520346655377},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1519945802584},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501628194000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501628194000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501628194000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501628194000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501628194000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0ec5251940a2b5e3624dbcf999102166ea32ed08","modified":1520397612302},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501628194000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501628194000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501628194000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501628194000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501628194000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501628194000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501628194000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501628194000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501628194000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501628194000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501628194000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501628194000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501628194000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501628194000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501628194000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501628194000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501628194000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501628194000},{"_id":"themes/next/source/images/avatar.jpg","hash":"ffc8edf871633aa19275df5947d068495f733b3c","modified":1518536220572},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501628194000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501628194000},{"_id":"themes/next/source/images/favicon.ico","hash":"b4ed55fbd87c70725fd3ddaffea0605b8df3f0ce","modified":1518536170936},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501628194000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501628194000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1520374549732},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501628194000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"c971a51823b13044a5158da13cb7fb6572cd92aa","modified":1519662906888},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501628194000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5abc812f1afa24cbcbb499e7316fc3c4fb050155","modified":1520575173370},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501628194000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1c4c4ce7314eeacc65d43a83ba6d3c4cff4f233a","modified":1518627444407},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501628194000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501628194000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501628194000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501628194000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501628194000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501628194000},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1518534405969},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501628194000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501628194000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501628194000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501628194000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501628194000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501628194000},{"_id":"source/resume/resume.jpg","hash":"2721da00ced7db4bd65ae2600b9b76c7c90eefef","modified":1491016724000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1519662842816},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501628194000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"e270de73188f1ca20f630c4321cae91d07ec0f13","modified":1520347886770},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501628194000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"d5ce2f3c7b3ca46d37f51189f992bedbe34d0eba","modified":1518684141165},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"5b1eb23b9f12bc9cd06acacbed9f7fa40d3a1097","modified":1518684455612},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f3687e1a839d5276f84b891eae12ffcf84187936","modified":1518676016282},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501628194000},{"_id":"source/resume/resume.pdf","hash":"87cc75594785b847121cc8e60d0351c45bfcd1e7","modified":1491016724000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501628194000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501628194000}],"Category":[{"name":"规划","_id":"cjey5cc0l0005skrxcmcugsyj"},{"name":"代码","_id":"cjey5cc15000cskrx2xr0m78g"},{"name":"前端","_id":"cjey5cc1h000jskrx3l7v9uae"},{"name":"PHP","_id":"cjey5cc1r000pskrxvy90lja4"},{"name":"随笔","_id":"cjey5cc20000xskrxmuleceg7"},{"name":"工具","_id":"cjey5cc290016skrxajy7b8vr"},{"name":"web","_id":"cjey5cc2i001dskrx42rwwqnf"},{"name":"blog","_id":"cjey5cc2k001iskrxluyitfo5"},{"name":"框架","_id":"cjey5cc2n001nskrx45uj2fxq"},{"name":"node","_id":"cjey5cc2q001rskrxr4c8mec8"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2018-02-15T06:13:24.987Z","updated":"2018-02-15T06:13:24.987Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjey5cbpn0000skrxsd12vog1","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887\"></script><script>L2Dwidget.init({\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":80,\"height\":160},\"react\":{\"opacityDefault\":1},\"mobile\":{\"show\":false}});</script></body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887\"></script><script>L2Dwidget.init({\"model\":{\"jsonPath\":\"/live2dw/assets/hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":80,\"height\":160},\"react\":{\"opacityDefault\":1},\"mobile\":{\"show\":false}});</script></body>\n</html>\n"},{"title":"关于我","date":"2018-02-13T14:43:19.000Z","type":"about","_content":"\n<img src=\"http://p4z3kz4fz.bkt.clouddn.com/aboutme.jpg\" width=\"60%\"/>\n\n## About Me:\t\n\n***\n\n\n\n​\t\t\t<center style=\"color:#ef5b9c\"> 24岁单身雄性</center>\n\n​\t\t\t<center style=\"color:#f15b6c\"> 现居:广州/佛山</center>\n\n​\t\t\t<center style=\"color:#bed742\"> 学历& 专业:微电子学本科</center>\n\n​\t\t\t<center style=\"color:#a3cf62\"> Github:[DAAI093](https://github.com/DAAI093)</center>\n\n​\t\t\t<center style=\"color:#1d953f\"> Email:mrgowell1994@gmail.com/mrgowell@qq.com</center>\n\n​ <center style=\"color:#40835e\"> 爱电影赏析、爱摄影、爱木艺。极简主义😀,野生糙汉子一枚！</center>\n\n***\n\n\n\n## Technical List:\n\n***\n\n\n\n​\t掌握:HTML/CSS/Javascript/Jquery/PHP/Bootstrap/Vue等框架以及一点Linux\n\n​\t数据库:MySql\n\n​\t版本工具:Git/SVN\n\n​\t开发工具:VsCode/Sublime Text/PHP strome/Atom\n\n​\t硬件:之前玩过51/CC2541/PCB/Arduino等\n\n***\n\n\n\n## Honors and Awards:\n\n***\n\n\n\n​\t实用新型专利ZL2015207204550\n\n​\t学生创新奖学金\n\n​\t优秀学生二等奖\n\n​\t实用新型专利ZL2015200411511\n\n​\t广东省“攀登计划”项目\n\n​\t挑战杯全国大学生科技竞赛省二等奖\n\n​\tMOUSER智能硬件大赛二等奖\n\n​\tTI杯物联网大赛实用新型奖\n\n​\t2014国家级创新创业项目\n\n​\t2014省级创新创业项目\n\n​\t全国大学生节能减排科技竞赛三等奖\n\n​        CET4\n\n​\t\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-02-13 22:43:19\ntype: about\n\n---\n\n<img src=\"http://p4z3kz4fz.bkt.clouddn.com/aboutme.jpg\" width=\"60%\"/>\n\n## About Me:\t\n\n***\n\n\n\n​\t\t\t<center style=\"color:#ef5b9c\"> 24岁单身雄性</center>\n\n​\t\t\t<center style=\"color:#f15b6c\"> 现居:广州/佛山</center>\n\n​\t\t\t<center style=\"color:#bed742\"> 学历& 专业:微电子学本科</center>\n\n​\t\t\t<center style=\"color:#a3cf62\"> Github:[DAAI093](https://github.com/DAAI093)</center>\n\n​\t\t\t<center style=\"color:#1d953f\"> Email:mrgowell1994@gmail.com/mrgowell@qq.com</center>\n\n​ <center style=\"color:#40835e\"> 爱电影赏析、爱摄影、爱木艺。极简主义😀,野生糙汉子一枚！</center>\n\n***\n\n\n\n## Technical List:\n\n***\n\n\n\n​\t掌握:HTML/CSS/Javascript/Jquery/PHP/Bootstrap/Vue等框架以及一点Linux\n\n​\t数据库:MySql\n\n​\t版本工具:Git/SVN\n\n​\t开发工具:VsCode/Sublime Text/PHP strome/Atom\n\n​\t硬件:之前玩过51/CC2541/PCB/Arduino等\n\n***\n\n\n\n## Honors and Awards:\n\n***\n\n\n\n​\t实用新型专利ZL2015207204550\n\n​\t学生创新奖学金\n\n​\t优秀学生二等奖\n\n​\t实用新型专利ZL2015200411511\n\n​\t广东省“攀登计划”项目\n\n​\t挑战杯全国大学生科技竞赛省二等奖\n\n​\tMOUSER智能硬件大赛二等奖\n\n​\tTI杯物联网大赛实用新型奖\n\n​\t2014国家级创新创业项目\n\n​\t2014省级创新创业项目\n\n​\t全国大学生节能减排科技竞赛三等奖\n\n​        CET4\n\n​\t\n\n","updated":"2018-03-19T11:25:13.753Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjey5cc0b0002skrxzp4tinn5","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><p><img src=\"http://p4z3kz4fz.bkt.clouddn.com/aboutme.jpg\" width=\"60%\"></p>\n<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me:\"></a>About Me:</h2><hr>\n<p>​            <center style=\"color:#ef5b9c\"> 24岁单身雄性</center></p>\n<p>​            <center style=\"color:#f15b6c\"> 现居:广州/佛山</center></p>\n<p>​            <center style=\"color:#bed742\"> 学历&amp; 专业:微电子学本科</center></p>\n<p>​            <center style=\"color:#a3cf62\"> Github:<a href=\"https://github.com/DAAI093\" target=\"_blank\" rel=\"noopener\">DAAI093</a></center></p>\n<p>​            <center style=\"color:#1d953f\"> Email:mrgowell1994@gmail.com/mrgowell@qq.com</center></p>\n<p>​ <center style=\"color:#40835e\"> 爱电影赏析、爱摄影、爱木艺。极简主义😀,野生糙汉子一枚！</center></p>\n<hr>\n<h2 id=\"Technical-List\"><a href=\"#Technical-List\" class=\"headerlink\" title=\"Technical List:\"></a>Technical List:</h2><hr>\n<p>​    掌握:HTML/CSS/Javascript/Jquery/PHP/Bootstrap/Vue等框架以及一点Linux</p>\n<p>​    数据库:MySql</p>\n<p>​    版本工具:Git/SVN</p>\n<p>​    开发工具:VsCode/Sublime Text/PHP strome/Atom</p>\n<p>​    硬件:之前玩过51/CC2541/PCB/Arduino等</p>\n<hr>\n<h2 id=\"Honors-and-Awards\"><a href=\"#Honors-and-Awards\" class=\"headerlink\" title=\"Honors and Awards:\"></a>Honors and Awards:</h2><hr>\n<p>​    实用新型专利ZL2015207204550</p>\n<p>​    学生创新奖学金</p>\n<p>​    优秀学生二等奖</p>\n<p>​    实用新型专利ZL2015200411511</p>\n<p>​    广东省“攀登计划”项目</p>\n<p>​    挑战杯全国大学生科技竞赛省二等奖</p>\n<p>​    MOUSER智能硬件大赛二等奖</p>\n<p>​    TI杯物联网大赛实用新型奖</p>\n<p>​    2014国家级创新创业项目</p>\n<p>​    2014省级创新创业项目</p>\n<p>​    全国大学生节能减排科技竞赛三等奖</p>\n<p>​        CET4</p>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p4z3kz4fz.bkt.clouddn.com/aboutme.jpg\" width=\"60%\"></p>\n<h2 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me:\"></a>About Me:</h2><hr>\n<p>​            <center style=\"color:#ef5b9c\"> 24岁单身雄性</center></p>\n<p>​            <center style=\"color:#f15b6c\"> 现居:广州/佛山</center></p>\n<p>​            <center style=\"color:#bed742\"> 学历&amp; 专业:微电子学本科</center></p>\n<p>​            <center style=\"color:#a3cf62\"> Github:<a href=\"https://github.com/DAAI093\" target=\"_blank\" rel=\"noopener\">DAAI093</a></center></p>\n<p>​            <center style=\"color:#1d953f\"> Email:mrgowell1994@gmail.com/mrgowell@qq.com</center></p>\n<p>​ <center style=\"color:#40835e\"> 爱电影赏析、爱摄影、爱木艺。极简主义😀,野生糙汉子一枚！</center></p>\n<hr>\n<h2 id=\"Technical-List\"><a href=\"#Technical-List\" class=\"headerlink\" title=\"Technical List:\"></a>Technical List:</h2><hr>\n<p>​    掌握:HTML/CSS/Javascript/Jquery/PHP/Bootstrap/Vue等框架以及一点Linux</p>\n<p>​    数据库:MySql</p>\n<p>​    版本工具:Git/SVN</p>\n<p>​    开发工具:VsCode/Sublime Text/PHP strome/Atom</p>\n<p>​    硬件:之前玩过51/CC2541/PCB/Arduino等</p>\n<hr>\n<h2 id=\"Honors-and-Awards\"><a href=\"#Honors-and-Awards\" class=\"headerlink\" title=\"Honors and Awards:\"></a>Honors and Awards:</h2><hr>\n<p>​    实用新型专利ZL2015207204550</p>\n<p>​    学生创新奖学金</p>\n<p>​    优秀学生二等奖</p>\n<p>​    实用新型专利ZL2015200411511</p>\n<p>​    广东省“攀登计划”项目</p>\n<p>​    挑战杯全国大学生科技竞赛省二等奖</p>\n<p>​    MOUSER智能硬件大赛二等奖</p>\n<p>​    TI杯物联网大赛实用新型奖</p>\n<p>​    2014国家级创新创业项目</p>\n<p>​    2014省级创新创业项目</p>\n<p>​    全国大学生节能减排科技竞赛三等奖</p>\n<p>​        CET4</p>\n<p>​    </p>\n"},{"title":"categories","date":"2018-02-13T14:43:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-13 22:43:04\ntype: categories\n---\n","updated":"2018-02-13T14:45:13.109Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjey5cc0i0004skrx89sdzop1","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"resume","date":"2017-04-13T14:43:04.000Z","type":"resume","_content":"\n有待更新","source":"resume/index.md","raw":"---\ntitle: resume\ndate: 2017-04-13 22:43:04\ntype: resume\n---\n\n有待更新","updated":"2018-03-06T10:59:34.403Z","path":"resume/index.html","comments":1,"layout":"page","_id":"cjey5cc0r0008skrxql036ria","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><p>有待更新</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有待更新</p>\n"},{"title":"archives","date":"2018-02-13T14:43:36.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2018-02-13 22:43:36\ntype: archives\n---\n","updated":"2018-02-13T14:45:26.059Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjey5cc0u000askrxgwaetbuf","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-13T14:42:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-13 22:42:29\ntype: tags\n---\n","updated":"2018-02-13T14:46:33.907Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjey5cc17000eskrxhc6enih4","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018年度小目标","date":"2017-12-31T16:01:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/1.gif","_content":"## 2018做什么？\n\n每一年都会给自己设置一个主题和主线，去尝试新的东西，当然大多数时候没有实现目标，一开始会因为总是没有实现而失望，渐渐也不再执着于结果，而是着重于在过程中更多的了解自己。\n\n真的，认知自我是一个漫长的过程，作为一个内心敏感的人，尤其如此。\n\n所以，在新的一年里，我想做以下的事情或尝试：\n\n<!--more-->\n\n-阅读：关于阅读，是一个我一直以来坚持的事情，持续的信息的输入，不至于囿于一个逻辑或者角度，新的一年打算阅读以下书籍：\n\n《[文明的冲突与世界秩序的重建](https://book.douban.com/subject/1053623/)》、《[完全政变手册]()》、《[暗店街](https://book.douban.com/subject/26110579/)》、《[逻辑学导论 : （第11版）](https://book.douban.com/subject/2060491/)》、《[大银行家](https://book.douban.com/subject/1022374/)》、《[激荡三十年：中国企业1978~2008. 上](https://book.douban.com/subject/25968115/)》、《[简单逻辑学](https://book.douban.com/subject/24754537/)》,如果你也喜欢阅读可以在[豆瓣](https://www.douban.com/people/65130576/)查看我的阅读历史的计划。\n\n--摄影：单反买了小一年，也没有去系统的学习，好羞愧😫，本来想学好了以后拍妹子，然后找个漂亮的女票友，好像暴露了目的，ε=ε=ε=┏(゜ロ゜;)┛\n\n-针织：别笑，我前几天突然很感兴趣，觉得好有意思，以前怎么没有留意这块？所以以后会留意这方面的信息。\n\n-坚持长跑：特别怀念大学时候绕着内环跑步的日子。毕业后很久没有跑步，我没有别的特别喜欢的运动，跑步算是喜欢的一个。\n\n-提升代码水平：每天坚持提交github，账号从2015年注册到现在，活跃度很低，向阮一峰学习。\n\n-做几个我喜欢的demo，以前很多很好的想法没有去实现，现在慢慢有了将想法实现的能力，可以将之前的idea实现。\n\n-努力攒钱，争取在后年或者大后年，攒够去阿根廷的旅游费用，当然最好是两人份的，很喜欢伊瓜苏瀑布、乌斯怀亚。我一直都认为，在伊瓜苏瀑布下的看瀑布的应该是一对。\n\n暂时想到这里，就先写到这里吧！","source":"_posts/2018年年度小目标.md","raw":"---\ntitle: 2018年度小目标\ndate: 2018-1-1 00:01\ntags: life\ncategories: 规划\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/1.gif\n---\n## 2018做什么？\n\n每一年都会给自己设置一个主题和主线，去尝试新的东西，当然大多数时候没有实现目标，一开始会因为总是没有实现而失望，渐渐也不再执着于结果，而是着重于在过程中更多的了解自己。\n\n真的，认知自我是一个漫长的过程，作为一个内心敏感的人，尤其如此。\n\n所以，在新的一年里，我想做以下的事情或尝试：\n\n<!--more-->\n\n-阅读：关于阅读，是一个我一直以来坚持的事情，持续的信息的输入，不至于囿于一个逻辑或者角度，新的一年打算阅读以下书籍：\n\n《[文明的冲突与世界秩序的重建](https://book.douban.com/subject/1053623/)》、《[完全政变手册]()》、《[暗店街](https://book.douban.com/subject/26110579/)》、《[逻辑学导论 : （第11版）](https://book.douban.com/subject/2060491/)》、《[大银行家](https://book.douban.com/subject/1022374/)》、《[激荡三十年：中国企业1978~2008. 上](https://book.douban.com/subject/25968115/)》、《[简单逻辑学](https://book.douban.com/subject/24754537/)》,如果你也喜欢阅读可以在[豆瓣](https://www.douban.com/people/65130576/)查看我的阅读历史的计划。\n\n--摄影：单反买了小一年，也没有去系统的学习，好羞愧😫，本来想学好了以后拍妹子，然后找个漂亮的女票友，好像暴露了目的，ε=ε=ε=┏(゜ロ゜;)┛\n\n-针织：别笑，我前几天突然很感兴趣，觉得好有意思，以前怎么没有留意这块？所以以后会留意这方面的信息。\n\n-坚持长跑：特别怀念大学时候绕着内环跑步的日子。毕业后很久没有跑步，我没有别的特别喜欢的运动，跑步算是喜欢的一个。\n\n-提升代码水平：每天坚持提交github，账号从2015年注册到现在，活跃度很低，向阮一峰学习。\n\n-做几个我喜欢的demo，以前很多很好的想法没有去实现，现在慢慢有了将想法实现的能力，可以将之前的idea实现。\n\n-努力攒钱，争取在后年或者大后年，攒够去阿根廷的旅游费用，当然最好是两人份的，很喜欢伊瓜苏瀑布、乌斯怀亚。我一直都认为，在伊瓜苏瀑布下的看瀑布的应该是一对。\n\n暂时想到这里，就先写到这里吧！","slug":"2018年年度小目标","published":1,"updated":"2018-03-06T22:20:29.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc020001skrx0okakd7e","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"2018做什么？\"><a href=\"#2018做什么？\" class=\"headerlink\" title=\"2018做什么？\"></a>2018做什么？</h2><p>每一年都会给自己设置一个主题和主线，去尝试新的东西，当然大多数时候没有实现目标，一开始会因为总是没有实现而失望，渐渐也不再执着于结果，而是着重于在过程中更多的了解自己。</p>\n<p>真的，认知自我是一个漫长的过程，作为一个内心敏感的人，尤其如此。</p>\n<p>所以，在新的一年里，我想做以下的事情或尝试：</p>\n<a id=\"more\"></a>\n<p>-阅读：关于阅读，是一个我一直以来坚持的事情，持续的信息的输入，不至于囿于一个逻辑或者角度，新的一年打算阅读以下书籍：</p>\n<p>《<a href=\"https://book.douban.com/subject/1053623/\" target=\"_blank\" rel=\"noopener\">文明的冲突与世界秩序的重建</a>》、《<a href=\"\">完全政变手册</a>》、《<a href=\"https://book.douban.com/subject/26110579/\" target=\"_blank\" rel=\"noopener\">暗店街</a>》、《<a href=\"https://book.douban.com/subject/2060491/\" target=\"_blank\" rel=\"noopener\">逻辑学导论 : （第11版）</a>》、《<a href=\"https://book.douban.com/subject/1022374/\" target=\"_blank\" rel=\"noopener\">大银行家</a>》、《<a href=\"https://book.douban.com/subject/25968115/\" target=\"_blank\" rel=\"noopener\">激荡三十年：中国企业1978~2008. 上</a>》、《<a href=\"https://book.douban.com/subject/24754537/\" target=\"_blank\" rel=\"noopener\">简单逻辑学</a>》,如果你也喜欢阅读可以在<a href=\"https://www.douban.com/people/65130576/\" target=\"_blank\" rel=\"noopener\">豆瓣</a>查看我的阅读历史的计划。</p>\n<p>–摄影：单反买了小一年，也没有去系统的学习，好羞愧😫，本来想学好了以后拍妹子，然后找个漂亮的女票友，好像暴露了目的，ε=ε=ε=┏(゜ロ゜;)┛</p>\n<p>-针织：别笑，我前几天突然很感兴趣，觉得好有意思，以前怎么没有留意这块？所以以后会留意这方面的信息。</p>\n<p>-坚持长跑：特别怀念大学时候绕着内环跑步的日子。毕业后很久没有跑步，我没有别的特别喜欢的运动，跑步算是喜欢的一个。</p>\n<p>-提升代码水平：每天坚持提交github，账号从2015年注册到现在，活跃度很低，向阮一峰学习。</p>\n<p>-做几个我喜欢的demo，以前很多很好的想法没有去实现，现在慢慢有了将想法实现的能力，可以将之前的idea实现。</p>\n<p>-努力攒钱，争取在后年或者大后年，攒够去阿根廷的旅游费用，当然最好是两人份的，很喜欢伊瓜苏瀑布、乌斯怀亚。我一直都认为，在伊瓜苏瀑布下的看瀑布的应该是一对。</p>\n<p>暂时想到这里，就先写到这里吧！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"2018做什么？\"><a href=\"#2018做什么？\" class=\"headerlink\" title=\"2018做什么？\"></a>2018做什么？</h2><p>每一年都会给自己设置一个主题和主线，去尝试新的东西，当然大多数时候没有实现目标，一开始会因为总是没有实现而失望，渐渐也不再执着于结果，而是着重于在过程中更多的了解自己。</p>\n<p>真的，认知自我是一个漫长的过程，作为一个内心敏感的人，尤其如此。</p>\n<p>所以，在新的一年里，我想做以下的事情或尝试：</p>","more":"<p>-阅读：关于阅读，是一个我一直以来坚持的事情，持续的信息的输入，不至于囿于一个逻辑或者角度，新的一年打算阅读以下书籍：</p>\n<p>《<a href=\"https://book.douban.com/subject/1053623/\" target=\"_blank\" rel=\"noopener\">文明的冲突与世界秩序的重建</a>》、《<a href=\"\">完全政变手册</a>》、《<a href=\"https://book.douban.com/subject/26110579/\" target=\"_blank\" rel=\"noopener\">暗店街</a>》、《<a href=\"https://book.douban.com/subject/2060491/\" target=\"_blank\" rel=\"noopener\">逻辑学导论 : （第11版）</a>》、《<a href=\"https://book.douban.com/subject/1022374/\" target=\"_blank\" rel=\"noopener\">大银行家</a>》、《<a href=\"https://book.douban.com/subject/25968115/\" target=\"_blank\" rel=\"noopener\">激荡三十年：中国企业1978~2008. 上</a>》、《<a href=\"https://book.douban.com/subject/24754537/\" target=\"_blank\" rel=\"noopener\">简单逻辑学</a>》,如果你也喜欢阅读可以在<a href=\"https://www.douban.com/people/65130576/\" target=\"_blank\" rel=\"noopener\">豆瓣</a>查看我的阅读历史的计划。</p>\n<p>–摄影：单反买了小一年，也没有去系统的学习，好羞愧😫，本来想学好了以后拍妹子，然后找个漂亮的女票友，好像暴露了目的，ε=ε=ε=┏(゜ロ゜;)┛</p>\n<p>-针织：别笑，我前几天突然很感兴趣，觉得好有意思，以前怎么没有留意这块？所以以后会留意这方面的信息。</p>\n<p>-坚持长跑：特别怀念大学时候绕着内环跑步的日子。毕业后很久没有跑步，我没有别的特别喜欢的运动，跑步算是喜欢的一个。</p>\n<p>-提升代码水平：每天坚持提交github，账号从2015年注册到现在，活跃度很低，向阮一峰学习。</p>\n<p>-做几个我喜欢的demo，以前很多很好的想法没有去实现，现在慢慢有了将想法实现的能力，可以将之前的idea实现。</p>\n<p>-努力攒钱，争取在后年或者大后年，攒够去阿根廷的旅游费用，当然最好是两人份的，很喜欢伊瓜苏瀑布、乌斯怀亚。我一直都认为，在伊瓜苏瀑布下的看瀑布的应该是一对。</p>\n<p>暂时想到这里，就先写到这里吧！</p>"},{"title":"48 个 JavaScript 代码片段","date":"2017-04-16T06:34:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/js.jpg","_content":"## 48 个 JavaScript 代码片段\n\n**Anagrams of string（带有重复项）**\n\n使用递归。对于给定字符串中的每个字母，为字母创建字谜。使用map（）将字母与每部分字谜组合，然后使用reduce（）将所有字谜组合到一个数组中，最基本情况是字符串长度等于2或1。\n\n<!--more-->\n\n> const anagrams = str => {\n>\n>   if (str.length <= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];\n>\n>   return str.split('').reduce((acc, letter, i) =>\n>\n> ​    acc.concat(anagrams(str.slice(0, i) + str.slice(i + 1)).map(val => letter + val)), []);\n>\n> };\n>\n> // anagrams('abc') -> ['abc','acb','bac','bca','cab','cba']\n\n**数组平均数**\n\n使用reduce（）将每个值添加到累加器，初始值为0，总和除以数组长度。\n\n> const average = arr => arr.reduce((acc, val) => acc + val, 0) / arr.length;\n>\n> // average([1,2,3]) -> 2\n\n**大写每个单词的首字母**\n\n使用replace（）匹配每个单词的第一个字符，并使用toUpperCase（）来将其大写。\n\n> const capitalizeEveryWord = str => str.replace(/[a-z]/g, char => char.toUpperCase());\n>\n> // capitalizeEveryWord('hello world!') -> 'Hello World!'\n\n**首字母大写**\n\n使用slice（0,1）和toUpperCase（）大写第一个字母，slice（1）获取字符串的其余部分。 省略lowerRest参数以保持字符串的其余部分不变，或将其设置为true以转换为小写。（注意：这和上一个示例不是同一件事情）\n\n> const capitalize = (str, lowerRest = false) =>\n>\n>   str.slice(0, 1).toUpperCase() + (lowerRest ? str.slice(1).toLowerCase() : str.slice(1));\n>\n> // capitalize('myName', true) -> 'Myname'\n\n**检查回文**\n\n将字符串转换为toLowerCase（），并使用replace（）从中删除非字母的字符。然后，将其转换为tolowerCase（），将（''）拆分为单独字符，reverse（），join（''），与原始的非反转字符串进行比较，然后将其转换为tolowerCase（）。\n\n> const palindrome = str => {\n>\n>   const s = str.toLowerCase().replace(/[W_]/g,'');\n>\n>   return s === s.split('').reverse().join('');\n>\n> }\n>\n> // palindrome('taco cat') -> true\n\n**计数数组中值的出现次数**\n\n每次遇到数组中的特定值时，使用reduce（）来递增计数器。\n\n> const countOccurrences = (arr, value) => arr.reduce((a, v) => v === value ? a + 1 : a + 0, 0);\n>\n> // countOccurrences([1,1,2,1,2,3], 1) -> 3\n\n**当前URL**\n\n使用window.location.href来获取当前URL。\n\n> const currentUrl = _ => window.location.href;\n>\n> // currentUrl() -> 'https://google.com'\n\n**Curry**\n\n使用递归。如果提供的参数（args）数量足够，则调用传递函数f，否则返回一个curried函数f。\n\n> const curry = (fn, arity = fn.length, ...args) =>\n>\n>   arity <= args.length\n>\n> ​    ? fn(...args)\n>\n> ​    : curry.bind(null, fn, arity, ...args);\n>\n> // curry(Math.pow)(2)(10) -> 1024\n>\n> // curry(Math.min, 3)(10)(50)(2) -> 2\n\n**Deep flatten array**\n\n使用递归，使用reduce（）来获取所有不是数组的元素，flatten每个元素都是数组。\n\n> const deepFlatten = arr =>\n>\n>   arr.reduce((a, v) => a.concat(Array.isArray(v) ? deepFlatten(v) : v), []);\n>\n> // deepFlatten([1,[2],[[3],4],5]) -> [1,2,3,4,5]\n\n**数组之间的区别**\n\n从b创建一个Set，然后在a上使用Array.filter（），只保留b中不包含的值。\n\n> const difference = (a, b) => { const s = new Set(b); return a.filter(x => !s.has(x)); };\n>\n> // difference([1,2,3], [1,2]) -> [3]\n\n**两点之间的距离**\n\n使用Math.hypot（）计算两点之间的欧几里德距离。\n\n> const distance = (x0, y0, x1, y1) => Math.hypot(x1 - x0, y1 - y0);\n>\n> // distance(1,1, 2,3) -> 2.23606797749979\n\n**可以按数字整除**\n\n使用模运算符（％）来检查余数是否等于0。\n\n> const isDivisible = (dividend, divisor) => dividend % divisor === 0;\n>\n> // isDivisible(6,3) -> true\n\n**转义正则表达式**\n\n使用replace（）来转义特殊字符。\n\n> const escapeRegExp = str => str.replace(/[.*+?^${}()|[]]/g, '$&');\n>\n> // escapeRegExp('(test)') -> (test)\n\n**偶数或奇数**\n\n使用Math.abs（）将逻辑扩展为负数，使用模（％）运算符进行检查。 如果数字是偶数，则返回true；如果数字是奇数，则返回false。\n\n> const isEven = num => num % 2 === 0;\n>\n> // isEven(3) -> false\n\n**阶乘**\n\n使用递归。如果n小于或等于1，则返回1。否则返回n和n - 1的阶乘的乘积。\n\n> const factorial = n => n <= 1 ? 1 : n * factorial(n - 1);\n>\n> // factorial(6) -> 720\n\n**斐波那契数组生成器**\n\n创建一个特定长度的空数组，初始化前两个值（0和1）。使用Array.reduce（）向数组中添加值，后面的一个数等于前面两个数相加之和（前两个除外）。\n\n> const fibonacci = n =>\n>\n>   Array(n).fill(0).reduce((acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i), []);\n>\n> // fibonacci(5) -> [0,1,1,2,3]\n\n**过滤数组中的非唯一值**\n\n将Array.filter（）用于仅包含唯一值的数组。\n\n> const filterNonUnique = arr => arr.filter(i => arr.indexOf(i) === arr.lastIndexOf(i));\n>\n> // filterNonUnique([1,2,2,3,4,4,5]) -> [1,3,5]\n\n**Flatten数组**\n\n使用reduce（）来获取数组中的所有元素，并使用concat（）来使它们flatten。\n\n> const flatten = arr => arr.reduce((a, v) => a.concat(v), []);\n>\n> // flatten([1,[2],3,4]) -> [1,2,3,4]\n\n**从数组中获取最大值**\n\n使用Math.max（）与spread运算符（...）结合得到数组中的最大值。\n\n> const arrayMax = arr => Math.max(...arr);\n>\n> // arrayMax([10, 1, 5]) -> 10\n\n**从数组中获取最小值**\n\n使用Math.min（）与spread运算符（...）结合得到数组中的最小值。\n\n> const arrayMin = arr => Math.min(...arr);\n>\n> // arrayMin([10, 1, 5]) -> 1\n\n**获取滚动位置**\n\n如果已定义，请使用pageXOffset和pageYOffset，否则使用scrollLeft和scrollTop，可以省略el来使用window的默认值。\n\n> const getScrollPos = (el = window) =>\n>\n>   ({x: (el.pageXOffset !== undefined) ? el.pageXOffset : el.scrollLeft,\n>\n> ​    y: (el.pageYOffset !== undefined) ? el.pageYOffset : el.scrollTop});\n>\n> // getScrollPos() -> {x: 0, y: 200}\n\n**最大公约数（GCD）**\n\n使用递归。基本情况是当y等于0时。在这种情况下，返回x。否则，返回y的GCD和x / y的其余部分。\n\n> const gcd = (x, y) => !y ? x : gcd(y, x % y);\n>\n> // gcd (8, 36) -> 4\n\n**Head of list**\n\n返回ARR[0]\n\n> const head = arr => arr[0];\n>\n> // head([1,2,3]) -> 1\n\n**list初始化**\n\n返回arr.slice（0，-1）\n\n> const initial = arr => arr.slice(0, -1);\n>\n> // initial([1,2,3]) -> [1,2]\n\n**用range初始化数组**\n\n使用Array（end-start）创建所需长度的数组，使用map（）来填充范围中的所需值，可以省略start使用默认值0。\n\n> const initializeArrayRange = (end, start = 0) =>\n>\n>   Array.apply(null, Array(end - start)).map((v, i) => i + start);\n>\n> // initializeArrayRange(5) -> [0,1,2,3,4]\n\n**用值初始化数组**\n\n使用Array（n）创建所需长度的数组，fill(v)以填充所需的值，可以忽略value使用默认值0。\n\n> const initializeArray = (n, value = 0) => Array(n).fill(value);\n>\n> // initializeArray(5, 2) -> [2,2,2,2,2]\n\n**列表的最后**\n\n返回arr.slice（-1）[0]\n\n> const last = arr => arr.slice(-1)[0];\n>\n> // last([1,2,3]) -> 3\n\n**测试功能所花费的时间**\n\n使用performance.now（）获取函数的开始和结束时间，console.log（）所花费的时间。第一个参数是函数名，随后的参数传递给函数。\n\n> const timeTaken = callback => {\n>\n>   console.time('timeTaken');\n>\n>   const r = callback();\n>\n>   console.timeEnd('timeTaken');\n>\n>   return r;\n>\n> };\n>\n> // timeTaken(() => Math.pow(2, 10)) -> 1024\n>\n> // (logged): timeTaken: 0.02099609375ms\n\n**来自键值对的对象**\n\n使用Array.reduce（）来创建和组合键值对。\n\n> const objectFromPairs = arr => arr.reduce((a, v) => (a[v[0]] = v[1], a), {});\n>\n> // objectFromPairs([['a',1],['b',2]]) -> {a: 1, b: 2}\n\n**管道**\n\n使用Array.reduce（）通过函数传递值。\n\n> const pipe = (...funcs) => arg => funcs.reduce((acc, func) => func(acc), arg);\n>\n> // pipe(btoa, x => x.toUpperCase())(\"Test\") -> \"VGVZDA==\"\n\n**Powerset**\n\n使用reduce（）与map（）结合来遍历元素，并将其组合成包含所有组合的数组。\n\n> const powerset = arr =>\n>\n>   arr.reduce((a, v) => a.concat(a.map(r => [v].concat(r))), [[]]);\n>\n> // powerset([1,2]) -> [[], [1], [2], [2,1]]\n\n------\n\n**范围内的随机整数**\n\n使用Math.random（）生成一个随机数并将其映射到所需的范围，使用Math.floor（）使其成为一个整数。\n\n> const randomIntegerInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n>\n> // randomIntegerInRange(0, 5) -> 2\n\n**范围内的随机数**\n\n使用Math.random（）生成一个随机值，使用乘法将其映射到所需的范围。\n\n> const randomInRange = (min, max) => Math.random() * (max - min) + min;\n>\n> // randomInRange(2,10) -> 6.0211363285087005\n\n**随****机化数组的顺序**\n\n使用sort（）重新排序元素，利用Math.random（）来随机排序。\n\n> const shuffle = arr => arr.sort(() => Math.random() - 0.5);\n>\n> // shuffle([1,2,3]) -> [2,3,1]\n\n**重定向到URL**\n\n使用window.location.href或window.location.replace（）重定向到url。 传递第二个参数来模拟链接点击（true - default）或HTTP重定向（false）。\n\n> const redirect = (url, asLink = true) =>\n>\n>   asLink ? window.location.href = url : window.location.replace(url);\n>\n> // redirect('https://google.com')\n\n**反转一个字符串**\n\n使用数组解构和Array.reverse（）来颠倒字符串中的字符顺序。合并字符以使用join('')获取字符串。\n\n> const reverseString = str => [...str].reverse().join('');\n>\n> // reverseString('foobar') -> 'raboof'\n\n**RGB到十六进制**\n\n使用按位左移运算符（<<）和toString（16），然后padStart（6，“0”）将给定的RGB参数转换为十六进制字符串以获得6位十六进制值。\n\n> const rgbToHex = (r, g, b) => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0');\n>\n> // rgbToHex(255, 165, 1) -> 'ffa501'\n\n**滚动到顶部**\n\n使用document.documentElement.scrollTop或document.body.scrollTop获取到顶部的距离。\n\n从顶部滚动一小部分距离。\n\n使用window.requestAnimationFrame（）来滚动。\n\n> const scrollToTop = _ => {\n>\n>   const c = document.documentElement.scrollTop || document.body.scrollTop;\n>\n>   if (c > 0) {\n>\n> ​    window.requestAnimationFrame(scrollToTop);\n>\n> ​    window.scrollTo(0, c - c / 8);\n>\n>   }\n>\n> };\n>\n> // scrollToTop()\n\n**随机数组值**\n\n使用Array.map（）和Math.random（）创建一个随机值的数组。使用Array.sort（）根据随机值对原始数组的元素进行排序。\n\n![img](https://mmbiz.qpic.cn/mmbiz_jpg/dkwuWwLoRKibcpl9eKXOsT1j3XeQdrftj49ibPXqbdq0lFxkhUChUgkVMQattNEHU6w6RibfCETKQMR0XpOoGSWSA/?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1)\n\n**数组之间的相似性**\n\n使用filter（）移除不是values的一部分值，使用includes（）确定。\n\n> const similarity = (arr, values) => arr.filter(v => values.includes(v));\n>\n> // similarity([1,2,3], [1,2,4]) -> [1,2]\n\n**按字符串排序（按字母顺序排列）**\n\n使用split（''）分割字符串，sort（）使用localeCompare（），使用join（''）重新组合。\n\n> const sortCharactersInString = str =>\n>\n>   str.split('').sort((a, b) => a.localeCompare(b)).join('');\n>\n> // sortCharactersInString('cabbage') -> 'aabbceg'\n\n**数组总和**\n\n使用reduce（）将每个值添加到累加器，初始化值为0。\n\n> const sum = arr => arr.reduce((acc, val) => acc + val, 0);\n>\n> // sum([1,2,3,4]) -> 10\n\n**交换两个变量的值**\n\n使用数组解构来交换两个变量之间的值。\n\n> [varA, varB] = [varB, varA];\n>\n> // [x, y] = [y, x]\n\n**列表的tail**\n\n返回arr.slice（1）\n\n> const tail = arr => arr.length > 1 ? arr.slice(1) : arr;\n>\n> // tail([1,2,3]) -> [2,3]\n>\n> // tail([1]) -> [1]\n\n**数组唯一值**\n\n使用ES6 Set和... rest操作符去掉所有重复值。\n\n> const unique = arr => [...new Set(arr)];\n>\n> // unique([1,2,2,3,4,4,5]) -> [1,2,3,4,5]\n\n**URL参数**\n\n使用match() 与适当的正则表达式来获得所有键值对，适当的map() 。使用Object.assign（）和spread运算符（...）将所有键值对组合到一个对象中，将location.search作为参数传递给当前url。\n\n> const getUrlParameters = url =>\n>\n>   url.match(/([^?=&]+)(=([^&]*))/g).reduce(\n>\n> ​    (a, v) => (a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1), a), {}\n>\n>   );\n>\n> // getUrlParameters('http://url.com/page?name=Adam&surname=Smith') -> {name: 'Adam', surname: 'Smith'}\n\nUUID生成器\n\n使用crypto API生成符合RFC4122版本4的UUID。\n\n> const uuid = _ =>\n>\n>   ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n>\n> ​    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n>\n>   );\n>\n> // uuid() -> '7982fcfe-5721-4632-bede-6000885be57d'\n\n**验证数字**\n\n使用！isNaN和parseFloat（）来检查参数是否是一个数字，使用isFinite（）来检查数字是否是有限的。\n\n> const validateNumber = n => !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n;\n>\n> // validateNumber('10') -> true\n\n","source":"_posts/48个js代码片段.md","raw":"---\ntitle: 48 个 JavaScript 代码片段\ndate: 2017-4-16 14:34\ntags: js\ncategories: 代码\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/js.jpg\n---\n## 48 个 JavaScript 代码片段\n\n**Anagrams of string（带有重复项）**\n\n使用递归。对于给定字符串中的每个字母，为字母创建字谜。使用map（）将字母与每部分字谜组合，然后使用reduce（）将所有字谜组合到一个数组中，最基本情况是字符串长度等于2或1。\n\n<!--more-->\n\n> const anagrams = str => {\n>\n>   if (str.length <= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];\n>\n>   return str.split('').reduce((acc, letter, i) =>\n>\n> ​    acc.concat(anagrams(str.slice(0, i) + str.slice(i + 1)).map(val => letter + val)), []);\n>\n> };\n>\n> // anagrams('abc') -> ['abc','acb','bac','bca','cab','cba']\n\n**数组平均数**\n\n使用reduce（）将每个值添加到累加器，初始值为0，总和除以数组长度。\n\n> const average = arr => arr.reduce((acc, val) => acc + val, 0) / arr.length;\n>\n> // average([1,2,3]) -> 2\n\n**大写每个单词的首字母**\n\n使用replace（）匹配每个单词的第一个字符，并使用toUpperCase（）来将其大写。\n\n> const capitalizeEveryWord = str => str.replace(/[a-z]/g, char => char.toUpperCase());\n>\n> // capitalizeEveryWord('hello world!') -> 'Hello World!'\n\n**首字母大写**\n\n使用slice（0,1）和toUpperCase（）大写第一个字母，slice（1）获取字符串的其余部分。 省略lowerRest参数以保持字符串的其余部分不变，或将其设置为true以转换为小写。（注意：这和上一个示例不是同一件事情）\n\n> const capitalize = (str, lowerRest = false) =>\n>\n>   str.slice(0, 1).toUpperCase() + (lowerRest ? str.slice(1).toLowerCase() : str.slice(1));\n>\n> // capitalize('myName', true) -> 'Myname'\n\n**检查回文**\n\n将字符串转换为toLowerCase（），并使用replace（）从中删除非字母的字符。然后，将其转换为tolowerCase（），将（''）拆分为单独字符，reverse（），join（''），与原始的非反转字符串进行比较，然后将其转换为tolowerCase（）。\n\n> const palindrome = str => {\n>\n>   const s = str.toLowerCase().replace(/[W_]/g,'');\n>\n>   return s === s.split('').reverse().join('');\n>\n> }\n>\n> // palindrome('taco cat') -> true\n\n**计数数组中值的出现次数**\n\n每次遇到数组中的特定值时，使用reduce（）来递增计数器。\n\n> const countOccurrences = (arr, value) => arr.reduce((a, v) => v === value ? a + 1 : a + 0, 0);\n>\n> // countOccurrences([1,1,2,1,2,3], 1) -> 3\n\n**当前URL**\n\n使用window.location.href来获取当前URL。\n\n> const currentUrl = _ => window.location.href;\n>\n> // currentUrl() -> 'https://google.com'\n\n**Curry**\n\n使用递归。如果提供的参数（args）数量足够，则调用传递函数f，否则返回一个curried函数f。\n\n> const curry = (fn, arity = fn.length, ...args) =>\n>\n>   arity <= args.length\n>\n> ​    ? fn(...args)\n>\n> ​    : curry.bind(null, fn, arity, ...args);\n>\n> // curry(Math.pow)(2)(10) -> 1024\n>\n> // curry(Math.min, 3)(10)(50)(2) -> 2\n\n**Deep flatten array**\n\n使用递归，使用reduce（）来获取所有不是数组的元素，flatten每个元素都是数组。\n\n> const deepFlatten = arr =>\n>\n>   arr.reduce((a, v) => a.concat(Array.isArray(v) ? deepFlatten(v) : v), []);\n>\n> // deepFlatten([1,[2],[[3],4],5]) -> [1,2,3,4,5]\n\n**数组之间的区别**\n\n从b创建一个Set，然后在a上使用Array.filter（），只保留b中不包含的值。\n\n> const difference = (a, b) => { const s = new Set(b); return a.filter(x => !s.has(x)); };\n>\n> // difference([1,2,3], [1,2]) -> [3]\n\n**两点之间的距离**\n\n使用Math.hypot（）计算两点之间的欧几里德距离。\n\n> const distance = (x0, y0, x1, y1) => Math.hypot(x1 - x0, y1 - y0);\n>\n> // distance(1,1, 2,3) -> 2.23606797749979\n\n**可以按数字整除**\n\n使用模运算符（％）来检查余数是否等于0。\n\n> const isDivisible = (dividend, divisor) => dividend % divisor === 0;\n>\n> // isDivisible(6,3) -> true\n\n**转义正则表达式**\n\n使用replace（）来转义特殊字符。\n\n> const escapeRegExp = str => str.replace(/[.*+?^${}()|[]]/g, '$&');\n>\n> // escapeRegExp('(test)') -> (test)\n\n**偶数或奇数**\n\n使用Math.abs（）将逻辑扩展为负数，使用模（％）运算符进行检查。 如果数字是偶数，则返回true；如果数字是奇数，则返回false。\n\n> const isEven = num => num % 2 === 0;\n>\n> // isEven(3) -> false\n\n**阶乘**\n\n使用递归。如果n小于或等于1，则返回1。否则返回n和n - 1的阶乘的乘积。\n\n> const factorial = n => n <= 1 ? 1 : n * factorial(n - 1);\n>\n> // factorial(6) -> 720\n\n**斐波那契数组生成器**\n\n创建一个特定长度的空数组，初始化前两个值（0和1）。使用Array.reduce（）向数组中添加值，后面的一个数等于前面两个数相加之和（前两个除外）。\n\n> const fibonacci = n =>\n>\n>   Array(n).fill(0).reduce((acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i), []);\n>\n> // fibonacci(5) -> [0,1,1,2,3]\n\n**过滤数组中的非唯一值**\n\n将Array.filter（）用于仅包含唯一值的数组。\n\n> const filterNonUnique = arr => arr.filter(i => arr.indexOf(i) === arr.lastIndexOf(i));\n>\n> // filterNonUnique([1,2,2,3,4,4,5]) -> [1,3,5]\n\n**Flatten数组**\n\n使用reduce（）来获取数组中的所有元素，并使用concat（）来使它们flatten。\n\n> const flatten = arr => arr.reduce((a, v) => a.concat(v), []);\n>\n> // flatten([1,[2],3,4]) -> [1,2,3,4]\n\n**从数组中获取最大值**\n\n使用Math.max（）与spread运算符（...）结合得到数组中的最大值。\n\n> const arrayMax = arr => Math.max(...arr);\n>\n> // arrayMax([10, 1, 5]) -> 10\n\n**从数组中获取最小值**\n\n使用Math.min（）与spread运算符（...）结合得到数组中的最小值。\n\n> const arrayMin = arr => Math.min(...arr);\n>\n> // arrayMin([10, 1, 5]) -> 1\n\n**获取滚动位置**\n\n如果已定义，请使用pageXOffset和pageYOffset，否则使用scrollLeft和scrollTop，可以省略el来使用window的默认值。\n\n> const getScrollPos = (el = window) =>\n>\n>   ({x: (el.pageXOffset !== undefined) ? el.pageXOffset : el.scrollLeft,\n>\n> ​    y: (el.pageYOffset !== undefined) ? el.pageYOffset : el.scrollTop});\n>\n> // getScrollPos() -> {x: 0, y: 200}\n\n**最大公约数（GCD）**\n\n使用递归。基本情况是当y等于0时。在这种情况下，返回x。否则，返回y的GCD和x / y的其余部分。\n\n> const gcd = (x, y) => !y ? x : gcd(y, x % y);\n>\n> // gcd (8, 36) -> 4\n\n**Head of list**\n\n返回ARR[0]\n\n> const head = arr => arr[0];\n>\n> // head([1,2,3]) -> 1\n\n**list初始化**\n\n返回arr.slice（0，-1）\n\n> const initial = arr => arr.slice(0, -1);\n>\n> // initial([1,2,3]) -> [1,2]\n\n**用range初始化数组**\n\n使用Array（end-start）创建所需长度的数组，使用map（）来填充范围中的所需值，可以省略start使用默认值0。\n\n> const initializeArrayRange = (end, start = 0) =>\n>\n>   Array.apply(null, Array(end - start)).map((v, i) => i + start);\n>\n> // initializeArrayRange(5) -> [0,1,2,3,4]\n\n**用值初始化数组**\n\n使用Array（n）创建所需长度的数组，fill(v)以填充所需的值，可以忽略value使用默认值0。\n\n> const initializeArray = (n, value = 0) => Array(n).fill(value);\n>\n> // initializeArray(5, 2) -> [2,2,2,2,2]\n\n**列表的最后**\n\n返回arr.slice（-1）[0]\n\n> const last = arr => arr.slice(-1)[0];\n>\n> // last([1,2,3]) -> 3\n\n**测试功能所花费的时间**\n\n使用performance.now（）获取函数的开始和结束时间，console.log（）所花费的时间。第一个参数是函数名，随后的参数传递给函数。\n\n> const timeTaken = callback => {\n>\n>   console.time('timeTaken');\n>\n>   const r = callback();\n>\n>   console.timeEnd('timeTaken');\n>\n>   return r;\n>\n> };\n>\n> // timeTaken(() => Math.pow(2, 10)) -> 1024\n>\n> // (logged): timeTaken: 0.02099609375ms\n\n**来自键值对的对象**\n\n使用Array.reduce（）来创建和组合键值对。\n\n> const objectFromPairs = arr => arr.reduce((a, v) => (a[v[0]] = v[1], a), {});\n>\n> // objectFromPairs([['a',1],['b',2]]) -> {a: 1, b: 2}\n\n**管道**\n\n使用Array.reduce（）通过函数传递值。\n\n> const pipe = (...funcs) => arg => funcs.reduce((acc, func) => func(acc), arg);\n>\n> // pipe(btoa, x => x.toUpperCase())(\"Test\") -> \"VGVZDA==\"\n\n**Powerset**\n\n使用reduce（）与map（）结合来遍历元素，并将其组合成包含所有组合的数组。\n\n> const powerset = arr =>\n>\n>   arr.reduce((a, v) => a.concat(a.map(r => [v].concat(r))), [[]]);\n>\n> // powerset([1,2]) -> [[], [1], [2], [2,1]]\n\n------\n\n**范围内的随机整数**\n\n使用Math.random（）生成一个随机数并将其映射到所需的范围，使用Math.floor（）使其成为一个整数。\n\n> const randomIntegerInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n>\n> // randomIntegerInRange(0, 5) -> 2\n\n**范围内的随机数**\n\n使用Math.random（）生成一个随机值，使用乘法将其映射到所需的范围。\n\n> const randomInRange = (min, max) => Math.random() * (max - min) + min;\n>\n> // randomInRange(2,10) -> 6.0211363285087005\n\n**随****机化数组的顺序**\n\n使用sort（）重新排序元素，利用Math.random（）来随机排序。\n\n> const shuffle = arr => arr.sort(() => Math.random() - 0.5);\n>\n> // shuffle([1,2,3]) -> [2,3,1]\n\n**重定向到URL**\n\n使用window.location.href或window.location.replace（）重定向到url。 传递第二个参数来模拟链接点击（true - default）或HTTP重定向（false）。\n\n> const redirect = (url, asLink = true) =>\n>\n>   asLink ? window.location.href = url : window.location.replace(url);\n>\n> // redirect('https://google.com')\n\n**反转一个字符串**\n\n使用数组解构和Array.reverse（）来颠倒字符串中的字符顺序。合并字符以使用join('')获取字符串。\n\n> const reverseString = str => [...str].reverse().join('');\n>\n> // reverseString('foobar') -> 'raboof'\n\n**RGB到十六进制**\n\n使用按位左移运算符（<<）和toString（16），然后padStart（6，“0”）将给定的RGB参数转换为十六进制字符串以获得6位十六进制值。\n\n> const rgbToHex = (r, g, b) => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0');\n>\n> // rgbToHex(255, 165, 1) -> 'ffa501'\n\n**滚动到顶部**\n\n使用document.documentElement.scrollTop或document.body.scrollTop获取到顶部的距离。\n\n从顶部滚动一小部分距离。\n\n使用window.requestAnimationFrame（）来滚动。\n\n> const scrollToTop = _ => {\n>\n>   const c = document.documentElement.scrollTop || document.body.scrollTop;\n>\n>   if (c > 0) {\n>\n> ​    window.requestAnimationFrame(scrollToTop);\n>\n> ​    window.scrollTo(0, c - c / 8);\n>\n>   }\n>\n> };\n>\n> // scrollToTop()\n\n**随机数组值**\n\n使用Array.map（）和Math.random（）创建一个随机值的数组。使用Array.sort（）根据随机值对原始数组的元素进行排序。\n\n![img](https://mmbiz.qpic.cn/mmbiz_jpg/dkwuWwLoRKibcpl9eKXOsT1j3XeQdrftj49ibPXqbdq0lFxkhUChUgkVMQattNEHU6w6RibfCETKQMR0XpOoGSWSA/?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1)\n\n**数组之间的相似性**\n\n使用filter（）移除不是values的一部分值，使用includes（）确定。\n\n> const similarity = (arr, values) => arr.filter(v => values.includes(v));\n>\n> // similarity([1,2,3], [1,2,4]) -> [1,2]\n\n**按字符串排序（按字母顺序排列）**\n\n使用split（''）分割字符串，sort（）使用localeCompare（），使用join（''）重新组合。\n\n> const sortCharactersInString = str =>\n>\n>   str.split('').sort((a, b) => a.localeCompare(b)).join('');\n>\n> // sortCharactersInString('cabbage') -> 'aabbceg'\n\n**数组总和**\n\n使用reduce（）将每个值添加到累加器，初始化值为0。\n\n> const sum = arr => arr.reduce((acc, val) => acc + val, 0);\n>\n> // sum([1,2,3,4]) -> 10\n\n**交换两个变量的值**\n\n使用数组解构来交换两个变量之间的值。\n\n> [varA, varB] = [varB, varA];\n>\n> // [x, y] = [y, x]\n\n**列表的tail**\n\n返回arr.slice（1）\n\n> const tail = arr => arr.length > 1 ? arr.slice(1) : arr;\n>\n> // tail([1,2,3]) -> [2,3]\n>\n> // tail([1]) -> [1]\n\n**数组唯一值**\n\n使用ES6 Set和... rest操作符去掉所有重复值。\n\n> const unique = arr => [...new Set(arr)];\n>\n> // unique([1,2,2,3,4,4,5]) -> [1,2,3,4,5]\n\n**URL参数**\n\n使用match() 与适当的正则表达式来获得所有键值对，适当的map() 。使用Object.assign（）和spread运算符（...）将所有键值对组合到一个对象中，将location.search作为参数传递给当前url。\n\n> const getUrlParameters = url =>\n>\n>   url.match(/([^?=&]+)(=([^&]*))/g).reduce(\n>\n> ​    (a, v) => (a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1), a), {}\n>\n>   );\n>\n> // getUrlParameters('http://url.com/page?name=Adam&surname=Smith') -> {name: 'Adam', surname: 'Smith'}\n\nUUID生成器\n\n使用crypto API生成符合RFC4122版本4的UUID。\n\n> const uuid = _ =>\n>\n>   ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n>\n> ​    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n>\n>   );\n>\n> // uuid() -> '7982fcfe-5721-4632-bede-6000885be57d'\n\n**验证数字**\n\n使用！isNaN和parseFloat（）来检查参数是否是一个数字，使用isFinite（）来检查数字是否是有限的。\n\n> const validateNumber = n => !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n;\n>\n> // validateNumber('10') -> true\n\n","slug":"48个js代码片段","published":1,"updated":"2018-03-06T22:20:02.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc0d0003skrxkc0ftwzl","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"48-个-JavaScript-代码片段\"><a href=\"#48-个-JavaScript-代码片段\" class=\"headerlink\" title=\"48 个 JavaScript 代码片段\"></a>48 个 JavaScript 代码片段</h2><p><strong>Anagrams of string（带有重复项）</strong></p>\n<p>使用递归。对于给定字符串中的每个字母，为字母创建字谜。使用map（）将字母与每部分字谜组合，然后使用reduce（）将所有字谜组合到一个数组中，最基本情况是字符串长度等于2或1。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>const anagrams = str =&gt; {</p>\n<p>  if (str.length &lt;= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];</p>\n<p>  return str.split(‘’).reduce((acc, letter, i) =&gt;</p>\n<p>​    acc.concat(anagrams(str.slice(0, i) + str.slice(i + 1)).map(val =&gt; letter + val)), []);</p>\n<p>};</p>\n<p>// anagrams(‘abc’) -&gt; [‘abc’,’acb’,’bac’,’bca’,’cab’,’cba’]</p>\n</blockquote>\n<p><strong>数组平均数</strong></p>\n<p>使用reduce（）将每个值添加到累加器，初始值为0，总和除以数组长度。</p>\n<blockquote>\n<p>const average = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0) / arr.length;</p>\n<p>// average([1,2,3]) -&gt; 2</p>\n</blockquote>\n<p><strong>大写每个单词的首字母</strong></p>\n<p>使用replace（）匹配每个单词的第一个字符，并使用toUpperCase（）来将其大写。</p>\n<blockquote>\n<p>const capitalizeEveryWord = str =&gt; str.replace(/[a-z]/g, char =&gt; char.toUpperCase());</p>\n<p>// capitalizeEveryWord(‘hello world!’) -&gt; ‘Hello World!’</p>\n</blockquote>\n<p><strong>首字母大写</strong></p>\n<p>使用slice（0,1）和toUpperCase（）大写第一个字母，slice（1）获取字符串的其余部分。 省略lowerRest参数以保持字符串的其余部分不变，或将其设置为true以转换为小写。（注意：这和上一个示例不是同一件事情）</p>\n<blockquote>\n<p>const capitalize = (str, lowerRest = false) =&gt;</p>\n<p>  str.slice(0, 1).toUpperCase() + (lowerRest ? str.slice(1).toLowerCase() : str.slice(1));</p>\n<p>// capitalize(‘myName’, true) -&gt; ‘Myname’</p>\n</blockquote>\n<p><strong>检查回文</strong></p>\n<p>将字符串转换为toLowerCase（），并使用replace（）从中删除非字母的字符。然后，将其转换为tolowerCase（），将（’’）拆分为单独字符，reverse（），join（’’），与原始的非反转字符串进行比较，然后将其转换为tolowerCase（）。</p>\n<blockquote>\n<p>const palindrome = str =&gt; {</p>\n<p>  const s = str.toLowerCase().replace(/[W_]/g,’’);</p>\n<p>  return s === s.split(‘’).reverse().join(‘’);</p>\n<p>}</p>\n<p>// palindrome(‘taco cat’) -&gt; true</p>\n</blockquote>\n<p><strong>计数数组中值的出现次数</strong></p>\n<p>每次遇到数组中的特定值时，使用reduce（）来递增计数器。</p>\n<blockquote>\n<p>const countOccurrences = (arr, value) =&gt; arr.reduce((a, v) =&gt; v === value ? a + 1 : a + 0, 0);</p>\n<p>// countOccurrences([1,1,2,1,2,3], 1) -&gt; 3</p>\n</blockquote>\n<p><strong>当前URL</strong></p>\n<p>使用window.location.href来获取当前URL。</p>\n<blockquote>\n<p>const currentUrl = _ =&gt; window.location.href;</p>\n<p>// currentUrl() -&gt; ‘<a href=\"https://google.com\" target=\"_blank\" rel=\"noopener\">https://google.com</a>‘</p>\n</blockquote>\n<p><strong>Curry</strong></p>\n<p>使用递归。如果提供的参数（args）数量足够，则调用传递函数f，否则返回一个curried函数f。</p>\n<blockquote>\n<p>const curry = (fn, arity = fn.length, …args) =&gt;</p>\n<p>  arity &lt;= args.length</p>\n<p>​    ? fn(…args)</p>\n<p>​    : curry.bind(null, fn, arity, …args);</p>\n<p>// curry(Math.pow)(2)(10) -&gt; 1024</p>\n<p>// curry(Math.min, 3)(10)(50)(2) -&gt; 2</p>\n</blockquote>\n<p><strong>Deep flatten array</strong></p>\n<p>使用递归，使用reduce（）来获取所有不是数组的元素，flatten每个元素都是数组。</p>\n<blockquote>\n<p>const deepFlatten = arr =&gt;</p>\n<p>  arr.reduce((a, v) =&gt; a.concat(Array.isArray(v) ? deepFlatten(v) : v), []);</p>\n<p>// deepFlatten([1,[2],[[3],4],5]) -&gt; [1,2,3,4,5]</p>\n</blockquote>\n<p><strong>数组之间的区别</strong></p>\n<p>从b创建一个Set，然后在a上使用Array.filter（），只保留b中不包含的值。</p>\n<blockquote>\n<p>const difference = (a, b) =&gt; { const s = new Set(b); return a.filter(x =&gt; !s.has(x)); };</p>\n<p>// difference([1,2,3], [1,2]) -&gt; [3]</p>\n</blockquote>\n<p><strong>两点之间的距离</strong></p>\n<p>使用Math.hypot（）计算两点之间的欧几里德距离。</p>\n<blockquote>\n<p>const distance = (x0, y0, x1, y1) =&gt; Math.hypot(x1 - x0, y1 - y0);</p>\n<p>// distance(1,1, 2,3) -&gt; 2.23606797749979</p>\n</blockquote>\n<p><strong>可以按数字整除</strong></p>\n<p>使用模运算符（％）来检查余数是否等于0。</p>\n<blockquote>\n<p>const isDivisible = (dividend, divisor) =&gt; dividend % divisor === 0;</p>\n<p>// isDivisible(6,3) -&gt; true</p>\n</blockquote>\n<p><strong>转义正则表达式</strong></p>\n<p>使用replace（）来转义特殊字符。</p>\n<blockquote>\n<p>const escapeRegExp = str =&gt; str.replace(/[.*+?^${}()|[]]/g, ‘$&amp;’);</p>\n<p>// escapeRegExp(‘(test)’) -&gt; (test)</p>\n</blockquote>\n<p><strong>偶数或奇数</strong></p>\n<p>使用Math.abs（）将逻辑扩展为负数，使用模（％）运算符进行检查。 如果数字是偶数，则返回true；如果数字是奇数，则返回false。</p>\n<blockquote>\n<p>const isEven = num =&gt; num % 2 === 0;</p>\n<p>// isEven(3) -&gt; false</p>\n</blockquote>\n<p><strong>阶乘</strong></p>\n<p>使用递归。如果n小于或等于1，则返回1。否则返回n和n - 1的阶乘的乘积。</p>\n<blockquote>\n<p>const factorial = n =&gt; n &lt;= 1 ? 1 : n * factorial(n - 1);</p>\n<p>// factorial(6) -&gt; 720</p>\n</blockquote>\n<p><strong>斐波那契数组生成器</strong></p>\n<p>创建一个特定长度的空数组，初始化前两个值（0和1）。使用Array.reduce（）向数组中添加值，后面的一个数等于前面两个数相加之和（前两个除外）。</p>\n<blockquote>\n<p>const fibonacci = n =&gt;</p>\n<p>  Array(n).fill(0).reduce((acc, val, i) =&gt; acc.concat(i &gt; 1 ? acc[i - 1] + acc[i - 2] : i), []);</p>\n<p>// fibonacci(5) -&gt; [0,1,1,2,3]</p>\n</blockquote>\n<p><strong>过滤数组中的非唯一值</strong></p>\n<p>将Array.filter（）用于仅包含唯一值的数组。</p>\n<blockquote>\n<p>const filterNonUnique = arr =&gt; arr.filter(i =&gt; arr.indexOf(i) === arr.lastIndexOf(i));</p>\n<p>// filterNonUnique([1,2,2,3,4,4,5]) -&gt; [1,3,5]</p>\n</blockquote>\n<p><strong>Flatten数组</strong></p>\n<p>使用reduce（）来获取数组中的所有元素，并使用concat（）来使它们flatten。</p>\n<blockquote>\n<p>const flatten = arr =&gt; arr.reduce((a, v) =&gt; a.concat(v), []);</p>\n<p>// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</p>\n</blockquote>\n<p><strong>从数组中获取最大值</strong></p>\n<p>使用Math.max（）与spread运算符（…）结合得到数组中的最大值。</p>\n<blockquote>\n<p>const arrayMax = arr =&gt; Math.max(…arr);</p>\n<p>// arrayMax([10, 1, 5]) -&gt; 10</p>\n</blockquote>\n<p><strong>从数组中获取最小值</strong></p>\n<p>使用Math.min（）与spread运算符（…）结合得到数组中的最小值。</p>\n<blockquote>\n<p>const arrayMin = arr =&gt; Math.min(…arr);</p>\n<p>// arrayMin([10, 1, 5]) -&gt; 1</p>\n</blockquote>\n<p><strong>获取滚动位置</strong></p>\n<p>如果已定义，请使用pageXOffset和pageYOffset，否则使用scrollLeft和scrollTop，可以省略el来使用window的默认值。</p>\n<blockquote>\n<p>const getScrollPos = (el = window) =&gt;</p>\n<p>  ({x: (el.pageXOffset !== undefined) ? el.pageXOffset : el.scrollLeft,</p>\n<p>​    y: (el.pageYOffset !== undefined) ? el.pageYOffset : el.scrollTop});</p>\n<p>// getScrollPos() -&gt; {x: 0, y: 200}</p>\n</blockquote>\n<p><strong>最大公约数（GCD）</strong></p>\n<p>使用递归。基本情况是当y等于0时。在这种情况下，返回x。否则，返回y的GCD和x / y的其余部分。</p>\n<blockquote>\n<p>const gcd = (x, y) =&gt; !y ? x : gcd(y, x % y);</p>\n<p>// gcd (8, 36) -&gt; 4</p>\n</blockquote>\n<p><strong>Head of list</strong></p>\n<p>返回ARR[0]</p>\n<blockquote>\n<p>const head = arr =&gt; arr[0];</p>\n<p>// head([1,2,3]) -&gt; 1</p>\n</blockquote>\n<p><strong>list初始化</strong></p>\n<p>返回arr.slice（0，-1）</p>\n<blockquote>\n<p>const initial = arr =&gt; arr.slice(0, -1);</p>\n<p>// initial([1,2,3]) -&gt; [1,2]</p>\n</blockquote>\n<p><strong>用range初始化数组</strong></p>\n<p>使用Array（end-start）创建所需长度的数组，使用map（）来填充范围中的所需值，可以省略start使用默认值0。</p>\n<blockquote>\n<p>const initializeArrayRange = (end, start = 0) =&gt;</p>\n<p>  Array.apply(null, Array(end - start)).map((v, i) =&gt; i + start);</p>\n<p>// initializeArrayRange(5) -&gt; [0,1,2,3,4]</p>\n</blockquote>\n<p><strong>用值初始化数组</strong></p>\n<p>使用Array（n）创建所需长度的数组，fill(v)以填充所需的值，可以忽略value使用默认值0。</p>\n<blockquote>\n<p>const initializeArray = (n, value = 0) =&gt; Array(n).fill(value);</p>\n<p>// initializeArray(5, 2) -&gt; [2,2,2,2,2]</p>\n</blockquote>\n<p><strong>列表的最后</strong></p>\n<p>返回arr.slice（-1）[0]</p>\n<blockquote>\n<p>const last = arr =&gt; arr.slice(-1)[0];</p>\n<p>// last([1,2,3]) -&gt; 3</p>\n</blockquote>\n<p><strong>测试功能所花费的时间</strong></p>\n<p>使用performance.now（）获取函数的开始和结束时间，console.log（）所花费的时间。第一个参数是函数名，随后的参数传递给函数。</p>\n<blockquote>\n<p>const timeTaken = callback =&gt; {</p>\n<p>  console.time(‘timeTaken’);</p>\n<p>  const r = callback();</p>\n<p>  console.timeEnd(‘timeTaken’);</p>\n<p>  return r;</p>\n<p>};</p>\n<p>// timeTaken(() =&gt; Math.pow(2, 10)) -&gt; 1024</p>\n<p>// (logged): timeTaken: 0.02099609375ms</p>\n</blockquote>\n<p><strong>来自键值对的对象</strong></p>\n<p>使用Array.reduce（）来创建和组合键值对。</p>\n<blockquote>\n<p>const objectFromPairs = arr =&gt; arr.reduce((a, v) =&gt; (a[v[0]] = v[1], a), {});</p>\n<p>// objectFromPairs([[‘a’,1],[‘b’,2]]) -&gt; {a: 1, b: 2}</p>\n</blockquote>\n<p><strong>管道</strong></p>\n<p>使用Array.reduce（）通过函数传递值。</p>\n<blockquote>\n<p>const pipe = (…funcs) =&gt; arg =&gt; funcs.reduce((acc, func) =&gt; func(acc), arg);</p>\n<p>// pipe(btoa, x =&gt; x.toUpperCase())(“Test”) -&gt; “VGVZDA==”</p>\n</blockquote>\n<p><strong>Powerset</strong></p>\n<p>使用reduce（）与map（）结合来遍历元素，并将其组合成包含所有组合的数组。</p>\n<blockquote>\n<p>const powerset = arr =&gt;</p>\n<p>  arr.reduce((a, v) =&gt; a.concat(a.map(r =&gt; [v].concat(r))), [[]]);</p>\n<p>// powerset([1,2]) -&gt; [[], [1], [2], [2,1]]</p>\n</blockquote>\n<hr>\n<p><strong>范围内的随机整数</strong></p>\n<p>使用Math.random（）生成一个随机数并将其映射到所需的范围，使用Math.floor（）使其成为一个整数。</p>\n<blockquote>\n<p>const randomIntegerInRange = (min, max) =&gt; Math.floor(Math.random() * (max - min + 1)) + min;</p>\n<p>// randomIntegerInRange(0, 5) -&gt; 2</p>\n</blockquote>\n<p><strong>范围内的随机数</strong></p>\n<p>使用Math.random（）生成一个随机值，使用乘法将其映射到所需的范围。</p>\n<blockquote>\n<p>const randomInRange = (min, max) =&gt; Math.random() * (max - min) + min;</p>\n<p>// randomInRange(2,10) -&gt; 6.0211363285087005</p>\n</blockquote>\n<p><strong>随**</strong>机化数组的顺序**</p>\n<p>使用sort（）重新排序元素，利用Math.random（）来随机排序。</p>\n<blockquote>\n<p>const shuffle = arr =&gt; arr.sort(() =&gt; Math.random() - 0.5);</p>\n<p>// shuffle([1,2,3]) -&gt; [2,3,1]</p>\n</blockquote>\n<p><strong>重定向到URL</strong></p>\n<p>使用window.location.href或window.location.replace（）重定向到url。 传递第二个参数来模拟链接点击（true - default）或HTTP重定向（false）。</p>\n<blockquote>\n<p>const redirect = (url, asLink = true) =&gt;</p>\n<p>  asLink ? window.location.href = url : window.location.replace(url);</p>\n<p>// redirect(‘<a href=\"https://google.com\" target=\"_blank\" rel=\"noopener\">https://google.com</a>‘)</p>\n</blockquote>\n<p><strong>反转一个字符串</strong></p>\n<p>使用数组解构和Array.reverse（）来颠倒字符串中的字符顺序。合并字符以使用join(‘’)获取字符串。</p>\n<blockquote>\n<p>const reverseString = str =&gt; […str].reverse().join(‘’);</p>\n<p>// reverseString(‘foobar’) -&gt; ‘raboof’</p>\n</blockquote>\n<p><strong>RGB到十六进制</strong></p>\n<p>使用按位左移运算符（&lt;&lt;）和toString（16），然后padStart（6，“0”）将给定的RGB参数转换为十六进制字符串以获得6位十六进制值。</p>\n<blockquote>\n<p>const rgbToHex = (r, g, b) =&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, ‘0’);</p>\n<p>// rgbToHex(255, 165, 1) -&gt; ‘ffa501’</p>\n</blockquote>\n<p><strong>滚动到顶部</strong></p>\n<p>使用document.documentElement.scrollTop或document.body.scrollTop获取到顶部的距离。</p>\n<p>从顶部滚动一小部分距离。</p>\n<p>使用window.requestAnimationFrame（）来滚动。</p>\n<blockquote>\n<p>const scrollToTop = _ =&gt; {</p>\n<p>  const c = document.documentElement.scrollTop || document.body.scrollTop;</p>\n<p>  if (c &gt; 0) {</p>\n<p>​    window.requestAnimationFrame(scrollToTop);</p>\n<p>​    window.scrollTo(0, c - c / 8);</p>\n<p>  }</p>\n<p>};</p>\n<p>// scrollToTop()</p>\n</blockquote>\n<p><strong>随机数组值</strong></p>\n<p>使用Array.map（）和Math.random（）创建一个随机值的数组。使用Array.sort（）根据随机值对原始数组的元素进行排序。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/dkwuWwLoRKibcpl9eKXOsT1j3XeQdrftj49ibPXqbdq0lFxkhUChUgkVMQattNEHU6w6RibfCETKQMR0XpOoGSWSA/?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"img\"></p>\n<p><strong>数组之间的相似性</strong></p>\n<p>使用filter（）移除不是values的一部分值，使用includes（）确定。</p>\n<blockquote>\n<p>const similarity = (arr, values) =&gt; arr.filter(v =&gt; values.includes(v));</p>\n<p>// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</p>\n</blockquote>\n<p><strong>按字符串排序（按字母顺序排列）</strong></p>\n<p>使用split（’’）分割字符串，sort（）使用localeCompare（），使用join（’’）重新组合。</p>\n<blockquote>\n<p>const sortCharactersInString = str =&gt;</p>\n<p>  str.split(‘’).sort((a, b) =&gt; a.localeCompare(b)).join(‘’);</p>\n<p>// sortCharactersInString(‘cabbage’) -&gt; ‘aabbceg’</p>\n</blockquote>\n<p><strong>数组总和</strong></p>\n<p>使用reduce（）将每个值添加到累加器，初始化值为0。</p>\n<blockquote>\n<p>const sum = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0);</p>\n<p>// sum([1,2,3,4]) -&gt; 10</p>\n</blockquote>\n<p><strong>交换两个变量的值</strong></p>\n<p>使用数组解构来交换两个变量之间的值。</p>\n<blockquote>\n<p>[varA, varB] = [varB, varA];</p>\n<p>// [x, y] = [y, x]</p>\n</blockquote>\n<p><strong>列表的tail</strong></p>\n<p>返回arr.slice（1）</p>\n<blockquote>\n<p>const tail = arr =&gt; arr.length &gt; 1 ? arr.slice(1) : arr;</p>\n<p>// tail([1,2,3]) -&gt; [2,3]</p>\n<p>// tail([1]) -&gt; [1]</p>\n</blockquote>\n<p><strong>数组唯一值</strong></p>\n<p>使用ES6 Set和… rest操作符去掉所有重复值。</p>\n<blockquote>\n<p>const unique = arr =&gt; […new Set(arr)];</p>\n<p>// unique([1,2,2,3,4,4,5]) -&gt; [1,2,3,4,5]</p>\n</blockquote>\n<p><strong>URL参数</strong></p>\n<p>使用match() 与适当的正则表达式来获得所有键值对，适当的map() 。使用Object.assign（）和spread运算符（…）将所有键值对组合到一个对象中，将location.search作为参数传递给当前url。</p>\n<blockquote>\n<p>const getUrlParameters = url =&gt;</p>\n<p>  url.match(/([^?=&amp;]+)(=([^&amp;]*))/g).reduce(</p>\n<p>​    (a, v) =&gt; (a[v.slice(0, v.indexOf(‘=’))] = v.slice(v.indexOf(‘=’) + 1), a), {}</p>\n<p>  );</p>\n<p>// getUrlParameters(‘<a href=\"http://url.com/page?name=Adam&amp;surname=Smith\" target=\"_blank\" rel=\"noopener\">http://url.com/page?name=Adam&amp;surname=Smith</a>‘) -&gt; {name: ‘Adam’, surname: ‘Smith’}</p>\n</blockquote>\n<p>UUID生成器</p>\n<p>使用crypto API生成符合RFC4122版本4的UUID。</p>\n<blockquote>\n<p>const uuid = _ =&gt;</p>\n<p>  ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =&gt;</p>\n<p>​    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] &amp; 15 &gt;&gt; c / 4).toString(16)</p>\n<p>  );</p>\n<p>// uuid() -&gt; ‘7982fcfe-5721-4632-bede-6000885be57d’</p>\n</blockquote>\n<p><strong>验证数字</strong></p>\n<p>使用！isNaN和parseFloat（）来检查参数是否是一个数字，使用isFinite（）来检查数字是否是有限的。</p>\n<blockquote>\n<p>const validateNumber = n =&gt; !isNaN(parseFloat(n)) &amp;&amp; isFinite(n) &amp;&amp; Number(n) == n;</p>\n<p>// validateNumber(‘10’) -&gt; true</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"48-个-JavaScript-代码片段\"><a href=\"#48-个-JavaScript-代码片段\" class=\"headerlink\" title=\"48 个 JavaScript 代码片段\"></a>48 个 JavaScript 代码片段</h2><p><strong>Anagrams of string（带有重复项）</strong></p>\n<p>使用递归。对于给定字符串中的每个字母，为字母创建字谜。使用map（）将字母与每部分字谜组合，然后使用reduce（）将所有字谜组合到一个数组中，最基本情况是字符串长度等于2或1。</p>","more":"<blockquote>\n<p>const anagrams = str =&gt; {</p>\n<p>  if (str.length &lt;= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];</p>\n<p>  return str.split(‘’).reduce((acc, letter, i) =&gt;</p>\n<p>​    acc.concat(anagrams(str.slice(0, i) + str.slice(i + 1)).map(val =&gt; letter + val)), []);</p>\n<p>};</p>\n<p>// anagrams(‘abc’) -&gt; [‘abc’,’acb’,’bac’,’bca’,’cab’,’cba’]</p>\n</blockquote>\n<p><strong>数组平均数</strong></p>\n<p>使用reduce（）将每个值添加到累加器，初始值为0，总和除以数组长度。</p>\n<blockquote>\n<p>const average = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0) / arr.length;</p>\n<p>// average([1,2,3]) -&gt; 2</p>\n</blockquote>\n<p><strong>大写每个单词的首字母</strong></p>\n<p>使用replace（）匹配每个单词的第一个字符，并使用toUpperCase（）来将其大写。</p>\n<blockquote>\n<p>const capitalizeEveryWord = str =&gt; str.replace(/[a-z]/g, char =&gt; char.toUpperCase());</p>\n<p>// capitalizeEveryWord(‘hello world!’) -&gt; ‘Hello World!’</p>\n</blockquote>\n<p><strong>首字母大写</strong></p>\n<p>使用slice（0,1）和toUpperCase（）大写第一个字母，slice（1）获取字符串的其余部分。 省略lowerRest参数以保持字符串的其余部分不变，或将其设置为true以转换为小写。（注意：这和上一个示例不是同一件事情）</p>\n<blockquote>\n<p>const capitalize = (str, lowerRest = false) =&gt;</p>\n<p>  str.slice(0, 1).toUpperCase() + (lowerRest ? str.slice(1).toLowerCase() : str.slice(1));</p>\n<p>// capitalize(‘myName’, true) -&gt; ‘Myname’</p>\n</blockquote>\n<p><strong>检查回文</strong></p>\n<p>将字符串转换为toLowerCase（），并使用replace（）从中删除非字母的字符。然后，将其转换为tolowerCase（），将（’’）拆分为单独字符，reverse（），join（’’），与原始的非反转字符串进行比较，然后将其转换为tolowerCase（）。</p>\n<blockquote>\n<p>const palindrome = str =&gt; {</p>\n<p>  const s = str.toLowerCase().replace(/[W_]/g,’’);</p>\n<p>  return s === s.split(‘’).reverse().join(‘’);</p>\n<p>}</p>\n<p>// palindrome(‘taco cat’) -&gt; true</p>\n</blockquote>\n<p><strong>计数数组中值的出现次数</strong></p>\n<p>每次遇到数组中的特定值时，使用reduce（）来递增计数器。</p>\n<blockquote>\n<p>const countOccurrences = (arr, value) =&gt; arr.reduce((a, v) =&gt; v === value ? a + 1 : a + 0, 0);</p>\n<p>// countOccurrences([1,1,2,1,2,3], 1) -&gt; 3</p>\n</blockquote>\n<p><strong>当前URL</strong></p>\n<p>使用window.location.href来获取当前URL。</p>\n<blockquote>\n<p>const currentUrl = _ =&gt; window.location.href;</p>\n<p>// currentUrl() -&gt; ‘<a href=\"https://google.com\" target=\"_blank\" rel=\"noopener\">https://google.com</a>‘</p>\n</blockquote>\n<p><strong>Curry</strong></p>\n<p>使用递归。如果提供的参数（args）数量足够，则调用传递函数f，否则返回一个curried函数f。</p>\n<blockquote>\n<p>const curry = (fn, arity = fn.length, …args) =&gt;</p>\n<p>  arity &lt;= args.length</p>\n<p>​    ? fn(…args)</p>\n<p>​    : curry.bind(null, fn, arity, …args);</p>\n<p>// curry(Math.pow)(2)(10) -&gt; 1024</p>\n<p>// curry(Math.min, 3)(10)(50)(2) -&gt; 2</p>\n</blockquote>\n<p><strong>Deep flatten array</strong></p>\n<p>使用递归，使用reduce（）来获取所有不是数组的元素，flatten每个元素都是数组。</p>\n<blockquote>\n<p>const deepFlatten = arr =&gt;</p>\n<p>  arr.reduce((a, v) =&gt; a.concat(Array.isArray(v) ? deepFlatten(v) : v), []);</p>\n<p>// deepFlatten([1,[2],[[3],4],5]) -&gt; [1,2,3,4,5]</p>\n</blockquote>\n<p><strong>数组之间的区别</strong></p>\n<p>从b创建一个Set，然后在a上使用Array.filter（），只保留b中不包含的值。</p>\n<blockquote>\n<p>const difference = (a, b) =&gt; { const s = new Set(b); return a.filter(x =&gt; !s.has(x)); };</p>\n<p>// difference([1,2,3], [1,2]) -&gt; [3]</p>\n</blockquote>\n<p><strong>两点之间的距离</strong></p>\n<p>使用Math.hypot（）计算两点之间的欧几里德距离。</p>\n<blockquote>\n<p>const distance = (x0, y0, x1, y1) =&gt; Math.hypot(x1 - x0, y1 - y0);</p>\n<p>// distance(1,1, 2,3) -&gt; 2.23606797749979</p>\n</blockquote>\n<p><strong>可以按数字整除</strong></p>\n<p>使用模运算符（％）来检查余数是否等于0。</p>\n<blockquote>\n<p>const isDivisible = (dividend, divisor) =&gt; dividend % divisor === 0;</p>\n<p>// isDivisible(6,3) -&gt; true</p>\n</blockquote>\n<p><strong>转义正则表达式</strong></p>\n<p>使用replace（）来转义特殊字符。</p>\n<blockquote>\n<p>const escapeRegExp = str =&gt; str.replace(/[.*+?^${}()|[]]/g, ‘$&amp;’);</p>\n<p>// escapeRegExp(‘(test)’) -&gt; (test)</p>\n</blockquote>\n<p><strong>偶数或奇数</strong></p>\n<p>使用Math.abs（）将逻辑扩展为负数，使用模（％）运算符进行检查。 如果数字是偶数，则返回true；如果数字是奇数，则返回false。</p>\n<blockquote>\n<p>const isEven = num =&gt; num % 2 === 0;</p>\n<p>// isEven(3) -&gt; false</p>\n</blockquote>\n<p><strong>阶乘</strong></p>\n<p>使用递归。如果n小于或等于1，则返回1。否则返回n和n - 1的阶乘的乘积。</p>\n<blockquote>\n<p>const factorial = n =&gt; n &lt;= 1 ? 1 : n * factorial(n - 1);</p>\n<p>// factorial(6) -&gt; 720</p>\n</blockquote>\n<p><strong>斐波那契数组生成器</strong></p>\n<p>创建一个特定长度的空数组，初始化前两个值（0和1）。使用Array.reduce（）向数组中添加值，后面的一个数等于前面两个数相加之和（前两个除外）。</p>\n<blockquote>\n<p>const fibonacci = n =&gt;</p>\n<p>  Array(n).fill(0).reduce((acc, val, i) =&gt; acc.concat(i &gt; 1 ? acc[i - 1] + acc[i - 2] : i), []);</p>\n<p>// fibonacci(5) -&gt; [0,1,1,2,3]</p>\n</blockquote>\n<p><strong>过滤数组中的非唯一值</strong></p>\n<p>将Array.filter（）用于仅包含唯一值的数组。</p>\n<blockquote>\n<p>const filterNonUnique = arr =&gt; arr.filter(i =&gt; arr.indexOf(i) === arr.lastIndexOf(i));</p>\n<p>// filterNonUnique([1,2,2,3,4,4,5]) -&gt; [1,3,5]</p>\n</blockquote>\n<p><strong>Flatten数组</strong></p>\n<p>使用reduce（）来获取数组中的所有元素，并使用concat（）来使它们flatten。</p>\n<blockquote>\n<p>const flatten = arr =&gt; arr.reduce((a, v) =&gt; a.concat(v), []);</p>\n<p>// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</p>\n</blockquote>\n<p><strong>从数组中获取最大值</strong></p>\n<p>使用Math.max（）与spread运算符（…）结合得到数组中的最大值。</p>\n<blockquote>\n<p>const arrayMax = arr =&gt; Math.max(…arr);</p>\n<p>// arrayMax([10, 1, 5]) -&gt; 10</p>\n</blockquote>\n<p><strong>从数组中获取最小值</strong></p>\n<p>使用Math.min（）与spread运算符（…）结合得到数组中的最小值。</p>\n<blockquote>\n<p>const arrayMin = arr =&gt; Math.min(…arr);</p>\n<p>// arrayMin([10, 1, 5]) -&gt; 1</p>\n</blockquote>\n<p><strong>获取滚动位置</strong></p>\n<p>如果已定义，请使用pageXOffset和pageYOffset，否则使用scrollLeft和scrollTop，可以省略el来使用window的默认值。</p>\n<blockquote>\n<p>const getScrollPos = (el = window) =&gt;</p>\n<p>  ({x: (el.pageXOffset !== undefined) ? el.pageXOffset : el.scrollLeft,</p>\n<p>​    y: (el.pageYOffset !== undefined) ? el.pageYOffset : el.scrollTop});</p>\n<p>// getScrollPos() -&gt; {x: 0, y: 200}</p>\n</blockquote>\n<p><strong>最大公约数（GCD）</strong></p>\n<p>使用递归。基本情况是当y等于0时。在这种情况下，返回x。否则，返回y的GCD和x / y的其余部分。</p>\n<blockquote>\n<p>const gcd = (x, y) =&gt; !y ? x : gcd(y, x % y);</p>\n<p>// gcd (8, 36) -&gt; 4</p>\n</blockquote>\n<p><strong>Head of list</strong></p>\n<p>返回ARR[0]</p>\n<blockquote>\n<p>const head = arr =&gt; arr[0];</p>\n<p>// head([1,2,3]) -&gt; 1</p>\n</blockquote>\n<p><strong>list初始化</strong></p>\n<p>返回arr.slice（0，-1）</p>\n<blockquote>\n<p>const initial = arr =&gt; arr.slice(0, -1);</p>\n<p>// initial([1,2,3]) -&gt; [1,2]</p>\n</blockquote>\n<p><strong>用range初始化数组</strong></p>\n<p>使用Array（end-start）创建所需长度的数组，使用map（）来填充范围中的所需值，可以省略start使用默认值0。</p>\n<blockquote>\n<p>const initializeArrayRange = (end, start = 0) =&gt;</p>\n<p>  Array.apply(null, Array(end - start)).map((v, i) =&gt; i + start);</p>\n<p>// initializeArrayRange(5) -&gt; [0,1,2,3,4]</p>\n</blockquote>\n<p><strong>用值初始化数组</strong></p>\n<p>使用Array（n）创建所需长度的数组，fill(v)以填充所需的值，可以忽略value使用默认值0。</p>\n<blockquote>\n<p>const initializeArray = (n, value = 0) =&gt; Array(n).fill(value);</p>\n<p>// initializeArray(5, 2) -&gt; [2,2,2,2,2]</p>\n</blockquote>\n<p><strong>列表的最后</strong></p>\n<p>返回arr.slice（-1）[0]</p>\n<blockquote>\n<p>const last = arr =&gt; arr.slice(-1)[0];</p>\n<p>// last([1,2,3]) -&gt; 3</p>\n</blockquote>\n<p><strong>测试功能所花费的时间</strong></p>\n<p>使用performance.now（）获取函数的开始和结束时间，console.log（）所花费的时间。第一个参数是函数名，随后的参数传递给函数。</p>\n<blockquote>\n<p>const timeTaken = callback =&gt; {</p>\n<p>  console.time(‘timeTaken’);</p>\n<p>  const r = callback();</p>\n<p>  console.timeEnd(‘timeTaken’);</p>\n<p>  return r;</p>\n<p>};</p>\n<p>// timeTaken(() =&gt; Math.pow(2, 10)) -&gt; 1024</p>\n<p>// (logged): timeTaken: 0.02099609375ms</p>\n</blockquote>\n<p><strong>来自键值对的对象</strong></p>\n<p>使用Array.reduce（）来创建和组合键值对。</p>\n<blockquote>\n<p>const objectFromPairs = arr =&gt; arr.reduce((a, v) =&gt; (a[v[0]] = v[1], a), {});</p>\n<p>// objectFromPairs([[‘a’,1],[‘b’,2]]) -&gt; {a: 1, b: 2}</p>\n</blockquote>\n<p><strong>管道</strong></p>\n<p>使用Array.reduce（）通过函数传递值。</p>\n<blockquote>\n<p>const pipe = (…funcs) =&gt; arg =&gt; funcs.reduce((acc, func) =&gt; func(acc), arg);</p>\n<p>// pipe(btoa, x =&gt; x.toUpperCase())(“Test”) -&gt; “VGVZDA==”</p>\n</blockquote>\n<p><strong>Powerset</strong></p>\n<p>使用reduce（）与map（）结合来遍历元素，并将其组合成包含所有组合的数组。</p>\n<blockquote>\n<p>const powerset = arr =&gt;</p>\n<p>  arr.reduce((a, v) =&gt; a.concat(a.map(r =&gt; [v].concat(r))), [[]]);</p>\n<p>// powerset([1,2]) -&gt; [[], [1], [2], [2,1]]</p>\n</blockquote>\n<hr>\n<p><strong>范围内的随机整数</strong></p>\n<p>使用Math.random（）生成一个随机数并将其映射到所需的范围，使用Math.floor（）使其成为一个整数。</p>\n<blockquote>\n<p>const randomIntegerInRange = (min, max) =&gt; Math.floor(Math.random() * (max - min + 1)) + min;</p>\n<p>// randomIntegerInRange(0, 5) -&gt; 2</p>\n</blockquote>\n<p><strong>范围内的随机数</strong></p>\n<p>使用Math.random（）生成一个随机值，使用乘法将其映射到所需的范围。</p>\n<blockquote>\n<p>const randomInRange = (min, max) =&gt; Math.random() * (max - min) + min;</p>\n<p>// randomInRange(2,10) -&gt; 6.0211363285087005</p>\n</blockquote>\n<p><strong>随**</strong>机化数组的顺序**</p>\n<p>使用sort（）重新排序元素，利用Math.random（）来随机排序。</p>\n<blockquote>\n<p>const shuffle = arr =&gt; arr.sort(() =&gt; Math.random() - 0.5);</p>\n<p>// shuffle([1,2,3]) -&gt; [2,3,1]</p>\n</blockquote>\n<p><strong>重定向到URL</strong></p>\n<p>使用window.location.href或window.location.replace（）重定向到url。 传递第二个参数来模拟链接点击（true - default）或HTTP重定向（false）。</p>\n<blockquote>\n<p>const redirect = (url, asLink = true) =&gt;</p>\n<p>  asLink ? window.location.href = url : window.location.replace(url);</p>\n<p>// redirect(‘<a href=\"https://google.com\" target=\"_blank\" rel=\"noopener\">https://google.com</a>‘)</p>\n</blockquote>\n<p><strong>反转一个字符串</strong></p>\n<p>使用数组解构和Array.reverse（）来颠倒字符串中的字符顺序。合并字符以使用join(‘’)获取字符串。</p>\n<blockquote>\n<p>const reverseString = str =&gt; […str].reverse().join(‘’);</p>\n<p>// reverseString(‘foobar’) -&gt; ‘raboof’</p>\n</blockquote>\n<p><strong>RGB到十六进制</strong></p>\n<p>使用按位左移运算符（&lt;&lt;）和toString（16），然后padStart（6，“0”）将给定的RGB参数转换为十六进制字符串以获得6位十六进制值。</p>\n<blockquote>\n<p>const rgbToHex = (r, g, b) =&gt; ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).padStart(6, ‘0’);</p>\n<p>// rgbToHex(255, 165, 1) -&gt; ‘ffa501’</p>\n</blockquote>\n<p><strong>滚动到顶部</strong></p>\n<p>使用document.documentElement.scrollTop或document.body.scrollTop获取到顶部的距离。</p>\n<p>从顶部滚动一小部分距离。</p>\n<p>使用window.requestAnimationFrame（）来滚动。</p>\n<blockquote>\n<p>const scrollToTop = _ =&gt; {</p>\n<p>  const c = document.documentElement.scrollTop || document.body.scrollTop;</p>\n<p>  if (c &gt; 0) {</p>\n<p>​    window.requestAnimationFrame(scrollToTop);</p>\n<p>​    window.scrollTo(0, c - c / 8);</p>\n<p>  }</p>\n<p>};</p>\n<p>// scrollToTop()</p>\n</blockquote>\n<p><strong>随机数组值</strong></p>\n<p>使用Array.map（）和Math.random（）创建一个随机值的数组。使用Array.sort（）根据随机值对原始数组的元素进行排序。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/dkwuWwLoRKibcpl9eKXOsT1j3XeQdrftj49ibPXqbdq0lFxkhUChUgkVMQattNEHU6w6RibfCETKQMR0XpOoGSWSA/?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"img\"></p>\n<p><strong>数组之间的相似性</strong></p>\n<p>使用filter（）移除不是values的一部分值，使用includes（）确定。</p>\n<blockquote>\n<p>const similarity = (arr, values) =&gt; arr.filter(v =&gt; values.includes(v));</p>\n<p>// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</p>\n</blockquote>\n<p><strong>按字符串排序（按字母顺序排列）</strong></p>\n<p>使用split（’’）分割字符串，sort（）使用localeCompare（），使用join（’’）重新组合。</p>\n<blockquote>\n<p>const sortCharactersInString = str =&gt;</p>\n<p>  str.split(‘’).sort((a, b) =&gt; a.localeCompare(b)).join(‘’);</p>\n<p>// sortCharactersInString(‘cabbage’) -&gt; ‘aabbceg’</p>\n</blockquote>\n<p><strong>数组总和</strong></p>\n<p>使用reduce（）将每个值添加到累加器，初始化值为0。</p>\n<blockquote>\n<p>const sum = arr =&gt; arr.reduce((acc, val) =&gt; acc + val, 0);</p>\n<p>// sum([1,2,3,4]) -&gt; 10</p>\n</blockquote>\n<p><strong>交换两个变量的值</strong></p>\n<p>使用数组解构来交换两个变量之间的值。</p>\n<blockquote>\n<p>[varA, varB] = [varB, varA];</p>\n<p>// [x, y] = [y, x]</p>\n</blockquote>\n<p><strong>列表的tail</strong></p>\n<p>返回arr.slice（1）</p>\n<blockquote>\n<p>const tail = arr =&gt; arr.length &gt; 1 ? arr.slice(1) : arr;</p>\n<p>// tail([1,2,3]) -&gt; [2,3]</p>\n<p>// tail([1]) -&gt; [1]</p>\n</blockquote>\n<p><strong>数组唯一值</strong></p>\n<p>使用ES6 Set和… rest操作符去掉所有重复值。</p>\n<blockquote>\n<p>const unique = arr =&gt; […new Set(arr)];</p>\n<p>// unique([1,2,2,3,4,4,5]) -&gt; [1,2,3,4,5]</p>\n</blockquote>\n<p><strong>URL参数</strong></p>\n<p>使用match() 与适当的正则表达式来获得所有键值对，适当的map() 。使用Object.assign（）和spread运算符（…）将所有键值对组合到一个对象中，将location.search作为参数传递给当前url。</p>\n<blockquote>\n<p>const getUrlParameters = url =&gt;</p>\n<p>  url.match(/([^?=&amp;]+)(=([^&amp;]*))/g).reduce(</p>\n<p>​    (a, v) =&gt; (a[v.slice(0, v.indexOf(‘=’))] = v.slice(v.indexOf(‘=’) + 1), a), {}</p>\n<p>  );</p>\n<p>// getUrlParameters(‘<a href=\"http://url.com/page?name=Adam&amp;surname=Smith\" target=\"_blank\" rel=\"noopener\">http://url.com/page?name=Adam&amp;surname=Smith</a>‘) -&gt; {name: ‘Adam’, surname: ‘Smith’}</p>\n</blockquote>\n<p>UUID生成器</p>\n<p>使用crypto API生成符合RFC4122版本4的UUID。</p>\n<blockquote>\n<p>const uuid = _ =&gt;</p>\n<p>  ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =&gt;</p>\n<p>​    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] &amp; 15 &gt;&gt; c / 4).toString(16)</p>\n<p>  );</p>\n<p>// uuid() -&gt; ‘7982fcfe-5721-4632-bede-6000885be57d’</p>\n</blockquote>\n<p><strong>验证数字</strong></p>\n<p>使用！isNaN和parseFloat（）来检查参数是否是一个数字，使用isFinite（）来检查数字是否是有限的。</p>\n<blockquote>\n<p>const validateNumber = n =&gt; !isNaN(parseFloat(n)) &amp;&amp; isFinite(n) &amp;&amp; Number(n) == n;</p>\n<p>// validateNumber(‘10’) -&gt; true</p>\n</blockquote>"},{"title":"CSS之清除浮动","date":"2017-04-22T12:06:00.000Z","summary_img":"http://p4z3kz4fz.bkt.clouddn.com/boxmodel%20%281%29.png","_content":"### **1.什么是浮动**\n\n**首先我们需要知道定位** \n元素在页面中的位置就是定位，解决问题之前我们先来了解下几种定位方式 \n**1、普通流定位 static（默认方式）** \n普通流定位，又称为文档流定位，是页面元素的默认定位方式 \n页面中的块级元素：按照从上到下的方式逐个排列 \n页面中的行内元素：按照从左到右的方式逐个排列 \n\n<!--more-->\n\n但是如何让**多个块级元素在一行内显示?** \n这里就引出了浮动定位 \n**2、浮动定位 float** \nfloat属性 取值为 left/right \n这个属性原本不是用来布局的，而是用来做文字环绕的，但是后来人们发现做布局也不错，就一直这么用了，甚至有些时候都忘了用他做文字环绕 \n**3、相对定位 relative** \n元素会相对于它原来的位置偏移某个距离，改变元素位置后，元素原本的空间依然会被保留 \n**语法** \n属性：position \n取值：relative \n配合着 偏移属性(top/right/bottom/left)实现位置的改变\n\n**4、绝对定位 absolute** \n如果元素被设置为绝对定位的话，将具备以下几个特征 \n1、脱离文档流-不占据页面空间 \n2、通过偏移属性固定元素位置 \n3、相对于 最近的已定位的**祖先元素**实现位置固定 \n4、如果没有已定位**祖先元素**，那么就相对于最初的包含块(body,html)去实现位置的固定 \n**语法** \n属性：position \n取值：absolute \n配合着 偏移属性(top/right/bottom/left)实现位置的固定\n\n**5、固定定位 fixed** \n将元素固定在页面的某个位置处，不会随着滚动条而发生位置移动 \n**语法** \n属性：position \n取值：fixed \n配合着 偏移属性(top/right/bottom/left)实现位置的固定\n\n### **2.浮动的效果**\n\n- **浮动 之后会怎么样？** \n  1、浮动定位元素会被排除在文档流之外-脱离文档流(不占据页面空间),其余的元素要上前补位 \n  2、浮动元素会停靠在父元素的左边或右边，或停靠在其他已浮动元素的边缘上(元素只能在当前所在行浮动) \n  3、浮动元素依然位于父元素之内 \n  4、浮动元素处理的问题-解决多个块级元素在一行内显示的问题 \n  **注意** \n  1、一行内，显示不下所有的已浮动元素时，最后一个将换行 \n  2、元素一旦浮动起来之后，那么宽度将变成自适应(宽度由内容决定) \n  3、元素一旦浮动起来之后，那么就将变成块级元素,尤其对行内元素，影响最大 \n  块级元素：允许修改尺寸 \n  行内元素：不允许修改尺寸 \n  4、文本，行内元素，行内块元素时采用环绕的方式来排列的，是不会被浮动元素压在底下的，会巧妙的避开浮动元素\n- **浮动 之后会有什么样的影响？** \n  由于浮动元素会脱离文档流，所以导致不占据页面空间，所以会对父元素高度带来一定影响。如果一个元素中包含的元素全部是浮动元素，那么该元素高度将变成0（高度塌陷）\n\n### **3.如何清除浮动**\n\n#### **解决方案 及 原理分析**\n\n##### **方案1**\n\n直接设置父元素的高度 \n优势：极其简单 \n弊端：必须要知道父元素高度是多少\n\n##### **方案2**\n\n在父元素中，追加空子元素，并设置其clear属性为both \nclear是css中专用于清除浮动的属性 \n作用：清除当前元素前面的元素浮动所带来的影响 \n取值： \n1、none \n默认值，不做任何清除浮动的操作 \n2、left \n清除前面元素左浮动带来的影响 \n3、right \n清除前面元素右浮动带来的影响 \n4、both \n清除前面元素所有浮动带来的影响 \n优势：代码量少 容易掌握 简单易懂 \n弊端：会添加许多无意义的空标签，有违结构与表现的分离，不便于后期的维护\n\n##### **方案3**\n\n设置父元素浮动 \n优势：简单，代码量少，没有结构和语义化问题 \n弊端：对后续元素会有影响\n\n##### **方案4**\n\n为父元素设置overflow属性 \n取值：hidden 或 auto \n优势：简单，代码量少 \n弊端：如果有内容要溢出显示(弹出菜单)，也会被一同隐藏\n\n##### **方案5**\n\n父元素设置display:table \n优势：不影响结构与表现的分离，语义化正确，代码量少 \n弊端：盒模型属性已经改变，会造成其他问题\n\n##### **方案6**\n\n使用内容生成的方式清除浮动\n\n```css\n.clearfix:after {\n   content:\"\"; \n   display: block; \n   clear:both; \n}12345\n```\n\n:after 选择器向选定的元素之后插入内容 \n`content:\"\";` 生成内容为空 \n`display: block;` 生成的元素以块级元素显示, \n`clear:both;` 清除前面元素浮动带来的影响 \n相对于空标签闭合浮动的方法 \n优势：不破坏文档结构，没有副作用 \n弊端：代码量多\n\n##### **方案7**\n\n```css\n.cf:before,.cf:after {\n   content:\"\";\n   display:table;\n}\n.cf:after { clear:both; }12345\n```\n\n优势：不破坏文档结构，没有副作用 \n弊端： 代码量多 \n注意：display:table本身无法触发BFC，但是它会产生匿名框(anonymous boxes)，而匿名框中的display:table-cell可以触发BFC，简单说就是，触发块级格式化上下文的是匿名框，而不是display:table。所以通过display:table和display:table-cell创建的BFC效果是不一样的（后面会说到BFC）。\n\n> CSS2.1 表格模型中的元素，可能不会全部包含在除HTML之外的文档语言中。这时，那些“丢失”的元素会被模拟出来，从而使得表格模型能够正常工作。所有的表格元素将会自动在自身周围生成所需的匿名table对象，使其符合table/inline-table、table-row、table- cell的三层嵌套关系。\n\n##### **疑问**\n\n为什么会margin边距重叠？ \noverflow:hidden, 语义应该是溢出:隐藏，按道理说，子元素浮动了，但依然是在父元素里的，而父元素高度塌陷，高度为0了，子元素应该算是溢出了，为什么没有隐藏，反而撑开了父元素的高度？ \n为什么display:table也能清除浮动，原理是什么？\n\n##### **解释**\n\n要解释这些疑问，我们就要提到Formatting context \nFormatting context是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 \n最常见的Formatting context有Block fomatting context(简称BFC)和Inline formatting context(简称IFC)。 \nCSS2.1 中只有BFC和IFC, CSS3中还增加了GFC和FFC \n**这里主要说BFC** \nBFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。 \nblock-level box，display属性为block, list-item, table的元素，会生成block-level box。并且参与block fomatting context。 \ninline-level box， display属性为inline, inline-block, inline-table的元素，会生成inline-level box。并且参与inline formatting context。 \n**BFC布局规则：** \n1、内部的Box会在垂直方向，按照从上到下的方式逐个排列。 \n2、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 \n3、每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 \n4、BFC的区域不会与float box重叠。 \n5、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 \n6、计算BFC的高度时，浮动元素的高度也参与计算 \n**触发BFC的条件** \n1、根元素 \n2、float （left，right） \n3、overflow 除了visible 以外的值（hidden，auto，scroll ） \n4、display (table-cell，table-caption，inline-block) \n5、position（absolute，fixed） \n**举例详解BFC**\n\n```css\n<style>\n   .top{\n    width:100px;\n    height:100px;\n    background:red;\n    margin:50px;\n   }\n   .bottom{\n    width:100px;\n    height:100px;\n    background:blue;\n    margin:20px;\n   }\n</style>\n<body>\n    <div class=\"top\">上</div>\n    <div class=\"bottom\">下</div>\n</body>\n```\n\n​\t\t\t\t\t\t\t<img src=\"http://img.blog.csdn.net/20170403151130868?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n\n依据BFC布局规则第二条：\n\nBox垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 \n注意：发生重叠后，外边距的高度等于两个发生重叠的外边距的高度中的较大者\n\n```html\n<style>\n   .top{\n    width:100px;\n    height:100px;\n    background:red;\n    float:left;\n   }\n   .bottom{\n    width:200px;\n    height:200px;\n    background:blue;\n   }\n</style>\n<body>\n    <div class=\"top\"></div>\n    <div class=\"bottom\"></div>\n</body>\n```\n​\t                                                       <img src=\"http://img.blog.csdn.net/20170403152150431?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n依据BFC布局规则第三条：\n\n每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 \n我们可以看到，虽然有浮动的元素top，但是bottom的左边依然与包含块的左边相接触。\n\n```css\nwidth:100px;\nheight:100px;\nbackground:red;\nfloat:left;<style>\n   .top{\n    width:100px;\n    height:100px;\n    background:red;\n    float:left;\n   }\n   .bottom{\n    width:200px;\n    height:200px;\n    background:blue;\n    overflow:hidden;\n   }\n</style>\n<body>\n    <div class=\"top\"></div>\n    <div class=\"bottom\"></div>\n</body>\n```\n​\t\t\t\t\t\t\t\t<img src=\"http://img.blog.csdn.net/20170403153221135?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n\n依据BFC布局规则第四条：\n\nBFC的区域不会与float box重叠。 \n看代码和效果图，可以看出，这次的代码比上面的代码多了一行overflow:hidden;用这行代码触发新的BFC后，由于这个新的BFC不会与浮动的top重叠，所以bottom的位置改变了\n\n```css\n<style>\n   p{\n    width:100px;\n    height:100px;\n    background:red;\n    float:left;\n   }\n   div{\n    width:200px;\n    border:1px solid blue;\n   }\n</style>\n<body>\n    <div>\n       <p></p>\n    </div>\n</body>width:100px;\nheight:100px;\nbackground:red;\nfloat:left;\n```\n​\t\t\t\t\t\t\t\t\t\t<img src=\"http://img.blog.csdn.net/20170403154832675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n当div增加 overflow:hidden; 时 效果如下 \n\n​\t\t\t\t\t\t\t\t\t\t![这里写图片描述](http://img.blog.csdn.net/20170403155037444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n依据BFC布局规则第六条：\n\n计算BFC的高度时，浮动元素的高度也参与计算。 \n到此我们应该是解决了上面的所有疑问了。\n\n总结\n清除浮动的方式有很多种，但是实现的原理主要是靠clear属性，和触发新的BFC，通过详细的解释与比较，最后两种内容生成的方式是比较推荐使用的，如果需要考虑margin重叠的问题，就用方案7，不考虑就用方案6。\n\n文章转载自[CSDN](http://blog.csdn.net/FE_dev/article/details/68954481)","source":"_posts/CSS之清除浮动.md","raw":"---\ntitle: CSS之清除浮动\ndate: 2017-4-22 20:06\ntags: CSS\ncategories: 前端\nsummary_img: http://p4z3kz4fz.bkt.clouddn.com/boxmodel%20%281%29.png\n---\n### **1.什么是浮动**\n\n**首先我们需要知道定位** \n元素在页面中的位置就是定位，解决问题之前我们先来了解下几种定位方式 \n**1、普通流定位 static（默认方式）** \n普通流定位，又称为文档流定位，是页面元素的默认定位方式 \n页面中的块级元素：按照从上到下的方式逐个排列 \n页面中的行内元素：按照从左到右的方式逐个排列 \n\n<!--more-->\n\n但是如何让**多个块级元素在一行内显示?** \n这里就引出了浮动定位 \n**2、浮动定位 float** \nfloat属性 取值为 left/right \n这个属性原本不是用来布局的，而是用来做文字环绕的，但是后来人们发现做布局也不错，就一直这么用了，甚至有些时候都忘了用他做文字环绕 \n**3、相对定位 relative** \n元素会相对于它原来的位置偏移某个距离，改变元素位置后，元素原本的空间依然会被保留 \n**语法** \n属性：position \n取值：relative \n配合着 偏移属性(top/right/bottom/left)实现位置的改变\n\n**4、绝对定位 absolute** \n如果元素被设置为绝对定位的话，将具备以下几个特征 \n1、脱离文档流-不占据页面空间 \n2、通过偏移属性固定元素位置 \n3、相对于 最近的已定位的**祖先元素**实现位置固定 \n4、如果没有已定位**祖先元素**，那么就相对于最初的包含块(body,html)去实现位置的固定 \n**语法** \n属性：position \n取值：absolute \n配合着 偏移属性(top/right/bottom/left)实现位置的固定\n\n**5、固定定位 fixed** \n将元素固定在页面的某个位置处，不会随着滚动条而发生位置移动 \n**语法** \n属性：position \n取值：fixed \n配合着 偏移属性(top/right/bottom/left)实现位置的固定\n\n### **2.浮动的效果**\n\n- **浮动 之后会怎么样？** \n  1、浮动定位元素会被排除在文档流之外-脱离文档流(不占据页面空间),其余的元素要上前补位 \n  2、浮动元素会停靠在父元素的左边或右边，或停靠在其他已浮动元素的边缘上(元素只能在当前所在行浮动) \n  3、浮动元素依然位于父元素之内 \n  4、浮动元素处理的问题-解决多个块级元素在一行内显示的问题 \n  **注意** \n  1、一行内，显示不下所有的已浮动元素时，最后一个将换行 \n  2、元素一旦浮动起来之后，那么宽度将变成自适应(宽度由内容决定) \n  3、元素一旦浮动起来之后，那么就将变成块级元素,尤其对行内元素，影响最大 \n  块级元素：允许修改尺寸 \n  行内元素：不允许修改尺寸 \n  4、文本，行内元素，行内块元素时采用环绕的方式来排列的，是不会被浮动元素压在底下的，会巧妙的避开浮动元素\n- **浮动 之后会有什么样的影响？** \n  由于浮动元素会脱离文档流，所以导致不占据页面空间，所以会对父元素高度带来一定影响。如果一个元素中包含的元素全部是浮动元素，那么该元素高度将变成0（高度塌陷）\n\n### **3.如何清除浮动**\n\n#### **解决方案 及 原理分析**\n\n##### **方案1**\n\n直接设置父元素的高度 \n优势：极其简单 \n弊端：必须要知道父元素高度是多少\n\n##### **方案2**\n\n在父元素中，追加空子元素，并设置其clear属性为both \nclear是css中专用于清除浮动的属性 \n作用：清除当前元素前面的元素浮动所带来的影响 \n取值： \n1、none \n默认值，不做任何清除浮动的操作 \n2、left \n清除前面元素左浮动带来的影响 \n3、right \n清除前面元素右浮动带来的影响 \n4、both \n清除前面元素所有浮动带来的影响 \n优势：代码量少 容易掌握 简单易懂 \n弊端：会添加许多无意义的空标签，有违结构与表现的分离，不便于后期的维护\n\n##### **方案3**\n\n设置父元素浮动 \n优势：简单，代码量少，没有结构和语义化问题 \n弊端：对后续元素会有影响\n\n##### **方案4**\n\n为父元素设置overflow属性 \n取值：hidden 或 auto \n优势：简单，代码量少 \n弊端：如果有内容要溢出显示(弹出菜单)，也会被一同隐藏\n\n##### **方案5**\n\n父元素设置display:table \n优势：不影响结构与表现的分离，语义化正确，代码量少 \n弊端：盒模型属性已经改变，会造成其他问题\n\n##### **方案6**\n\n使用内容生成的方式清除浮动\n\n```css\n.clearfix:after {\n   content:\"\"; \n   display: block; \n   clear:both; \n}12345\n```\n\n:after 选择器向选定的元素之后插入内容 \n`content:\"\";` 生成内容为空 \n`display: block;` 生成的元素以块级元素显示, \n`clear:both;` 清除前面元素浮动带来的影响 \n相对于空标签闭合浮动的方法 \n优势：不破坏文档结构，没有副作用 \n弊端：代码量多\n\n##### **方案7**\n\n```css\n.cf:before,.cf:after {\n   content:\"\";\n   display:table;\n}\n.cf:after { clear:both; }12345\n```\n\n优势：不破坏文档结构，没有副作用 \n弊端： 代码量多 \n注意：display:table本身无法触发BFC，但是它会产生匿名框(anonymous boxes)，而匿名框中的display:table-cell可以触发BFC，简单说就是，触发块级格式化上下文的是匿名框，而不是display:table。所以通过display:table和display:table-cell创建的BFC效果是不一样的（后面会说到BFC）。\n\n> CSS2.1 表格模型中的元素，可能不会全部包含在除HTML之外的文档语言中。这时，那些“丢失”的元素会被模拟出来，从而使得表格模型能够正常工作。所有的表格元素将会自动在自身周围生成所需的匿名table对象，使其符合table/inline-table、table-row、table- cell的三层嵌套关系。\n\n##### **疑问**\n\n为什么会margin边距重叠？ \noverflow:hidden, 语义应该是溢出:隐藏，按道理说，子元素浮动了，但依然是在父元素里的，而父元素高度塌陷，高度为0了，子元素应该算是溢出了，为什么没有隐藏，反而撑开了父元素的高度？ \n为什么display:table也能清除浮动，原理是什么？\n\n##### **解释**\n\n要解释这些疑问，我们就要提到Formatting context \nFormatting context是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 \n最常见的Formatting context有Block fomatting context(简称BFC)和Inline formatting context(简称IFC)。 \nCSS2.1 中只有BFC和IFC, CSS3中还增加了GFC和FFC \n**这里主要说BFC** \nBFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。 \nblock-level box，display属性为block, list-item, table的元素，会生成block-level box。并且参与block fomatting context。 \ninline-level box， display属性为inline, inline-block, inline-table的元素，会生成inline-level box。并且参与inline formatting context。 \n**BFC布局规则：** \n1、内部的Box会在垂直方向，按照从上到下的方式逐个排列。 \n2、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 \n3、每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 \n4、BFC的区域不会与float box重叠。 \n5、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 \n6、计算BFC的高度时，浮动元素的高度也参与计算 \n**触发BFC的条件** \n1、根元素 \n2、float （left，right） \n3、overflow 除了visible 以外的值（hidden，auto，scroll ） \n4、display (table-cell，table-caption，inline-block) \n5、position（absolute，fixed） \n**举例详解BFC**\n\n```css\n<style>\n   .top{\n    width:100px;\n    height:100px;\n    background:red;\n    margin:50px;\n   }\n   .bottom{\n    width:100px;\n    height:100px;\n    background:blue;\n    margin:20px;\n   }\n</style>\n<body>\n    <div class=\"top\">上</div>\n    <div class=\"bottom\">下</div>\n</body>\n```\n\n​\t\t\t\t\t\t\t<img src=\"http://img.blog.csdn.net/20170403151130868?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n\n依据BFC布局规则第二条：\n\nBox垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 \n注意：发生重叠后，外边距的高度等于两个发生重叠的外边距的高度中的较大者\n\n```html\n<style>\n   .top{\n    width:100px;\n    height:100px;\n    background:red;\n    float:left;\n   }\n   .bottom{\n    width:200px;\n    height:200px;\n    background:blue;\n   }\n</style>\n<body>\n    <div class=\"top\"></div>\n    <div class=\"bottom\"></div>\n</body>\n```\n​\t                                                       <img src=\"http://img.blog.csdn.net/20170403152150431?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n依据BFC布局规则第三条：\n\n每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 \n我们可以看到，虽然有浮动的元素top，但是bottom的左边依然与包含块的左边相接触。\n\n```css\nwidth:100px;\nheight:100px;\nbackground:red;\nfloat:left;<style>\n   .top{\n    width:100px;\n    height:100px;\n    background:red;\n    float:left;\n   }\n   .bottom{\n    width:200px;\n    height:200px;\n    background:blue;\n    overflow:hidden;\n   }\n</style>\n<body>\n    <div class=\"top\"></div>\n    <div class=\"bottom\"></div>\n</body>\n```\n​\t\t\t\t\t\t\t\t<img src=\"http://img.blog.csdn.net/20170403153221135?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n\n依据BFC布局规则第四条：\n\nBFC的区域不会与float box重叠。 \n看代码和效果图，可以看出，这次的代码比上面的代码多了一行overflow:hidden;用这行代码触发新的BFC后，由于这个新的BFC不会与浮动的top重叠，所以bottom的位置改变了\n\n```css\n<style>\n   p{\n    width:100px;\n    height:100px;\n    background:red;\n    float:left;\n   }\n   div{\n    width:200px;\n    border:1px solid blue;\n   }\n</style>\n<body>\n    <div>\n       <p></p>\n    </div>\n</body>width:100px;\nheight:100px;\nbackground:red;\nfloat:left;\n```\n​\t\t\t\t\t\t\t\t\t\t<img src=\"http://img.blog.csdn.net/20170403154832675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">\n当div增加 overflow:hidden; 时 效果如下 \n\n​\t\t\t\t\t\t\t\t\t\t![这里写图片描述](http://img.blog.csdn.net/20170403155037444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n依据BFC布局规则第六条：\n\n计算BFC的高度时，浮动元素的高度也参与计算。 \n到此我们应该是解决了上面的所有疑问了。\n\n总结\n清除浮动的方式有很多种，但是实现的原理主要是靠clear属性，和触发新的BFC，通过详细的解释与比较，最后两种内容生成的方式是比较推荐使用的，如果需要考虑margin重叠的问题，就用方案7，不考虑就用方案6。\n\n文章转载自[CSDN](http://blog.csdn.net/FE_dev/article/details/68954481)","slug":"CSS之清除浮动","published":1,"updated":"2018-03-07T10:10:43.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc0q0007skrxtz7g8ytf","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h3 id=\"1-什么是浮动\"><a href=\"#1-什么是浮动\" class=\"headerlink\" title=\"1.什么是浮动\"></a><strong>1.什么是浮动</strong></h3><p><strong>首先我们需要知道定位</strong><br>元素在页面中的位置就是定位，解决问题之前我们先来了解下几种定位方式<br><strong>1、普通流定位 static（默认方式）</strong><br>普通流定位，又称为文档流定位，是页面元素的默认定位方式<br>页面中的块级元素：按照从上到下的方式逐个排列<br>页面中的行内元素：按照从左到右的方式逐个排列 </p>\n<a id=\"more\"></a>\n<p>但是如何让<strong>多个块级元素在一行内显示?</strong><br>这里就引出了浮动定位<br><strong>2、浮动定位 float</strong><br>float属性 取值为 left/right<br>这个属性原本不是用来布局的，而是用来做文字环绕的，但是后来人们发现做布局也不错，就一直这么用了，甚至有些时候都忘了用他做文字环绕<br><strong>3、相对定位 relative</strong><br>元素会相对于它原来的位置偏移某个距离，改变元素位置后，元素原本的空间依然会被保留<br><strong>语法</strong><br>属性：position<br>取值：relative<br>配合着 偏移属性(top/right/bottom/left)实现位置的改变</p>\n<p><strong>4、绝对定位 absolute</strong><br>如果元素被设置为绝对定位的话，将具备以下几个特征<br>1、脱离文档流-不占据页面空间<br>2、通过偏移属性固定元素位置<br>3、相对于 最近的已定位的<strong>祖先元素</strong>实现位置固定<br>4、如果没有已定位<strong>祖先元素</strong>，那么就相对于最初的包含块(body,html)去实现位置的固定<br><strong>语法</strong><br>属性：position<br>取值：absolute<br>配合着 偏移属性(top/right/bottom/left)实现位置的固定</p>\n<p><strong>5、固定定位 fixed</strong><br>将元素固定在页面的某个位置处，不会随着滚动条而发生位置移动<br><strong>语法</strong><br>属性：position<br>取值：fixed<br>配合着 偏移属性(top/right/bottom/left)实现位置的固定</p>\n<h3 id=\"2-浮动的效果\"><a href=\"#2-浮动的效果\" class=\"headerlink\" title=\"2.浮动的效果\"></a><strong>2.浮动的效果</strong></h3><ul>\n<li><strong>浮动 之后会怎么样？</strong><br>1、浮动定位元素会被排除在文档流之外-脱离文档流(不占据页面空间),其余的元素要上前补位<br>2、浮动元素会停靠在父元素的左边或右边，或停靠在其他已浮动元素的边缘上(元素只能在当前所在行浮动)<br>3、浮动元素依然位于父元素之内<br>4、浮动元素处理的问题-解决多个块级元素在一行内显示的问题<br><strong>注意</strong><br>1、一行内，显示不下所有的已浮动元素时，最后一个将换行<br>2、元素一旦浮动起来之后，那么宽度将变成自适应(宽度由内容决定)<br>3、元素一旦浮动起来之后，那么就将变成块级元素,尤其对行内元素，影响最大<br>块级元素：允许修改尺寸<br>行内元素：不允许修改尺寸<br>4、文本，行内元素，行内块元素时采用环绕的方式来排列的，是不会被浮动元素压在底下的，会巧妙的避开浮动元素</li>\n<li><strong>浮动 之后会有什么样的影响？</strong><br>由于浮动元素会脱离文档流，所以导致不占据页面空间，所以会对父元素高度带来一定影响。如果一个元素中包含的元素全部是浮动元素，那么该元素高度将变成0（高度塌陷）</li>\n</ul>\n<h3 id=\"3-如何清除浮动\"><a href=\"#3-如何清除浮动\" class=\"headerlink\" title=\"3.如何清除浮动\"></a><strong>3.如何清除浮动</strong></h3><h4 id=\"解决方案-及-原理分析\"><a href=\"#解决方案-及-原理分析\" class=\"headerlink\" title=\"解决方案 及 原理分析\"></a><strong>解决方案 及 原理分析</strong></h4><h5 id=\"方案1\"><a href=\"#方案1\" class=\"headerlink\" title=\"方案1\"></a><strong>方案1</strong></h5><p>直接设置父元素的高度<br>优势：极其简单<br>弊端：必须要知道父元素高度是多少</p>\n<h5 id=\"方案2\"><a href=\"#方案2\" class=\"headerlink\" title=\"方案2\"></a><strong>方案2</strong></h5><p>在父元素中，追加空子元素，并设置其clear属性为both<br>clear是css中专用于清除浮动的属性<br>作用：清除当前元素前面的元素浮动所带来的影响<br>取值：<br>1、none<br>默认值，不做任何清除浮动的操作<br>2、left<br>清除前面元素左浮动带来的影响<br>3、right<br>清除前面元素右浮动带来的影响<br>4、both<br>清除前面元素所有浮动带来的影响<br>优势：代码量少 容易掌握 简单易懂<br>弊端：会添加许多无意义的空标签，有违结构与表现的分离，不便于后期的维护</p>\n<h5 id=\"方案3\"><a href=\"#方案3\" class=\"headerlink\" title=\"方案3\"></a><strong>方案3</strong></h5><p>设置父元素浮动<br>优势：简单，代码量少，没有结构和语义化问题<br>弊端：对后续元素会有影响</p>\n<h5 id=\"方案4\"><a href=\"#方案4\" class=\"headerlink\" title=\"方案4\"></a><strong>方案4</strong></h5><p>为父元素设置overflow属性<br>取值：hidden 或 auto<br>优势：简单，代码量少<br>弊端：如果有内容要溢出显示(弹出菜单)，也会被一同隐藏</p>\n<h5 id=\"方案5\"><a href=\"#方案5\" class=\"headerlink\" title=\"方案5\"></a><strong>方案5</strong></h5><p>父元素设置display:table<br>优势：不影响结构与表现的分离，语义化正确，代码量少<br>弊端：盒模型属性已经改变，会造成其他问题</p>\n<h5 id=\"方案6\"><a href=\"#方案6\" class=\"headerlink\" title=\"方案6\"></a><strong>方案6</strong></h5><p>使用内容生成的方式清除浮动</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>; </span><br><span class=\"line\">   <span class=\"attribute\">display</span>: block; </span><br><span class=\"line\">   <span class=\"attribute\">clear</span>:both; </span><br><span class=\"line\">&#125;12345</span><br></pre></td></tr></table></figure>\n<p>:after 选择器向选定的元素之后插入内容<br><code>content:&quot;&quot;;</code> 生成内容为空<br><code>display: block;</code> 生成的元素以块级元素显示,<br><code>clear:both;</code> 清除前面元素浮动带来的影响<br>相对于空标签闭合浮动的方法<br>优势：不破坏文档结构，没有副作用<br>弊端：代码量多</p>\n<h5 id=\"方案7\"><a href=\"#方案7\" class=\"headerlink\" title=\"方案7\"></a><strong>方案7</strong></h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:before</span>,<span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">   <span class=\"attribute\">display</span>:table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:after</span> &#123; <span class=\"attribute\">clear</span>:both; &#125;12345</span><br></pre></td></tr></table></figure>\n<p>优势：不破坏文档结构，没有副作用<br>弊端： 代码量多<br>注意：display:table本身无法触发BFC，但是它会产生匿名框(anonymous boxes)，而匿名框中的display:table-cell可以触发BFC，简单说就是，触发块级格式化上下文的是匿名框，而不是display:table。所以通过display:table和display:table-cell创建的BFC效果是不一样的（后面会说到BFC）。</p>\n<blockquote>\n<p>CSS2.1 表格模型中的元素，可能不会全部包含在除HTML之外的文档语言中。这时，那些“丢失”的元素会被模拟出来，从而使得表格模型能够正常工作。所有的表格元素将会自动在自身周围生成所需的匿名table对象，使其符合table/inline-table、table-row、table- cell的三层嵌套关系。</p>\n</blockquote>\n<h5 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a><strong>疑问</strong></h5><p>为什么会margin边距重叠？<br>overflow:hidden, 语义应该是溢出:隐藏，按道理说，子元素浮动了，但依然是在父元素里的，而父元素高度塌陷，高度为0了，子元素应该算是溢出了，为什么没有隐藏，反而撑开了父元素的高度？<br>为什么display:table也能清除浮动，原理是什么？</p>\n<h5 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a><strong>解释</strong></h5><p>要解释这些疑问，我们就要提到Formatting context<br>Formatting context是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。<br>最常见的Formatting context有Block fomatting context(简称BFC)和Inline formatting context(简称IFC)。<br>CSS2.1 中只有BFC和IFC, CSS3中还增加了GFC和FFC<br><strong>这里主要说BFC</strong><br>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。<br>block-level box，display属性为block, list-item, table的元素，会生成block-level box。并且参与block fomatting context。<br>inline-level box， display属性为inline, inline-block, inline-table的元素，会生成inline-level box。并且参与inline formatting context。<br><strong>BFC布局规则：</strong><br>1、内部的Box会在垂直方向，按照从上到下的方式逐个排列。<br>2、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠<br>3、每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。<br>4、BFC的区域不会与float box重叠。<br>5、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。<br>6、计算BFC的高度时，浮动元素的高度也参与计算<br><strong>触发BFC的条件</strong><br>1、根元素<br>2、float （left，right）<br>3、overflow 除了visible 以外的值（hidden，auto，scroll ）<br>4、display (table-cell，table-caption，inline-block)<br>5、position（absolute，fixed）<br><strong>举例详解BFC</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">   <span class=\"selector-class\">.top</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"selector-class\">.bottom</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"top\"&gt;上&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=\"bottom\"&gt;下&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>​                            <img src=\"http://img.blog.csdn.net/20170403151130868?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>依据BFC布局规则第二条：</p>\n<p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠<br>注意：发生重叠后，外边距的高度等于两个发生重叠的外边距的高度中的较大者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.top</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">   &#125;</span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.bottom</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:blue</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">   &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​                                                           <img src=\"http://img.blog.csdn.net/20170403152150431?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>依据BFC布局规则第三条：</p>\n<p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。<br>我们可以看到，虽然有浮动的元素top，但是bottom的左边依然与包含块的左边相接触。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">   <span class=\"selector-class\">.top</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"selector-class\">.bottom</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"top\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=\"bottom\"&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>​                                <img src=\"http://img.blog.csdn.net/20170403153221135?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>依据BFC布局规则第四条：</p>\n<p>BFC的区域不会与float box重叠。<br>看代码和效果图，可以看出，这次的代码比上面的代码多了一行overflow:hidden;用这行代码触发新的BFC后，由于这个新的BFC不会与浮动的top重叠，所以bottom的位置改变了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">   <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">       &lt;p&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;width:100px;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;</span><br></pre></td></tr></table></figure>\n<p>​                                        <img src=\"http://img.blog.csdn.net/20170403154832675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>当div增加 overflow:hidden; 时 效果如下 </p>\n<p>​                                        <img src=\"http://img.blog.csdn.net/20170403155037444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>依据BFC布局规则第六条：</p>\n<p>计算BFC的高度时，浮动元素的高度也参与计算。<br>到此我们应该是解决了上面的所有疑问了。</p>\n<p>总结<br>清除浮动的方式有很多种，但是实现的原理主要是靠clear属性，和触发新的BFC，通过详细的解释与比较，最后两种内容生成的方式是比较推荐使用的，如果需要考虑margin重叠的问题，就用方案7，不考虑就用方案6。</p>\n<p>文章转载自<a href=\"http://blog.csdn.net/FE_dev/article/details/68954481\" target=\"_blank\" rel=\"noopener\">CSDN</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-什么是浮动\"><a href=\"#1-什么是浮动\" class=\"headerlink\" title=\"1.什么是浮动\"></a><strong>1.什么是浮动</strong></h3><p><strong>首先我们需要知道定位</strong><br>元素在页面中的位置就是定位，解决问题之前我们先来了解下几种定位方式<br><strong>1、普通流定位 static（默认方式）</strong><br>普通流定位，又称为文档流定位，是页面元素的默认定位方式<br>页面中的块级元素：按照从上到下的方式逐个排列<br>页面中的行内元素：按照从左到右的方式逐个排列 </p>","more":"<p>但是如何让<strong>多个块级元素在一行内显示?</strong><br>这里就引出了浮动定位<br><strong>2、浮动定位 float</strong><br>float属性 取值为 left/right<br>这个属性原本不是用来布局的，而是用来做文字环绕的，但是后来人们发现做布局也不错，就一直这么用了，甚至有些时候都忘了用他做文字环绕<br><strong>3、相对定位 relative</strong><br>元素会相对于它原来的位置偏移某个距离，改变元素位置后，元素原本的空间依然会被保留<br><strong>语法</strong><br>属性：position<br>取值：relative<br>配合着 偏移属性(top/right/bottom/left)实现位置的改变</p>\n<p><strong>4、绝对定位 absolute</strong><br>如果元素被设置为绝对定位的话，将具备以下几个特征<br>1、脱离文档流-不占据页面空间<br>2、通过偏移属性固定元素位置<br>3、相对于 最近的已定位的<strong>祖先元素</strong>实现位置固定<br>4、如果没有已定位<strong>祖先元素</strong>，那么就相对于最初的包含块(body,html)去实现位置的固定<br><strong>语法</strong><br>属性：position<br>取值：absolute<br>配合着 偏移属性(top/right/bottom/left)实现位置的固定</p>\n<p><strong>5、固定定位 fixed</strong><br>将元素固定在页面的某个位置处，不会随着滚动条而发生位置移动<br><strong>语法</strong><br>属性：position<br>取值：fixed<br>配合着 偏移属性(top/right/bottom/left)实现位置的固定</p>\n<h3 id=\"2-浮动的效果\"><a href=\"#2-浮动的效果\" class=\"headerlink\" title=\"2.浮动的效果\"></a><strong>2.浮动的效果</strong></h3><ul>\n<li><strong>浮动 之后会怎么样？</strong><br>1、浮动定位元素会被排除在文档流之外-脱离文档流(不占据页面空间),其余的元素要上前补位<br>2、浮动元素会停靠在父元素的左边或右边，或停靠在其他已浮动元素的边缘上(元素只能在当前所在行浮动)<br>3、浮动元素依然位于父元素之内<br>4、浮动元素处理的问题-解决多个块级元素在一行内显示的问题<br><strong>注意</strong><br>1、一行内，显示不下所有的已浮动元素时，最后一个将换行<br>2、元素一旦浮动起来之后，那么宽度将变成自适应(宽度由内容决定)<br>3、元素一旦浮动起来之后，那么就将变成块级元素,尤其对行内元素，影响最大<br>块级元素：允许修改尺寸<br>行内元素：不允许修改尺寸<br>4、文本，行内元素，行内块元素时采用环绕的方式来排列的，是不会被浮动元素压在底下的，会巧妙的避开浮动元素</li>\n<li><strong>浮动 之后会有什么样的影响？</strong><br>由于浮动元素会脱离文档流，所以导致不占据页面空间，所以会对父元素高度带来一定影响。如果一个元素中包含的元素全部是浮动元素，那么该元素高度将变成0（高度塌陷）</li>\n</ul>\n<h3 id=\"3-如何清除浮动\"><a href=\"#3-如何清除浮动\" class=\"headerlink\" title=\"3.如何清除浮动\"></a><strong>3.如何清除浮动</strong></h3><h4 id=\"解决方案-及-原理分析\"><a href=\"#解决方案-及-原理分析\" class=\"headerlink\" title=\"解决方案 及 原理分析\"></a><strong>解决方案 及 原理分析</strong></h4><h5 id=\"方案1\"><a href=\"#方案1\" class=\"headerlink\" title=\"方案1\"></a><strong>方案1</strong></h5><p>直接设置父元素的高度<br>优势：极其简单<br>弊端：必须要知道父元素高度是多少</p>\n<h5 id=\"方案2\"><a href=\"#方案2\" class=\"headerlink\" title=\"方案2\"></a><strong>方案2</strong></h5><p>在父元素中，追加空子元素，并设置其clear属性为both<br>clear是css中专用于清除浮动的属性<br>作用：清除当前元素前面的元素浮动所带来的影响<br>取值：<br>1、none<br>默认值，不做任何清除浮动的操作<br>2、left<br>清除前面元素左浮动带来的影响<br>3、right<br>清除前面元素右浮动带来的影响<br>4、both<br>清除前面元素所有浮动带来的影响<br>优势：代码量少 容易掌握 简单易懂<br>弊端：会添加许多无意义的空标签，有违结构与表现的分离，不便于后期的维护</p>\n<h5 id=\"方案3\"><a href=\"#方案3\" class=\"headerlink\" title=\"方案3\"></a><strong>方案3</strong></h5><p>设置父元素浮动<br>优势：简单，代码量少，没有结构和语义化问题<br>弊端：对后续元素会有影响</p>\n<h5 id=\"方案4\"><a href=\"#方案4\" class=\"headerlink\" title=\"方案4\"></a><strong>方案4</strong></h5><p>为父元素设置overflow属性<br>取值：hidden 或 auto<br>优势：简单，代码量少<br>弊端：如果有内容要溢出显示(弹出菜单)，也会被一同隐藏</p>\n<h5 id=\"方案5\"><a href=\"#方案5\" class=\"headerlink\" title=\"方案5\"></a><strong>方案5</strong></h5><p>父元素设置display:table<br>优势：不影响结构与表现的分离，语义化正确，代码量少<br>弊端：盒模型属性已经改变，会造成其他问题</p>\n<h5 id=\"方案6\"><a href=\"#方案6\" class=\"headerlink\" title=\"方案6\"></a><strong>方案6</strong></h5><p>使用内容生成的方式清除浮动</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>; </span><br><span class=\"line\">   <span class=\"attribute\">display</span>: block; </span><br><span class=\"line\">   <span class=\"attribute\">clear</span>:both; </span><br><span class=\"line\">&#125;12345</span><br></pre></td></tr></table></figure>\n<p>:after 选择器向选定的元素之后插入内容<br><code>content:&quot;&quot;;</code> 生成内容为空<br><code>display: block;</code> 生成的元素以块级元素显示,<br><code>clear:both;</code> 清除前面元素浮动带来的影响<br>相对于空标签闭合浮动的方法<br>优势：不破坏文档结构，没有副作用<br>弊端：代码量多</p>\n<h5 id=\"方案7\"><a href=\"#方案7\" class=\"headerlink\" title=\"方案7\"></a><strong>方案7</strong></h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:before</span>,<span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">   <span class=\"attribute\">display</span>:table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:after</span> &#123; <span class=\"attribute\">clear</span>:both; &#125;12345</span><br></pre></td></tr></table></figure>\n<p>优势：不破坏文档结构，没有副作用<br>弊端： 代码量多<br>注意：display:table本身无法触发BFC，但是它会产生匿名框(anonymous boxes)，而匿名框中的display:table-cell可以触发BFC，简单说就是，触发块级格式化上下文的是匿名框，而不是display:table。所以通过display:table和display:table-cell创建的BFC效果是不一样的（后面会说到BFC）。</p>\n<blockquote>\n<p>CSS2.1 表格模型中的元素，可能不会全部包含在除HTML之外的文档语言中。这时，那些“丢失”的元素会被模拟出来，从而使得表格模型能够正常工作。所有的表格元素将会自动在自身周围生成所需的匿名table对象，使其符合table/inline-table、table-row、table- cell的三层嵌套关系。</p>\n</blockquote>\n<h5 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a><strong>疑问</strong></h5><p>为什么会margin边距重叠？<br>overflow:hidden, 语义应该是溢出:隐藏，按道理说，子元素浮动了，但依然是在父元素里的，而父元素高度塌陷，高度为0了，子元素应该算是溢出了，为什么没有隐藏，反而撑开了父元素的高度？<br>为什么display:table也能清除浮动，原理是什么？</p>\n<h5 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a><strong>解释</strong></h5><p>要解释这些疑问，我们就要提到Formatting context<br>Formatting context是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。<br>最常见的Formatting context有Block fomatting context(简称BFC)和Inline formatting context(简称IFC)。<br>CSS2.1 中只有BFC和IFC, CSS3中还增加了GFC和FFC<br><strong>这里主要说BFC</strong><br>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。<br>block-level box，display属性为block, list-item, table的元素，会生成block-level box。并且参与block fomatting context。<br>inline-level box， display属性为inline, inline-block, inline-table的元素，会生成inline-level box。并且参与inline formatting context。<br><strong>BFC布局规则：</strong><br>1、内部的Box会在垂直方向，按照从上到下的方式逐个排列。<br>2、Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠<br>3、每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。<br>4、BFC的区域不会与float box重叠。<br>5、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。<br>6、计算BFC的高度时，浮动元素的高度也参与计算<br><strong>触发BFC的条件</strong><br>1、根元素<br>2、float （left，right）<br>3、overflow 除了visible 以外的值（hidden，auto，scroll ）<br>4、display (table-cell，table-caption，inline-block)<br>5、position（absolute，fixed）<br><strong>举例详解BFC</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">   <span class=\"selector-class\">.top</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"selector-class\">.bottom</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"top\"&gt;上&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=\"bottom\"&gt;下&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>​                            <img src=\"http://img.blog.csdn.net/20170403151130868?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>依据BFC布局规则第二条：</p>\n<p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠<br>注意：发生重叠后，外边距的高度等于两个发生重叠的外边距的高度中的较大者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.top</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">   &#125;</span></span><br><span class=\"line\"><span class=\"css\">   <span class=\"selector-class\">.bottom</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:blue</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">   &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​                                                           <img src=\"http://img.blog.csdn.net/20170403152150431?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>依据BFC布局规则第三条：</p>\n<p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。<br>我们可以看到，虽然有浮动的元素top，但是bottom的左边依然与包含块的左边相接触。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">   <span class=\"selector-class\">.top</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"selector-class\">.bottom</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=\"top\"&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=\"bottom\"&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>​                                <img src=\"http://img.blog.csdn.net/20170403153221135?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>依据BFC布局规则第四条：</p>\n<p>BFC的区域不会与float box重叠。<br>看代码和效果图，可以看出，这次的代码比上面的代码多了一行overflow:hidden;用这行代码触发新的BFC后，由于这个新的BFC不会与浮动的top重叠，所以bottom的位置改变了</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">   <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">       &lt;p&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;width:100px;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">float</span><span class=\"selector-pseudo\">:left</span>;</span><br></pre></td></tr></table></figure>\n<p>​                                        <img src=\"http://img.blog.csdn.net/20170403154832675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>当div增加 overflow:hidden; 时 效果如下 </p>\n<p>​                                        <img src=\"http://img.blog.csdn.net/20170403155037444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRkVfZGV2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>依据BFC布局规则第六条：</p>\n<p>计算BFC的高度时，浮动元素的高度也参与计算。<br>到此我们应该是解决了上面的所有疑问了。</p>\n<p>总结<br>清除浮动的方式有很多种，但是实现的原理主要是靠clear属性，和触发新的BFC，通过详细的解释与比较，最后两种内容生成的方式是比较推荐使用的，如果需要考虑margin重叠的问题，就用方案7，不考虑就用方案6。</p>\n<p>文章转载自<a href=\"http://blog.csdn.net/FE_dev/article/details/68954481\" target=\"_blank\" rel=\"noopener\">CSDN</a></p>"},{"title":"PHP基础语法","date":"2017-12-20T06:31:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/php.gif","_content":"## 目标\n\n1. 简单了解后端开发的流程，了解后端工作人员如何对数据进行处理，以便将来在工作中能更好的跟后端开发人员交流。\n\n2. 了解B/S架构开发的基本流程，能开发动态网站，并体会动态网站和静态网站的不同。\n\n3. 多了解一门编程语言，体会不同语言之间的异同。\n\n   <!--more-->\n\n## 前瞻知识点\n\n- B/S结构的处理流程\n- 网络基本概念\n  - IP\n  - 域名\n  - DNS\n    - 网络DNS\n    - 本地DNS\n  - 端口\n- 安装WAMP环境\n  - W -- web, A -- Apache , M -- MySql ,P -- PHP\n\n## hello world\n\n- 所有PHP代码都放在标记： <?php  …… ?>\n\n- PHP输出方式：echo\n\n  ```php\n  echo 'hello world'\n  ```\n\n- 注释 \n\n  - /* 多行注释 */\n    - 多行注释不要嵌套\n  - // 单行注释\n\n- 语句分隔符 \";\"\n\n- PHP文件访问方式\n\n## PHP简介\n\n- PHP Hypertext Preprocessor 超文本预处理器，是嵌入到HTML文件中的服务器端的脚本语言；\n- 一个PHP文件中，可以包含多种代码：HTML、CSS、JS、Jquery、PHP、MySQL等\n- PHP的语法，与C、Java、Python、JS语法比较相似；\n- PHP是服务器端的脚本语言，脚本语言相对编程语言来说，要简单的多。\n- PHP程序只能运行在服务器端，在客户端看不见PHP任何代码；\n- PHP文件的扩展名是以.php为后缀的。\n\n## 语言基础\n\n- PHP与ASP、JSP一样，都是嵌入到HTML文件中的服务器端的脚本语言；\n- PHP文件的后缀是.php\n- PHP代码的标记：<?php ……  ?>\n- PHP中每行程序代码，必须以英文下的分号结束；\n\n## 输出时间\n\n```\necho date('Y-m-d H:i:s');\n```\n\n- 默认情况下PHP输出的时间是格林威治时间，比中国时区晚8个小时\n\n- 解决方案：\n\n  - 1.0 找到PHP的配置文件 php.ini\n\n  - 2.0 定位到 date.timezone\n\n  - 3.0 设置中国时区\n\n    ```\n      ; PRC为中华人民共和国\n      date.timezone = PRC\n    ```\n\n    ​\n\n## 变量\n\n### 特点\n\n- 变量是临时存储数据的容器；\n- 变量是存储在内存当中；\n- 网页执行完毕后，网页中相关的变量全部消失。\n\n### 变量命名规则\n\n- 变量名称只能包含：字母、数字、下划线\n- PHP中的变量名必须以 \"\\$\" 符号开头，但是\"\\$\"符号不属于变量的一部分，将来不管是赋值还是取值，都必须加上\"\\$\"\n- 变量名区分大小写\n- PHP中的变量使用不需要声明，直接赋值使用\n- 常用的两种命名方法：\n  - 驼峰命名法\n    - 第一个单词的首字母小写，其余单词的首字母全部大写\n    - 如：userName，userId\n  - 帕斯卡命名法：\n    - 与驼峰命名法很像\n    - 唯一区别是它的首字母是大写\n    - 如：UserName,UserId\n  - 下划线命名法\n    - 所以的单词首字都小写，由下划线连接\n    - 如：user_name，user_id\n\n### 变量的声明与赋值\n\n- 声明\n  - PHP中变量不需要声明，但是每个变量必须以$开\n- 赋值：\n  - 直接给带有$的变量赋值\n  - 使用“=”，赋值运算符给变量赋值，“=”读作赋值运算符\n  - 赋值运算符的左边只能是一个变量名\n  - 如：$userName = \"张三\";\n\n### 变量值的读取\n\n- 变量的数据类型由其中的内容决定\n\n- 直接以 “$+变量名”的方式 取得可以取得变量的值\n\n  ```php\n  $userName = \"admin\";\n  ```\n\n- 可以使用“.”来连接将变量与字符串一起输出\n\n  ```php\n  echo \"我的名字叫\".$userName\n  ```\n\n- 也可以在字符串的内部直接使用变量\n\n  - 在PHP中“.”点表示相连\n  - 在PHP中“+”加表示相加（是一种算术运算符）\n\n  ```tex\n  \techo \"我的名字叫做$userName\"\n  但是，如果用引号时，变量后面还有其它的有文字，就不能解析了如\n  \techo \"我的名字叫做$userName很高兴见到大家\"\n  这里就无法解析，需要在变量后面添加一个非空特殊字符，如：\n  \techo \"我的名字叫做{$userNmae}很高兴见到大家\"\n  如果输出字符是单引号，则无法解析字符串\n  ```\n\n### 变量相关函数\n\n- header():设置服务器返回到浏览器的数据的类型\n\n  ```\n  header('content-type:text/html;charset=utf-8');\n  ```\n\n\n- isset() 判断变量是否存在\n\n  - 可以用来判断变量是否定义，或者是否为null\n\n- empty() 判断变量是否为空\n\n  - 如果 `var` 是非空或非零的值，则     empty()  返回  FALSE\n  - *\"\"*、*0*、*\"0\"*、**NULL**、**FALSE**、*array()*、*var $var;*      以及没有任何属性的对象都将被认为是空的,也就意味着，如果上述的数据用empty来判断返回的结果都为true\n\n- unset() 删除变量\n\n  - 可以通过这个函数删除一个已经存在的变量，删除之后变量为null\n\n  - 可以同步删除多个变量\n\n  - 如果在函数中 **unset()**      一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用      **unset()** 之前一样的值。(这个当我们学了全局变量与局部变量以后再说)\n\n    ```php\n    unset($a,$b,$c)\n    ```\n\n- var_dump() 显示变量的类型和值\n\n  - 可以同时打印多个变量\n\n- print_r() 显示数组的元素信息\n\n  - 如果是字符串，数字，boolean值，会原样输出\n  - 如果是数组，会详细打印数组信息\n\n### 可变变量\n\n- 指一个变量的名称，由另一个变量的值来充当\n\n  ```php\n  $a = \"b\";\n  $b = \"c\";\n  echo $b;//输出  c\n  echo $$a;//输出 c\n  ```\n\n- 如果使用可变变量，一定要加上给可变变量的变量名加上{}作为定界符\n\n### 变量的值传递和引用传递\n\n- JS中的基本数据类型(只有一个值)：字符串型、数值型、布尔型、undefined、null\n\n- JS中的复合数据类型(多个值)：数组(Array)、对象(Object)、函数(Function)\n\n- 值传递：\n\n  - 传递的是变量中保存的值\n\n- 引用传递\n\n  - 传递的是变量保存的引用地址\n\n- 在PHP中可以使用 & 符号将值传递的变量改变为引用传递：如\n\n  ```php\n  $a = \"abc\";\n  $b = &$a;\n  $a = \"123\";\n  echo \"$a<br/>$b\"\n  ```\n\n## 常量\n\n### 概念\n\n- 常量就是值永远不变的量，即：一旦赋值无法删除，修改。\n- 由于变量在使用时还需要去它存储的地址中去找到对应的数据，相比变量来说，常量的速度要快。（存储地址？）\n\n### 命名规则\n\n- 与变量基本一致\n  - 变量名称只能包含：字母、数字、下划线，常量也是\n  - PHP中的常量不需要使用$符号开头\n  - 常量名区分大小写，一般建议使用时尽量用大写，为了与变量区分开\n  - 常用的两种命名方法：\n    - 驼峰命名法\n      - 第一个单词的首字母小写，其余单词的首字母全部大写\n      - 如：uerName，userId\n    - 下划线命名法\n      - 所以的单词首字都小写，由下划线连接\n      - 如：user_name，user_id\n\n### 常量定义define()\n\n- 语法： bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )\n\n- 案子：通过define关键来定义\n\n  ```php\n    define('TITLE',\"中华人民共和国\");//定义常量TITLE\n    define('TITLE',\"中华人民共和国\",true);//加上true，使用时既可以使用TITLE,又可以使用小写title，来使用常量\n    define('TITLE',\"中华人民共和国\",false);//加上false，使用时必须使用TITLE\n  ```\n\n判断是否是常量：defined()\n\n- 语法： bool defined    ( string  $name   )\n\n- defined()可以判断常量\n\n  ```php\n    defined(“TITLE”);//通过defined判断常量时，常量一定要加上引号\n  ```\n\n### 魔术常量\n\n- 量的值在程序运行过程中不会改变。但是，魔术常量的值，会随着所在位置的不同而改变。\n- 魔术常量都由系统定义好的，我们直接使用就好了，常用的有：\n  - \\_\\_LINE\\_\\_:得到当前代码的行号\n  - \\_\\_FILE\\_\\_:得到当前文件的路径\n  - \\_\\_DIR\\_\\_:得到当前文件所在目录\n  - \\_\\_FUNCTION\\_\\_:得到所在函数\n\n## 数据类型\n\n- 数据类型分类\n\n  ```txt\n  js中的数据类型：\n  \t简单数据类型：\n  \t\tNumber,string,bool,undefined\n      复杂数据类型\n  \t\t数组，对象，null\n  ```\n\n  - 基本数据类型：字符串型(string)、整型(int)、浮点型(float：小数)、布尔型(bool)\n  - 复合数据类型：数组、对象\n  - 特殊数据类型：资源、NULL\n\n- 数据类型判断\n\n  - is_bool()，判断变量是不是布尔型\n\n  - is_int()，判断变量是不是整型\n\n  - is_string() 判断变量是不是字符串型\n\n  - is_float() 判断变量是不是浮点型\n\n  - is_numeric() 判断变量不是数值型或数字字符串。\n\n  - is_array() 判断变量是不是数组\n\n  - is_null()  判断变量是否为NULL\n\n  - is_resource() 判断变量是不是资源型\n\n    ```php\n    //判断用户是否大于18岁，如果大于18岁，显示网页内容，如果没有，则不显示\n    $age = 20;\n    if(isset($age) && is_numeric($age)) {\n    \tif($age >18) {\n          echo('显示网页');\n    \t} else {\n          echo ('不显示');\n    \t}\n    }\n    ```\n\n### 整型\n\n- 关键字：int\n\n\n- 在js中所有的数字都用number来表示，但是在PHP，数字有不同的划分，其中整数（正整数，0，负整数）用**整型**来表示\n\n  - 整型包含正整数、负整数、零0\n\n  - 可以用10进制、八进制、16进制表示\n\n    ```php\n    echo 100;//十进制\n    echo 011;//八进制，以0开头的整数，结果为9\n    echo 0x9a;//十六进制，以0x开头，结果为154\n    ```\n\n  - PHP中最大整数：PHP_INT_MAX，(2^31)-1\n\n- 如果数字超出来了整数据范围，则类型会变为float\n\n### 浮点型\n\n- 关键字：float\n\n\n- PHP中除了整数还有浮点型，一般浮点数会包含小数，比整型更加精确\n\n- 浮点型的范围：1.8E-308~1.8E+308\n\n- 注意点：\n\n  - 如果要对浮点数进行操作，就好先将浮点数转为整数再处理\n\n    ```php\n    //以下做法不可取\n    if(2.1/0.7 == 3) {\n      echo '相等';\n    } else {\n      echo '不相等';\n    }\n    //以下是正确做法\n    $a = 2.1 * 10;\n    $b = 0.7 * 10;\n    if($a/$b == 3) {\n      echo '相等';\n    } else {\n      echo '不相等';\n    }\n    ```\n\n### 字符串\n\n- 字符串定义的四种方式\n\n  - 用单引号可以定义一个字符串；如：$a = ‘abc’;\n\n    - 单引号内无法解析变量\n    - 转义符号有：\\'\n\n  - 用双引号来定义一个字符串；如：$a = “abc”;\n\n    - 双引号内可以解析变量\n    - 转义符号有：\\\\\\、\\'、\\”、\\$、\\r、\\n、\\t\n\n  - 定义长字符串：heredoc\n\n    ```php\n    <?php\n    header('content-type:text/html;charset=utf-8');\n    $a = 'abc';\n    $aa = <<<heredoc\n    <html>\n    123$a\n    </html>\n    heredoc;\n    echo $aa;\n    ?>\n    ```\n\n    - 使用注意：\n      - 1）字符串放在两个heredoc标签之间\n      - 2）以“<<<heredoc”作为开始，不用带分号\n      - 3）以“heredoc;”作为结束，要带分号\n      - 4）标签名称可以自定义\n      - 5）结束标签必须放单独一行\n\n  - 定义长字符串：nowdoc\n\n    ```php\n    <?php\n    header('content-type:text/html;charset=utf-8');\n    $a = 'abc';\n    $aa = <<<'nowdoc'\n    <html>\n    123$a\n    </html>\n    nowdoc;\n    echo $aa;\n    ?>\n    ```\n\n    - 使用注意：\n      - 与上述一样，但是开始的标签名必须加单引\n      - 不能解析变量\n\n### 布尔型\n\n- 关键字：bool\n\n\n- 概念\n  - true表示真，flase表示假\n- 转换：\n  - 0,\"\",NULL,0.0,\"0\",arry() *空数组*会转为false\n  - 其它的数据都会转为true\n\n### 空型\n\n- 用null表示，表示没有\n- 以下情况会出现NULL\n  - 可以直接给一个变量，赋一个NULL值；\n  - 未定义的变量的值，也是NULL；\n  - unset()删除一个变量后，该变量的值为NULL。\n\n## 数据类型转换\n\n- 概念\n\n  - 数据有不同的类型，有时间操作数据时需要转换类型以后才能完成操作，比如计算\n  - 类型的转换分为两种：自动转换（隐式转换）、手动转换（强制转换）在js中则被称为显示转换\n  - 大部分情况下数据是自动转换，少数情况下强制转换。\n\n- 强制转换\n\n  - 通过关键字进行转换\n\n    ```php\n    (bool)$a\t//强制转换为bool\n      \t//除了0，0.0，”“，”0“，NULL，array()，转为false，其余都为true\n    (int)$a\t\t//强制转换为int\n      \t//转换会将小数去尾\n    (string)$a\t//强制转换为string\n      \t//null也可以转为‘’;\n    (array)$a\t//强制转换为array\n    (object)$a\t//强制转换为object\n    ```\n\n- 进制转换\n\n  - 进制就进位制，X进制，就是逢X进一。同理：十进制就是逢十进一，二进制逢二进一等等。\n  - 8进制：有8个基本数，分别为0、1、2、3、4、5、6、7，运算规则”逢8进1”；\n  - 16进制：有16个基本数，分别为0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F，运算规则”逢16进1”。\n  - 2进制：有2个基本数，分别是0、1，运算规则”逢2进1”。\n  - 转换方法：\n    - decbin()将十进制转换为2进制\n    - bindec()将2进制转换为十进制\n    - decoct()将十进制转换为8进制\n    - octdec()将八进制转换为10进制\n    - dechex()将十进制转换为16进制\n    - hexdec()将16进制转换为十进制\n\n## 运算符\n\n- 算数运算符+、-、*、/、%、++、--\n\n- 赋值运算符=、+=、-=、*=、/=、%=\n\n- 字符串运算符. 和 .=\n\n  - 案例：隔行变色\n\n    ```php\n    <?php\n    header('content-type:text/html;charset=utf-8');\n\n    $str = \"<table width='500' border='1' align='center'>\";\n    $str .= \"<tr bgColor='#f0f0f'>\";\n    \t$str .= \"    <th>编号</th>\";\n    \t$str .= \"    <th>新闻编号</th>\";\n    \t$str .= \"    <th>发布时间</th>\";\n    \t$str .= \"</tr>\";\n    for($i = 0 ; $i < 10 ; $i ++) {\n    \tif($i % 2 == 0) {\n    \t\t$str .= \"<tr bgColor='#f0f0f'>\";\n    \t} else {\n    \t\t$str .= \"<tr>\";\n    \t}\n    \t$str .= \"<td>$i</td>\";\n    \t$str .= \"<td>&nbsp;</td>\";\n    \t$str .= \"<td>&nbsp;</td>\";\n    \t$str .= \"</tr>\";\n    }\n    $str .= \"</table>\";\n    echo $str;\n    ?>\n    ```\n\n- 比较运算符>、<、>=、<=、\\=\\=、!=、\\=\\=\\=、!==\n\n  - 案例：字符串比较\n\n  - ASCII码表：如果两个字符进行比较，比较的本质是它们对应的ASCII码\n\n    ```\n    echo (\"a\" > 120);\n    ```\n\n- 逻辑运算符&&、||、!\n\n  - 实例：闰年判断\n\n    ```php\n    //条件：\n    //1）能够被4整除，且不能被100整除\n    //2）能被400整除\n    $year = 2000;\n    if ($year%4 == 0 && $year % 100 !=0 || $year % 400 ==0) {\n    \techo \"{$year}是闰年\";\n    } else {\n    \techo \"{$year}不是闰年\";\n    }\n    ```\n\n- 运算符优先级\n\n- 三元运算符\n\n  - 案例：比较两个数的大小\n\n    ```php\n    $a = 123;\n    $b = 456;\n    $max = $a > $b ? $a : $b;\n    ```\n\n- 错误控制运算符（@）\n\n  - 作用：主要用来屏蔽表达式的错误：\n\n  - 可以用在变量、常量、函数调用之前，但是不能用在函数定义、类定义之前。\n\n    ```php\n    $a = 100;\n    $b = 0;\n    echo @($a / $b);\n    ```\n\n## 流程控制\n\n- 顺序结构\n\n  - 赋值语句\n\n    ```php\n    $a = 123;\n    ```\n\n- 分支结构\n\n  - 分支结构（if）\n  - 多条件判断（if else if else）\n    - 案例：根据分数给评语。\n  - 多分支结构（switch）\n    - 案例：完成今天星期几\n\n- 循环结构\n\n  - while\n  - do while\n  - for\n  - break和continue\n  - 案例：\n    - 1）得到1~100的所有整数相加之和\n    - 2）输出100~1000以内所有水仙花数\n    - 3）输出九九乘法表\n\n## 数组\n\n### 概念\n\n- 数组是一组数的集合。如：$arr = array(1,2,3,4,5,6);\n\n### PHP中数组的分类\n\n- 枚举数组\n  - 数组元素的下标（索引），是从0开始的正整数，如：$arr = array(1,2,3,4,5,6);\n- 关联数组：\n  - 数组元素的下标，是一个字符串。如：$arr[‘edu’] = ‘大专’\n  - 关联数组无法通过数字下标取得对应的元素\n- 混合数组：\n  - 两种下标都有的数组，就是混合数组。如：$arr = array(100, ‘edu’=>’大专’ , ‘tel’ => ‘130110’)\n- 多维数组：\n  - 数组元素的值，是一个数组，还可以理解为：数组嵌套数组。如：$arr\\[5\\]\\[2\\] = 100\n\n### 数组的创建\n\n- 使用 array() 函数来创建数组\n\n  - 创建枚举数组：\n\n    - 下标是从0 开始的正整数\n\n    - ```php\n      $arr = array($value1,$value2,$value3,....);\n      ```\n\n- 创建关联数组\n\n  - $key是重新给数组元素指定一个下标\n\n  - 下标和元素的值之间连接号是\"=>\"，又称\"重载元素下标\"\n\n    ```php\n    $arr = array([$key=>]$value,[$key=>]$value,[$key=>]$value,....)\n    ```\n\n- 创建混合数组\n\n  - 有字符串下标的元素，就没有整型下标\n\n  - 如果$key省略了，就用默认下标\n\n  - 下标只能是整型以及字符串\n\n  - 如果元素没有指定下标，会在最大整数下标的基础上加1.\n\n    ```php\n    $arr[] = $value\n    ```\n\n    - 如果$arr数组不存在的话，会先创建数组，并添加第1个数组元素，第1个元素的下标为0\n    - 如果$arr已经存在 的话，添加新的数组元素，新的数组元素的下标，是最大整数下标+1\n\n  - 创建混合数组：\n\n    - 由语法1，2混合创建数组\n\n      ```php\n      $arr[] = 12;\n      $arr[] = 13;\n      $arr[\"a\"] =14;\n      $arr[] = 15;\n      $arr[20] = 16;\n      $arr[] = 19;\n      ```\n\n### 多维数组\n\n- 多维数组，即数组中的元素又是一个数组\n\n  ```php\n  $arr = array(\n  \tarray(1,2,3,4),\n  \tarray(10,20,30,40),\n  \tarray('a','b','c'),\n  \t\"abc\"\n  );\n  ```\n\n### 数组中的函数\n\n- count()\n  - 计算数组中的单元数目或对象中的属性个数\n  - 语法：int count ( mixed $var [,\\$mode = COUNT_NORMAL ] )\n  - 参数：\n    - $var 是对象或者数组\n    - $model:  如果可选的 mode 参数设为      COUNT_RECURSIVE（或 1），count()      将递归地对数组计数。对计算多维数组的所有单元尤其有用。mode      的默认值是 0。count()识别不了无限递归\n- unset()\n  - 删除变量或数组元素\n  - 语法：void unset ( mixed $var [, mixed $... ] )\n  - 删除元素后，仅仅只是相当于将数据从数组中移除掉了，对数组的下标没有影响\n\n### 数组的遍历\n\n- 使用for加next()遍历数组   此方法比较麻烦\n\n```php\nfor($i = 0; $i < count($arr); $i++) {\n\techo key($arr).current($arr).\"<br/>\"\n\tnext($arr);\n}\n```\n\n- key()：当前指针处元素的键名(下标)，不会移动指针\n- current()：返回当前指针处元素的值，不会移动指针\n- next(): 返回下一个元素的值，指针移动到下一个元素的开头\n\n### PHP中的数组传值时为值传递\n\n```php\n$arr = array(1,2,3,4);\n$arr1 = $arr;\n$arr1[0] = 100;\necho $arr[0];//1\n```\n\n## 函数\n\n### 概念\n\n- 函数是一段命名的代码段\n- 封装一代码，将来要执行时可以直接调用\n\n### 定义函数的方式\n\n```php\n/*\n    function 定义函数的关键字\n    functionName 函数的名称\n    arguments 形参列表\n    retValue 返回值\n    fnCode 功能代码\n*/\nfunction functionName(arguments){\n    // fnCode\n    return retValue;\n}\n```\n\n- function： 定义函数的关键字，不区分大小写\n- functionName：函数名称，命名规则与变量一样，只是不需要加$符号\n- 小括号()：主要用来接受传递过来的参数\n- arguments：定义函数时的参数，形参\n- return 函数的返回值。\n\n### 函数的调用：\n\n- 实参：调用函数时，传递的参数就是实参，含有真正数据的\n- 形参：定义函数时的参数\n\n\n- 案例：得到数组中所有数组的和\n\n### 函数参数的传递：\n\n- 值传递\n  - 函数参数的值传递，就是将参数的值，复制一份，传到函数中\n  - 值传递速度比较慢，但修改其中一个不会影响到另一个；\n- 引用传递\n  - 引用传递速度比较快，但修改其中一个，另一个也会改变。\n  - 引用传递，是将一个变量的地址，复制一份，传到函数中\n- 默认参数\n  - 函数中有些参数可能是固定不变的，为了操作方便，可以用默认参数来代替\n  - 默认参数必须放在非默认参数的右边\n  - 默认参数的值，只能是：字符串、整型、浮点型、布尔型、NULL、数组\n\n```php\nfunction showSelf($name,$age=19,$gender=\"男\") {\n\techo \"我叫{$name}，今天{$age},性别{$ender}\";\n}\n```\n\n### 函数可变数量参数\n\n- func_get_args( void )：返回一个参数列表的枚举数组，参数数组的下标是从0开始的整数\n\n- func_get_arg( $index )：返回参数数组中，指定下标的参数的值；\n\n- func_num_args( void )：返回实参的个数。\n\n  ```php\n  function getSum() {\n  \t\t$arr = func_get_args();\n  \t\t$len = func_num_args();\n  \t\t$sum = 0;\n  \t\tprint_r($arr);\n  \t\techo \"<br/>\";\n  \t\tprint_r($len);\n  \t\techo \"<br/>\";\n  \t\tfor($i = 0; $i < $len; $i++) {\n  \t\t\t$sum += func_get_arg($i);\n  \t\t}\n  \t\techo \"$sum\";\n  \t}\n  \tgetSum(1,2,3,4,5);\n  ```\n\n### 函数的返回值\n\n- 函数的返回值，通过return语句来实现；\n- 将函数的执行结果，返给了函数调用者；\n- return语句一旦执行，函数立即结束，函数剩余的代码不再执行了。\n- return语句有”中断”函数、”退出”函数；\n- return不能同时返回多个值，只能返回一个值。如果想返回多个值，可以放入数组\n\n## 常用系统函数\n\n### 字符串\n\n- 定义字符串基本语法\n  - 单引号字符串\n  - 双引号字符串\n  - nowdoc字符串\n  - heredoc字符串\n- 字符串常用api\n  - strlen() 获取字符串长度\n  - substr() 返回字符串的子串\n  - strtoupper() 将字符串转化为大写\n  - strtolower() 将字符串转化为小写\n  - ucfirst() 将字符串的首字母转换为大写\n  - trim() 去除字符串首尾处的空白字符\n  - ltrim() 删除字符串开头的空白字符\n  - rtrim() 删除字符串末端的空白字符\n  - strrev() 反转字符串\n  - strpos() 查找字符串首次出现的位置，从左往右查找\n  - strrpos() 计算指定字符串在目标字符串中最后一次出现的位置，从右往左查找\n  - strchr()和strstr() 两者一样，用于查找字符串的首次出现\n  - str_replace() 子字符串替换\n  - str_repeat() 重复一个字符串\n\n### 数学\n\n- 常用函数\n  - max() 求最大值\n  - min() 求最小值\n  - rand() 产生一个随机整数\n  - mt_rand() 更高效的随机数\n  - ceil() 进一法取整\n  - floor() 舍去法取整\n  - round() 对浮点数进行四舍五入\n  - pow() 次方运算\n  - abs() 求绝对值\n  - sqrt() 开方运算\n\n#### 日期\n\n- 常用函数\n  - time() 返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数\n  - date() 格式化一个本地时间/日期 \n  - microtime() 返回当前 Unix 时间戳和微秒数\n  - strtotime() 将任何英文文本的日期时间描述解析为 Unix 时间戳\n\n\n\n","source":"_posts/PHP基础语法.md","raw":"---\ntitle: PHP基础语法\ndate: 2017-12-20 14:31\ntags: PHP\ncategories: PHP\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/php.gif\n---\n## 目标\n\n1. 简单了解后端开发的流程，了解后端工作人员如何对数据进行处理，以便将来在工作中能更好的跟后端开发人员交流。\n\n2. 了解B/S架构开发的基本流程，能开发动态网站，并体会动态网站和静态网站的不同。\n\n3. 多了解一门编程语言，体会不同语言之间的异同。\n\n   <!--more-->\n\n## 前瞻知识点\n\n- B/S结构的处理流程\n- 网络基本概念\n  - IP\n  - 域名\n  - DNS\n    - 网络DNS\n    - 本地DNS\n  - 端口\n- 安装WAMP环境\n  - W -- web, A -- Apache , M -- MySql ,P -- PHP\n\n## hello world\n\n- 所有PHP代码都放在标记： <?php  …… ?>\n\n- PHP输出方式：echo\n\n  ```php\n  echo 'hello world'\n  ```\n\n- 注释 \n\n  - /* 多行注释 */\n    - 多行注释不要嵌套\n  - // 单行注释\n\n- 语句分隔符 \";\"\n\n- PHP文件访问方式\n\n## PHP简介\n\n- PHP Hypertext Preprocessor 超文本预处理器，是嵌入到HTML文件中的服务器端的脚本语言；\n- 一个PHP文件中，可以包含多种代码：HTML、CSS、JS、Jquery、PHP、MySQL等\n- PHP的语法，与C、Java、Python、JS语法比较相似；\n- PHP是服务器端的脚本语言，脚本语言相对编程语言来说，要简单的多。\n- PHP程序只能运行在服务器端，在客户端看不见PHP任何代码；\n- PHP文件的扩展名是以.php为后缀的。\n\n## 语言基础\n\n- PHP与ASP、JSP一样，都是嵌入到HTML文件中的服务器端的脚本语言；\n- PHP文件的后缀是.php\n- PHP代码的标记：<?php ……  ?>\n- PHP中每行程序代码，必须以英文下的分号结束；\n\n## 输出时间\n\n```\necho date('Y-m-d H:i:s');\n```\n\n- 默认情况下PHP输出的时间是格林威治时间，比中国时区晚8个小时\n\n- 解决方案：\n\n  - 1.0 找到PHP的配置文件 php.ini\n\n  - 2.0 定位到 date.timezone\n\n  - 3.0 设置中国时区\n\n    ```\n      ; PRC为中华人民共和国\n      date.timezone = PRC\n    ```\n\n    ​\n\n## 变量\n\n### 特点\n\n- 变量是临时存储数据的容器；\n- 变量是存储在内存当中；\n- 网页执行完毕后，网页中相关的变量全部消失。\n\n### 变量命名规则\n\n- 变量名称只能包含：字母、数字、下划线\n- PHP中的变量名必须以 \"\\$\" 符号开头，但是\"\\$\"符号不属于变量的一部分，将来不管是赋值还是取值，都必须加上\"\\$\"\n- 变量名区分大小写\n- PHP中的变量使用不需要声明，直接赋值使用\n- 常用的两种命名方法：\n  - 驼峰命名法\n    - 第一个单词的首字母小写，其余单词的首字母全部大写\n    - 如：userName，userId\n  - 帕斯卡命名法：\n    - 与驼峰命名法很像\n    - 唯一区别是它的首字母是大写\n    - 如：UserName,UserId\n  - 下划线命名法\n    - 所以的单词首字都小写，由下划线连接\n    - 如：user_name，user_id\n\n### 变量的声明与赋值\n\n- 声明\n  - PHP中变量不需要声明，但是每个变量必须以$开\n- 赋值：\n  - 直接给带有$的变量赋值\n  - 使用“=”，赋值运算符给变量赋值，“=”读作赋值运算符\n  - 赋值运算符的左边只能是一个变量名\n  - 如：$userName = \"张三\";\n\n### 变量值的读取\n\n- 变量的数据类型由其中的内容决定\n\n- 直接以 “$+变量名”的方式 取得可以取得变量的值\n\n  ```php\n  $userName = \"admin\";\n  ```\n\n- 可以使用“.”来连接将变量与字符串一起输出\n\n  ```php\n  echo \"我的名字叫\".$userName\n  ```\n\n- 也可以在字符串的内部直接使用变量\n\n  - 在PHP中“.”点表示相连\n  - 在PHP中“+”加表示相加（是一种算术运算符）\n\n  ```tex\n  \techo \"我的名字叫做$userName\"\n  但是，如果用引号时，变量后面还有其它的有文字，就不能解析了如\n  \techo \"我的名字叫做$userName很高兴见到大家\"\n  这里就无法解析，需要在变量后面添加一个非空特殊字符，如：\n  \techo \"我的名字叫做{$userNmae}很高兴见到大家\"\n  如果输出字符是单引号，则无法解析字符串\n  ```\n\n### 变量相关函数\n\n- header():设置服务器返回到浏览器的数据的类型\n\n  ```\n  header('content-type:text/html;charset=utf-8');\n  ```\n\n\n- isset() 判断变量是否存在\n\n  - 可以用来判断变量是否定义，或者是否为null\n\n- empty() 判断变量是否为空\n\n  - 如果 `var` 是非空或非零的值，则     empty()  返回  FALSE\n  - *\"\"*、*0*、*\"0\"*、**NULL**、**FALSE**、*array()*、*var $var;*      以及没有任何属性的对象都将被认为是空的,也就意味着，如果上述的数据用empty来判断返回的结果都为true\n\n- unset() 删除变量\n\n  - 可以通过这个函数删除一个已经存在的变量，删除之后变量为null\n\n  - 可以同步删除多个变量\n\n  - 如果在函数中 **unset()**      一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用      **unset()** 之前一样的值。(这个当我们学了全局变量与局部变量以后再说)\n\n    ```php\n    unset($a,$b,$c)\n    ```\n\n- var_dump() 显示变量的类型和值\n\n  - 可以同时打印多个变量\n\n- print_r() 显示数组的元素信息\n\n  - 如果是字符串，数字，boolean值，会原样输出\n  - 如果是数组，会详细打印数组信息\n\n### 可变变量\n\n- 指一个变量的名称，由另一个变量的值来充当\n\n  ```php\n  $a = \"b\";\n  $b = \"c\";\n  echo $b;//输出  c\n  echo $$a;//输出 c\n  ```\n\n- 如果使用可变变量，一定要加上给可变变量的变量名加上{}作为定界符\n\n### 变量的值传递和引用传递\n\n- JS中的基本数据类型(只有一个值)：字符串型、数值型、布尔型、undefined、null\n\n- JS中的复合数据类型(多个值)：数组(Array)、对象(Object)、函数(Function)\n\n- 值传递：\n\n  - 传递的是变量中保存的值\n\n- 引用传递\n\n  - 传递的是变量保存的引用地址\n\n- 在PHP中可以使用 & 符号将值传递的变量改变为引用传递：如\n\n  ```php\n  $a = \"abc\";\n  $b = &$a;\n  $a = \"123\";\n  echo \"$a<br/>$b\"\n  ```\n\n## 常量\n\n### 概念\n\n- 常量就是值永远不变的量，即：一旦赋值无法删除，修改。\n- 由于变量在使用时还需要去它存储的地址中去找到对应的数据，相比变量来说，常量的速度要快。（存储地址？）\n\n### 命名规则\n\n- 与变量基本一致\n  - 变量名称只能包含：字母、数字、下划线，常量也是\n  - PHP中的常量不需要使用$符号开头\n  - 常量名区分大小写，一般建议使用时尽量用大写，为了与变量区分开\n  - 常用的两种命名方法：\n    - 驼峰命名法\n      - 第一个单词的首字母小写，其余单词的首字母全部大写\n      - 如：uerName，userId\n    - 下划线命名法\n      - 所以的单词首字都小写，由下划线连接\n      - 如：user_name，user_id\n\n### 常量定义define()\n\n- 语法： bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )\n\n- 案子：通过define关键来定义\n\n  ```php\n    define('TITLE',\"中华人民共和国\");//定义常量TITLE\n    define('TITLE',\"中华人民共和国\",true);//加上true，使用时既可以使用TITLE,又可以使用小写title，来使用常量\n    define('TITLE',\"中华人民共和国\",false);//加上false，使用时必须使用TITLE\n  ```\n\n判断是否是常量：defined()\n\n- 语法： bool defined    ( string  $name   )\n\n- defined()可以判断常量\n\n  ```php\n    defined(“TITLE”);//通过defined判断常量时，常量一定要加上引号\n  ```\n\n### 魔术常量\n\n- 量的值在程序运行过程中不会改变。但是，魔术常量的值，会随着所在位置的不同而改变。\n- 魔术常量都由系统定义好的，我们直接使用就好了，常用的有：\n  - \\_\\_LINE\\_\\_:得到当前代码的行号\n  - \\_\\_FILE\\_\\_:得到当前文件的路径\n  - \\_\\_DIR\\_\\_:得到当前文件所在目录\n  - \\_\\_FUNCTION\\_\\_:得到所在函数\n\n## 数据类型\n\n- 数据类型分类\n\n  ```txt\n  js中的数据类型：\n  \t简单数据类型：\n  \t\tNumber,string,bool,undefined\n      复杂数据类型\n  \t\t数组，对象，null\n  ```\n\n  - 基本数据类型：字符串型(string)、整型(int)、浮点型(float：小数)、布尔型(bool)\n  - 复合数据类型：数组、对象\n  - 特殊数据类型：资源、NULL\n\n- 数据类型判断\n\n  - is_bool()，判断变量是不是布尔型\n\n  - is_int()，判断变量是不是整型\n\n  - is_string() 判断变量是不是字符串型\n\n  - is_float() 判断变量是不是浮点型\n\n  - is_numeric() 判断变量不是数值型或数字字符串。\n\n  - is_array() 判断变量是不是数组\n\n  - is_null()  判断变量是否为NULL\n\n  - is_resource() 判断变量是不是资源型\n\n    ```php\n    //判断用户是否大于18岁，如果大于18岁，显示网页内容，如果没有，则不显示\n    $age = 20;\n    if(isset($age) && is_numeric($age)) {\n    \tif($age >18) {\n          echo('显示网页');\n    \t} else {\n          echo ('不显示');\n    \t}\n    }\n    ```\n\n### 整型\n\n- 关键字：int\n\n\n- 在js中所有的数字都用number来表示，但是在PHP，数字有不同的划分，其中整数（正整数，0，负整数）用**整型**来表示\n\n  - 整型包含正整数、负整数、零0\n\n  - 可以用10进制、八进制、16进制表示\n\n    ```php\n    echo 100;//十进制\n    echo 011;//八进制，以0开头的整数，结果为9\n    echo 0x9a;//十六进制，以0x开头，结果为154\n    ```\n\n  - PHP中最大整数：PHP_INT_MAX，(2^31)-1\n\n- 如果数字超出来了整数据范围，则类型会变为float\n\n### 浮点型\n\n- 关键字：float\n\n\n- PHP中除了整数还有浮点型，一般浮点数会包含小数，比整型更加精确\n\n- 浮点型的范围：1.8E-308~1.8E+308\n\n- 注意点：\n\n  - 如果要对浮点数进行操作，就好先将浮点数转为整数再处理\n\n    ```php\n    //以下做法不可取\n    if(2.1/0.7 == 3) {\n      echo '相等';\n    } else {\n      echo '不相等';\n    }\n    //以下是正确做法\n    $a = 2.1 * 10;\n    $b = 0.7 * 10;\n    if($a/$b == 3) {\n      echo '相等';\n    } else {\n      echo '不相等';\n    }\n    ```\n\n### 字符串\n\n- 字符串定义的四种方式\n\n  - 用单引号可以定义一个字符串；如：$a = ‘abc’;\n\n    - 单引号内无法解析变量\n    - 转义符号有：\\'\n\n  - 用双引号来定义一个字符串；如：$a = “abc”;\n\n    - 双引号内可以解析变量\n    - 转义符号有：\\\\\\、\\'、\\”、\\$、\\r、\\n、\\t\n\n  - 定义长字符串：heredoc\n\n    ```php\n    <?php\n    header('content-type:text/html;charset=utf-8');\n    $a = 'abc';\n    $aa = <<<heredoc\n    <html>\n    123$a\n    </html>\n    heredoc;\n    echo $aa;\n    ?>\n    ```\n\n    - 使用注意：\n      - 1）字符串放在两个heredoc标签之间\n      - 2）以“<<<heredoc”作为开始，不用带分号\n      - 3）以“heredoc;”作为结束，要带分号\n      - 4）标签名称可以自定义\n      - 5）结束标签必须放单独一行\n\n  - 定义长字符串：nowdoc\n\n    ```php\n    <?php\n    header('content-type:text/html;charset=utf-8');\n    $a = 'abc';\n    $aa = <<<'nowdoc'\n    <html>\n    123$a\n    </html>\n    nowdoc;\n    echo $aa;\n    ?>\n    ```\n\n    - 使用注意：\n      - 与上述一样，但是开始的标签名必须加单引\n      - 不能解析变量\n\n### 布尔型\n\n- 关键字：bool\n\n\n- 概念\n  - true表示真，flase表示假\n- 转换：\n  - 0,\"\",NULL,0.0,\"0\",arry() *空数组*会转为false\n  - 其它的数据都会转为true\n\n### 空型\n\n- 用null表示，表示没有\n- 以下情况会出现NULL\n  - 可以直接给一个变量，赋一个NULL值；\n  - 未定义的变量的值，也是NULL；\n  - unset()删除一个变量后，该变量的值为NULL。\n\n## 数据类型转换\n\n- 概念\n\n  - 数据有不同的类型，有时间操作数据时需要转换类型以后才能完成操作，比如计算\n  - 类型的转换分为两种：自动转换（隐式转换）、手动转换（强制转换）在js中则被称为显示转换\n  - 大部分情况下数据是自动转换，少数情况下强制转换。\n\n- 强制转换\n\n  - 通过关键字进行转换\n\n    ```php\n    (bool)$a\t//强制转换为bool\n      \t//除了0，0.0，”“，”0“，NULL，array()，转为false，其余都为true\n    (int)$a\t\t//强制转换为int\n      \t//转换会将小数去尾\n    (string)$a\t//强制转换为string\n      \t//null也可以转为‘’;\n    (array)$a\t//强制转换为array\n    (object)$a\t//强制转换为object\n    ```\n\n- 进制转换\n\n  - 进制就进位制，X进制，就是逢X进一。同理：十进制就是逢十进一，二进制逢二进一等等。\n  - 8进制：有8个基本数，分别为0、1、2、3、4、5、6、7，运算规则”逢8进1”；\n  - 16进制：有16个基本数，分别为0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F，运算规则”逢16进1”。\n  - 2进制：有2个基本数，分别是0、1，运算规则”逢2进1”。\n  - 转换方法：\n    - decbin()将十进制转换为2进制\n    - bindec()将2进制转换为十进制\n    - decoct()将十进制转换为8进制\n    - octdec()将八进制转换为10进制\n    - dechex()将十进制转换为16进制\n    - hexdec()将16进制转换为十进制\n\n## 运算符\n\n- 算数运算符+、-、*、/、%、++、--\n\n- 赋值运算符=、+=、-=、*=、/=、%=\n\n- 字符串运算符. 和 .=\n\n  - 案例：隔行变色\n\n    ```php\n    <?php\n    header('content-type:text/html;charset=utf-8');\n\n    $str = \"<table width='500' border='1' align='center'>\";\n    $str .= \"<tr bgColor='#f0f0f'>\";\n    \t$str .= \"    <th>编号</th>\";\n    \t$str .= \"    <th>新闻编号</th>\";\n    \t$str .= \"    <th>发布时间</th>\";\n    \t$str .= \"</tr>\";\n    for($i = 0 ; $i < 10 ; $i ++) {\n    \tif($i % 2 == 0) {\n    \t\t$str .= \"<tr bgColor='#f0f0f'>\";\n    \t} else {\n    \t\t$str .= \"<tr>\";\n    \t}\n    \t$str .= \"<td>$i</td>\";\n    \t$str .= \"<td>&nbsp;</td>\";\n    \t$str .= \"<td>&nbsp;</td>\";\n    \t$str .= \"</tr>\";\n    }\n    $str .= \"</table>\";\n    echo $str;\n    ?>\n    ```\n\n- 比较运算符>、<、>=、<=、\\=\\=、!=、\\=\\=\\=、!==\n\n  - 案例：字符串比较\n\n  - ASCII码表：如果两个字符进行比较，比较的本质是它们对应的ASCII码\n\n    ```\n    echo (\"a\" > 120);\n    ```\n\n- 逻辑运算符&&、||、!\n\n  - 实例：闰年判断\n\n    ```php\n    //条件：\n    //1）能够被4整除，且不能被100整除\n    //2）能被400整除\n    $year = 2000;\n    if ($year%4 == 0 && $year % 100 !=0 || $year % 400 ==0) {\n    \techo \"{$year}是闰年\";\n    } else {\n    \techo \"{$year}不是闰年\";\n    }\n    ```\n\n- 运算符优先级\n\n- 三元运算符\n\n  - 案例：比较两个数的大小\n\n    ```php\n    $a = 123;\n    $b = 456;\n    $max = $a > $b ? $a : $b;\n    ```\n\n- 错误控制运算符（@）\n\n  - 作用：主要用来屏蔽表达式的错误：\n\n  - 可以用在变量、常量、函数调用之前，但是不能用在函数定义、类定义之前。\n\n    ```php\n    $a = 100;\n    $b = 0;\n    echo @($a / $b);\n    ```\n\n## 流程控制\n\n- 顺序结构\n\n  - 赋值语句\n\n    ```php\n    $a = 123;\n    ```\n\n- 分支结构\n\n  - 分支结构（if）\n  - 多条件判断（if else if else）\n    - 案例：根据分数给评语。\n  - 多分支结构（switch）\n    - 案例：完成今天星期几\n\n- 循环结构\n\n  - while\n  - do while\n  - for\n  - break和continue\n  - 案例：\n    - 1）得到1~100的所有整数相加之和\n    - 2）输出100~1000以内所有水仙花数\n    - 3）输出九九乘法表\n\n## 数组\n\n### 概念\n\n- 数组是一组数的集合。如：$arr = array(1,2,3,4,5,6);\n\n### PHP中数组的分类\n\n- 枚举数组\n  - 数组元素的下标（索引），是从0开始的正整数，如：$arr = array(1,2,3,4,5,6);\n- 关联数组：\n  - 数组元素的下标，是一个字符串。如：$arr[‘edu’] = ‘大专’\n  - 关联数组无法通过数字下标取得对应的元素\n- 混合数组：\n  - 两种下标都有的数组，就是混合数组。如：$arr = array(100, ‘edu’=>’大专’ , ‘tel’ => ‘130110’)\n- 多维数组：\n  - 数组元素的值，是一个数组，还可以理解为：数组嵌套数组。如：$arr\\[5\\]\\[2\\] = 100\n\n### 数组的创建\n\n- 使用 array() 函数来创建数组\n\n  - 创建枚举数组：\n\n    - 下标是从0 开始的正整数\n\n    - ```php\n      $arr = array($value1,$value2,$value3,....);\n      ```\n\n- 创建关联数组\n\n  - $key是重新给数组元素指定一个下标\n\n  - 下标和元素的值之间连接号是\"=>\"，又称\"重载元素下标\"\n\n    ```php\n    $arr = array([$key=>]$value,[$key=>]$value,[$key=>]$value,....)\n    ```\n\n- 创建混合数组\n\n  - 有字符串下标的元素，就没有整型下标\n\n  - 如果$key省略了，就用默认下标\n\n  - 下标只能是整型以及字符串\n\n  - 如果元素没有指定下标，会在最大整数下标的基础上加1.\n\n    ```php\n    $arr[] = $value\n    ```\n\n    - 如果$arr数组不存在的话，会先创建数组，并添加第1个数组元素，第1个元素的下标为0\n    - 如果$arr已经存在 的话，添加新的数组元素，新的数组元素的下标，是最大整数下标+1\n\n  - 创建混合数组：\n\n    - 由语法1，2混合创建数组\n\n      ```php\n      $arr[] = 12;\n      $arr[] = 13;\n      $arr[\"a\"] =14;\n      $arr[] = 15;\n      $arr[20] = 16;\n      $arr[] = 19;\n      ```\n\n### 多维数组\n\n- 多维数组，即数组中的元素又是一个数组\n\n  ```php\n  $arr = array(\n  \tarray(1,2,3,4),\n  \tarray(10,20,30,40),\n  \tarray('a','b','c'),\n  \t\"abc\"\n  );\n  ```\n\n### 数组中的函数\n\n- count()\n  - 计算数组中的单元数目或对象中的属性个数\n  - 语法：int count ( mixed $var [,\\$mode = COUNT_NORMAL ] )\n  - 参数：\n    - $var 是对象或者数组\n    - $model:  如果可选的 mode 参数设为      COUNT_RECURSIVE（或 1），count()      将递归地对数组计数。对计算多维数组的所有单元尤其有用。mode      的默认值是 0。count()识别不了无限递归\n- unset()\n  - 删除变量或数组元素\n  - 语法：void unset ( mixed $var [, mixed $... ] )\n  - 删除元素后，仅仅只是相当于将数据从数组中移除掉了，对数组的下标没有影响\n\n### 数组的遍历\n\n- 使用for加next()遍历数组   此方法比较麻烦\n\n```php\nfor($i = 0; $i < count($arr); $i++) {\n\techo key($arr).current($arr).\"<br/>\"\n\tnext($arr);\n}\n```\n\n- key()：当前指针处元素的键名(下标)，不会移动指针\n- current()：返回当前指针处元素的值，不会移动指针\n- next(): 返回下一个元素的值，指针移动到下一个元素的开头\n\n### PHP中的数组传值时为值传递\n\n```php\n$arr = array(1,2,3,4);\n$arr1 = $arr;\n$arr1[0] = 100;\necho $arr[0];//1\n```\n\n## 函数\n\n### 概念\n\n- 函数是一段命名的代码段\n- 封装一代码，将来要执行时可以直接调用\n\n### 定义函数的方式\n\n```php\n/*\n    function 定义函数的关键字\n    functionName 函数的名称\n    arguments 形参列表\n    retValue 返回值\n    fnCode 功能代码\n*/\nfunction functionName(arguments){\n    // fnCode\n    return retValue;\n}\n```\n\n- function： 定义函数的关键字，不区分大小写\n- functionName：函数名称，命名规则与变量一样，只是不需要加$符号\n- 小括号()：主要用来接受传递过来的参数\n- arguments：定义函数时的参数，形参\n- return 函数的返回值。\n\n### 函数的调用：\n\n- 实参：调用函数时，传递的参数就是实参，含有真正数据的\n- 形参：定义函数时的参数\n\n\n- 案例：得到数组中所有数组的和\n\n### 函数参数的传递：\n\n- 值传递\n  - 函数参数的值传递，就是将参数的值，复制一份，传到函数中\n  - 值传递速度比较慢，但修改其中一个不会影响到另一个；\n- 引用传递\n  - 引用传递速度比较快，但修改其中一个，另一个也会改变。\n  - 引用传递，是将一个变量的地址，复制一份，传到函数中\n- 默认参数\n  - 函数中有些参数可能是固定不变的，为了操作方便，可以用默认参数来代替\n  - 默认参数必须放在非默认参数的右边\n  - 默认参数的值，只能是：字符串、整型、浮点型、布尔型、NULL、数组\n\n```php\nfunction showSelf($name,$age=19,$gender=\"男\") {\n\techo \"我叫{$name}，今天{$age},性别{$ender}\";\n}\n```\n\n### 函数可变数量参数\n\n- func_get_args( void )：返回一个参数列表的枚举数组，参数数组的下标是从0开始的整数\n\n- func_get_arg( $index )：返回参数数组中，指定下标的参数的值；\n\n- func_num_args( void )：返回实参的个数。\n\n  ```php\n  function getSum() {\n  \t\t$arr = func_get_args();\n  \t\t$len = func_num_args();\n  \t\t$sum = 0;\n  \t\tprint_r($arr);\n  \t\techo \"<br/>\";\n  \t\tprint_r($len);\n  \t\techo \"<br/>\";\n  \t\tfor($i = 0; $i < $len; $i++) {\n  \t\t\t$sum += func_get_arg($i);\n  \t\t}\n  \t\techo \"$sum\";\n  \t}\n  \tgetSum(1,2,3,4,5);\n  ```\n\n### 函数的返回值\n\n- 函数的返回值，通过return语句来实现；\n- 将函数的执行结果，返给了函数调用者；\n- return语句一旦执行，函数立即结束，函数剩余的代码不再执行了。\n- return语句有”中断”函数、”退出”函数；\n- return不能同时返回多个值，只能返回一个值。如果想返回多个值，可以放入数组\n\n## 常用系统函数\n\n### 字符串\n\n- 定义字符串基本语法\n  - 单引号字符串\n  - 双引号字符串\n  - nowdoc字符串\n  - heredoc字符串\n- 字符串常用api\n  - strlen() 获取字符串长度\n  - substr() 返回字符串的子串\n  - strtoupper() 将字符串转化为大写\n  - strtolower() 将字符串转化为小写\n  - ucfirst() 将字符串的首字母转换为大写\n  - trim() 去除字符串首尾处的空白字符\n  - ltrim() 删除字符串开头的空白字符\n  - rtrim() 删除字符串末端的空白字符\n  - strrev() 反转字符串\n  - strpos() 查找字符串首次出现的位置，从左往右查找\n  - strrpos() 计算指定字符串在目标字符串中最后一次出现的位置，从右往左查找\n  - strchr()和strstr() 两者一样，用于查找字符串的首次出现\n  - str_replace() 子字符串替换\n  - str_repeat() 重复一个字符串\n\n### 数学\n\n- 常用函数\n  - max() 求最大值\n  - min() 求最小值\n  - rand() 产生一个随机整数\n  - mt_rand() 更高效的随机数\n  - ceil() 进一法取整\n  - floor() 舍去法取整\n  - round() 对浮点数进行四舍五入\n  - pow() 次方运算\n  - abs() 求绝对值\n  - sqrt() 开方运算\n\n#### 日期\n\n- 常用函数\n  - time() 返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数\n  - date() 格式化一个本地时间/日期 \n  - microtime() 返回当前 Unix 时间戳和微秒数\n  - strtotime() 将任何英文文本的日期时间描述解析为 Unix 时间戳\n\n\n\n","slug":"PHP基础语法","published":1,"updated":"2018-03-06T22:21:33.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc0t0009skrx5di7v540","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ol>\n<li><p>简单了解后端开发的流程，了解后端工作人员如何对数据进行处理，以便将来在工作中能更好的跟后端开发人员交流。</p>\n</li>\n<li><p>了解B/S架构开发的基本流程，能开发动态网站，并体会动态网站和静态网站的不同。</p>\n</li>\n<li><p>多了解一门编程语言，体会不同语言之间的异同。</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<h2 id=\"前瞻知识点\"><a href=\"#前瞻知识点\" class=\"headerlink\" title=\"前瞻知识点\"></a>前瞻知识点</h2><ul>\n<li>B/S结构的处理流程</li>\n<li>网络基本概念<ul>\n<li>IP</li>\n<li>域名</li>\n<li>DNS<ul>\n<li>网络DNS</li>\n<li>本地DNS</li>\n</ul>\n</li>\n<li>端口</li>\n</ul>\n</li>\n<li>安装WAMP环境<ul>\n<li>W – web, A – Apache , M – MySql ,P – PHP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><ul>\n<li><p>所有PHP代码都放在标记： &lt;?php  …… ?&gt;</p>\n</li>\n<li><p>PHP输出方式：echo</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'hello world'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注释 </p>\n<ul>\n<li>/<em> 多行注释 </em>/<ul>\n<li>多行注释不要嵌套</li>\n</ul>\n</li>\n<li>// 单行注释</li>\n</ul>\n</li>\n<li><p>语句分隔符 “;”</p>\n</li>\n<li><p>PHP文件访问方式</p>\n</li>\n</ul>\n<h2 id=\"PHP简介\"><a href=\"#PHP简介\" class=\"headerlink\" title=\"PHP简介\"></a>PHP简介</h2><ul>\n<li>PHP Hypertext Preprocessor 超文本预处理器，是嵌入到HTML文件中的服务器端的脚本语言；</li>\n<li>一个PHP文件中，可以包含多种代码：HTML、CSS、JS、Jquery、PHP、MySQL等</li>\n<li>PHP的语法，与C、Java、Python、JS语法比较相似；</li>\n<li>PHP是服务器端的脚本语言，脚本语言相对编程语言来说，要简单的多。</li>\n<li>PHP程序只能运行在服务器端，在客户端看不见PHP任何代码；</li>\n<li>PHP文件的扩展名是以.php为后缀的。</li>\n</ul>\n<h2 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h2><ul>\n<li>PHP与ASP、JSP一样，都是嵌入到HTML文件中的服务器端的脚本语言；</li>\n<li>PHP文件的后缀是.php</li>\n<li>PHP代码的标记：&lt;?php ……  ?&gt;</li>\n<li>PHP中每行程序代码，必须以英文下的分号结束；</li>\n</ul>\n<h2 id=\"输出时间\"><a href=\"#输出时间\" class=\"headerlink\" title=\"输出时间\"></a>输出时间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo date(&apos;Y-m-d H:i:s&apos;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>默认情况下PHP输出的时间是格林威治时间，比中国时区晚8个小时</p>\n</li>\n<li><p>解决方案：</p>\n<ul>\n<li><p>1.0 找到PHP的配置文件 php.ini</p>\n</li>\n<li><p>2.0 定位到 date.timezone</p>\n</li>\n<li><p>3.0 设置中国时区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; PRC为中华人民共和国</span><br><span class=\"line\">date.timezone = PRC</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>变量是临时存储数据的容器；</li>\n<li>变量是存储在内存当中；</li>\n<li>网页执行完毕后，网页中相关的变量全部消失。</li>\n</ul>\n<h3 id=\"变量命名规则\"><a href=\"#变量命名规则\" class=\"headerlink\" title=\"变量命名规则\"></a>变量命名规则</h3><ul>\n<li>变量名称只能包含：字母、数字、下划线</li>\n<li>PHP中的变量名必须以 “\\$” 符号开头，但是”\\$”符号不属于变量的一部分，将来不管是赋值还是取值，都必须加上”\\$”</li>\n<li>变量名区分大小写</li>\n<li>PHP中的变量使用不需要声明，直接赋值使用</li>\n<li>常用的两种命名方法：<ul>\n<li>驼峰命名法<ul>\n<li>第一个单词的首字母小写，其余单词的首字母全部大写</li>\n<li>如：userName，userId</li>\n</ul>\n</li>\n<li>帕斯卡命名法：<ul>\n<li>与驼峰命名法很像</li>\n<li>唯一区别是它的首字母是大写</li>\n<li>如：UserName,UserId</li>\n</ul>\n</li>\n<li>下划线命名法<ul>\n<li>所以的单词首字都小写，由下划线连接</li>\n<li>如：user_name，user_id</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"变量的声明与赋值\"><a href=\"#变量的声明与赋值\" class=\"headerlink\" title=\"变量的声明与赋值\"></a>变量的声明与赋值</h3><ul>\n<li>声明<ul>\n<li>PHP中变量不需要声明，但是每个变量必须以$开</li>\n</ul>\n</li>\n<li>赋值：<ul>\n<li>直接给带有$的变量赋值</li>\n<li>使用“=”，赋值运算符给变量赋值，“=”读作赋值运算符</li>\n<li>赋值运算符的左边只能是一个变量名</li>\n<li>如：$userName = “张三”;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"变量值的读取\"><a href=\"#变量值的读取\" class=\"headerlink\" title=\"变量值的读取\"></a>变量值的读取</h3><ul>\n<li><p>变量的数据类型由其中的内容决定</p>\n</li>\n<li><p>直接以 “$+变量名”的方式 取得可以取得变量的值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$userName = <span class=\"string\">\"admin\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以使用“.”来连接将变量与字符串一起输出</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"我的名字叫\"</span>.$userName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以在字符串的内部直接使用变量</p>\n<ul>\n<li>在PHP中“.”点表示相连</li>\n<li>在PHP中“+”加表示相加（是一种算术运算符）</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\techo \"我的名字叫做<span class=\"formula\">$userName\"</span></span><br><span class=\"line\"><span class=\"formula\">但是，如果用引号时，变量后面还有其它的有文字，就不能解析了如</span></span><br><span class=\"line\"><span class=\"formula\">\techo \"我的名字叫做$</span>userName很高兴见到大家\"</span><br><span class=\"line\">这里就无法解析，需要在变量后面添加一个非空特殊字符，如：</span><br><span class=\"line\">\techo \"我的名字叫做&#123;<span class=\"formula\">$userNmae&#125;很高兴见到大家\"</span></span><br><span class=\"line\"><span class=\"formula\">如果输出字符是单引号，则无法解析字符串</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"变量相关函数\"><a href=\"#变量相关函数\" class=\"headerlink\" title=\"变量相关函数\"></a>变量相关函数</h3><ul>\n<li><p>header():设置服务器返回到浏览器的数据的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(&apos;content-type:text/html;charset=utf-8&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>isset() 判断变量是否存在</p>\n<ul>\n<li>可以用来判断变量是否定义，或者是否为null</li>\n</ul>\n</li>\n<li><p>empty() 判断变量是否为空</p>\n<ul>\n<li>如果 <code>var</code> 是非空或非零的值，则     empty()  返回  FALSE</li>\n<li><em>“”</em>、<em>0</em>、<em>“0”</em>、<strong>NULL</strong>、<strong>FALSE</strong>、<em>array()</em>、<em>var $var;</em>      以及没有任何属性的对象都将被认为是空的,也就意味着，如果上述的数据用empty来判断返回的结果都为true</li>\n</ul>\n</li>\n<li><p>unset() 删除变量</p>\n<ul>\n<li><p>可以通过这个函数删除一个已经存在的变量，删除之后变量为null</p>\n</li>\n<li><p>可以同步删除多个变量</p>\n</li>\n<li><p>如果在函数中 <strong>unset()</strong>      一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用      <strong>unset()</strong> 之前一样的值。(这个当我们学了全局变量与局部变量以后再说)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unset</span>($a,$b,$c)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>var_dump() 显示变量的类型和值</p>\n<ul>\n<li>可以同时打印多个变量</li>\n</ul>\n</li>\n<li><p>print_r() 显示数组的元素信息</p>\n<ul>\n<li>如果是字符串，数字，boolean值，会原样输出</li>\n<li>如果是数组，会详细打印数组信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可变变量\"><a href=\"#可变变量\" class=\"headerlink\" title=\"可变变量\"></a>可变变量</h3><ul>\n<li><p>指一个变量的名称，由另一个变量的值来充当</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">$b = <span class=\"string\">\"c\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $b;<span class=\"comment\">//输出  c</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $$a;<span class=\"comment\">//输出 c</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果使用可变变量，一定要加上给可变变量的变量名加上{}作为定界符</p>\n</li>\n</ul>\n<h3 id=\"变量的值传递和引用传递\"><a href=\"#变量的值传递和引用传递\" class=\"headerlink\" title=\"变量的值传递和引用传递\"></a>变量的值传递和引用传递</h3><ul>\n<li><p>JS中的基本数据类型(只有一个值)：字符串型、数值型、布尔型、undefined、null</p>\n</li>\n<li><p>JS中的复合数据类型(多个值)：数组(Array)、对象(Object)、函数(Function)</p>\n</li>\n<li><p>值传递：</p>\n<ul>\n<li>传递的是变量中保存的值</li>\n</ul>\n</li>\n<li><p>引用传递</p>\n<ul>\n<li>传递的是变量保存的引用地址</li>\n</ul>\n</li>\n<li><p>在PHP中可以使用 &amp; 符号将值传递的变量改变为引用传递：如</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">$b = &amp;$a;</span><br><span class=\"line\">$a = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$a&lt;br/&gt;$b\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>常量就是值永远不变的量，即：一旦赋值无法删除，修改。</li>\n<li>由于变量在使用时还需要去它存储的地址中去找到对应的数据，相比变量来说，常量的速度要快。（存储地址？）</li>\n</ul>\n<h3 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h3><ul>\n<li>与变量基本一致<ul>\n<li>变量名称只能包含：字母、数字、下划线，常量也是</li>\n<li>PHP中的常量不需要使用$符号开头</li>\n<li>常量名区分大小写，一般建议使用时尽量用大写，为了与变量区分开</li>\n<li>常用的两种命名方法：<ul>\n<li>驼峰命名法<ul>\n<li>第一个单词的首字母小写，其余单词的首字母全部大写</li>\n<li>如：uerName，userId</li>\n</ul>\n</li>\n<li>下划线命名法<ul>\n<li>所以的单词首字都小写，由下划线连接</li>\n<li>如：user_name，user_id</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常量定义define\"><a href=\"#常量定义define\" class=\"headerlink\" title=\"常量定义define()\"></a>常量定义define()</h3><ul>\n<li><p>语法： bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</p>\n</li>\n<li><p>案子：通过define关键来定义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'TITLE'</span>,<span class=\"string\">\"中华人民共和国\"</span>);<span class=\"comment\">//定义常量TITLE</span></span><br><span class=\"line\">define(<span class=\"string\">'TITLE'</span>,<span class=\"string\">\"中华人民共和国\"</span>,<span class=\"keyword\">true</span>);<span class=\"comment\">//加上true，使用时既可以使用TITLE,又可以使用小写title，来使用常量</span></span><br><span class=\"line\">define(<span class=\"string\">'TITLE'</span>,<span class=\"string\">\"中华人民共和国\"</span>,<span class=\"keyword\">false</span>);<span class=\"comment\">//加上false，使用时必须使用TITLE</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>判断是否是常量：defined()</p>\n<ul>\n<li><p>语法： bool defined    ( string  $name   )</p>\n</li>\n<li><p>defined()可以判断常量</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defined(“TITLE”);<span class=\"comment\">//通过defined判断常量时，常量一定要加上引号</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"魔术常量\"><a href=\"#魔术常量\" class=\"headerlink\" title=\"魔术常量\"></a>魔术常量</h3><ul>\n<li>量的值在程序运行过程中不会改变。但是，魔术常量的值，会随着所在位置的不同而改变。</li>\n<li>魔术常量都由系统定义好的，我们直接使用就好了，常用的有：<ul>\n<li>__LINE__:得到当前代码的行号</li>\n<li>__FILE__:得到当前文件的路径</li>\n<li>__DIR__:得到当前文件所在目录</li>\n<li>__FUNCTION__:得到所在函数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li><p>数据类型分类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js中的数据类型：</span><br><span class=\"line\">\t简单数据类型：</span><br><span class=\"line\">\t\tNumber,string,bool,undefined</span><br><span class=\"line\">    复杂数据类型</span><br><span class=\"line\">\t\t数组，对象，null</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基本数据类型：字符串型(string)、整型(int)、浮点型(float：小数)、布尔型(bool)</li>\n<li>复合数据类型：数组、对象</li>\n<li>特殊数据类型：资源、NULL</li>\n</ul>\n</li>\n<li><p>数据类型判断</p>\n<ul>\n<li><p>is_bool()，判断变量是不是布尔型</p>\n</li>\n<li><p>is_int()，判断变量是不是整型</p>\n</li>\n<li><p>is_string() 判断变量是不是字符串型</p>\n</li>\n<li><p>is_float() 判断变量是不是浮点型</p>\n</li>\n<li><p>is_numeric() 判断变量不是数值型或数字字符串。</p>\n</li>\n<li><p>is_array() 判断变量是不是数组</p>\n</li>\n<li><p>is_null()  判断变量是否为NULL</p>\n</li>\n<li><p>is_resource() 判断变量是不是资源型</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断用户是否大于18岁，如果大于18岁，显示网页内容，如果没有，则不显示</span></span><br><span class=\"line\">$age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($age) &amp;&amp; is_numeric($age)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>($age &gt;<span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span>(<span class=\"string\">'显示网页'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> (<span class=\"string\">'不显示'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><ul>\n<li>关键字：int</li>\n</ul>\n<ul>\n<li><p>在js中所有的数字都用number来表示，但是在PHP，数字有不同的划分，其中整数（正整数，0，负整数）用<strong>整型</strong>来表示</p>\n<ul>\n<li><p>整型包含正整数、负整数、零0</p>\n</li>\n<li><p>可以用10进制、八进制、16进制表示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">100</span>;<span class=\"comment\">//十进制</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">011</span>;<span class=\"comment\">//八进制，以0开头的整数，结果为9</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">0x9a</span>;<span class=\"comment\">//十六进制，以0x开头，结果为154</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>PHP中最大整数：PHP_INT_MAX，(2^31)-1</p>\n</li>\n</ul>\n</li>\n<li><p>如果数字超出来了整数据范围，则类型会变为float</p>\n</li>\n</ul>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><ul>\n<li>关键字：float</li>\n</ul>\n<ul>\n<li><p>PHP中除了整数还有浮点型，一般浮点数会包含小数，比整型更加精确</p>\n</li>\n<li><p>浮点型的范围：1.8E-308~1.8E+308</p>\n</li>\n<li><p>注意点：</p>\n<ul>\n<li><p>如果要对浮点数进行操作，就好先将浮点数转为整数再处理</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下做法不可取</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">2.1</span>/<span class=\"number\">0.7</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'相等'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'不相等'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以下是正确做法</span></span><br><span class=\"line\">$a = <span class=\"number\">2.1</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\">$b = <span class=\"number\">0.7</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($a/$b == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'相等'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'不相等'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><ul>\n<li><p>字符串定义的四种方式</p>\n<ul>\n<li><p>用单引号可以定义一个字符串；如：$a = ‘abc’;</p>\n<ul>\n<li>单引号内无法解析变量</li>\n<li>转义符号有：\\’</li>\n</ul>\n</li>\n<li><p>用双引号来定义一个字符串；如：$a = “abc”;</p>\n<ul>\n<li>双引号内可以解析变量</li>\n<li>转义符号有：\\\\、\\’、\\”、\\$、\\r、\\n、\\t</li>\n</ul>\n</li>\n<li><p>定义长字符串：heredoc</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\">$a = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">$aa = <span class=\"string\">&lt;&lt;&lt;heredoc</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">123<span class=\"subst\">$a</span></span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">heredoc;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $aa;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用注意：<ul>\n<li>1）字符串放在两个heredoc标签之间</li>\n<li>2）以“&lt;&lt;&lt;heredoc”作为开始，不用带分号</li>\n<li>3）以“heredoc;”作为结束，要带分号</li>\n<li>4）标签名称可以自定义</li>\n<li>5）结束标签必须放单独一行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义长字符串：nowdoc</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\">$a = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">$aa = <span class=\"string\">&lt;&lt;&lt;'nowdoc'</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">123<span class=\"subst\">$a</span></span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">nowdoc;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $aa;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用注意：<ul>\n<li>与上述一样，但是开始的标签名必须加单引</li>\n<li>不能解析变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"布尔型\"><a href=\"#布尔型\" class=\"headerlink\" title=\"布尔型\"></a>布尔型</h3><ul>\n<li>关键字：bool</li>\n</ul>\n<ul>\n<li>概念<ul>\n<li>true表示真，flase表示假</li>\n</ul>\n</li>\n<li>转换：<ul>\n<li>0,””,NULL,0.0,”0”,arry() <em>空数组</em>会转为false</li>\n<li>其它的数据都会转为true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"空型\"><a href=\"#空型\" class=\"headerlink\" title=\"空型\"></a>空型</h3><ul>\n<li>用null表示，表示没有</li>\n<li>以下情况会出现NULL<ul>\n<li>可以直接给一个变量，赋一个NULL值；</li>\n<li>未定义的变量的值，也是NULL；</li>\n<li>unset()删除一个变量后，该变量的值为NULL。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><ul>\n<li><p>概念</p>\n<ul>\n<li>数据有不同的类型，有时间操作数据时需要转换类型以后才能完成操作，比如计算</li>\n<li>类型的转换分为两种：自动转换（隐式转换）、手动转换（强制转换）在js中则被称为显示转换</li>\n<li>大部分情况下数据是自动转换，少数情况下强制转换。</li>\n</ul>\n</li>\n<li><p>强制转换</p>\n<ul>\n<li><p>通过关键字进行转换</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(bool)$a\t<span class=\"comment\">//强制转换为bool</span></span><br><span class=\"line\">  \t<span class=\"comment\">//除了0，0.0，”“，”0“，NULL，array()，转为false，其余都为true</span></span><br><span class=\"line\">(int)$a\t\t<span class=\"comment\">//强制转换为int</span></span><br><span class=\"line\">  \t<span class=\"comment\">//转换会将小数去尾</span></span><br><span class=\"line\">(string)$a\t<span class=\"comment\">//强制转换为string</span></span><br><span class=\"line\">  \t<span class=\"comment\">//null也可以转为‘’;</span></span><br><span class=\"line\">(<span class=\"keyword\">array</span>)$a\t<span class=\"comment\">//强制转换为array</span></span><br><span class=\"line\">(object)$a\t<span class=\"comment\">//强制转换为object</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>进制转换</p>\n<ul>\n<li>进制就进位制，X进制，就是逢X进一。同理：十进制就是逢十进一，二进制逢二进一等等。</li>\n<li>8进制：有8个基本数，分别为0、1、2、3、4、5、6、7，运算规则”逢8进1”；</li>\n<li>16进制：有16个基本数，分别为0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F，运算规则”逢16进1”。</li>\n<li>2进制：有2个基本数，分别是0、1，运算规则”逢2进1”。</li>\n<li>转换方法：<ul>\n<li>decbin()将十进制转换为2进制</li>\n<li>bindec()将2进制转换为十进制</li>\n<li>decoct()将十进制转换为8进制</li>\n<li>octdec()将八进制转换为10进制</li>\n<li>dechex()将十进制转换为16进制</li>\n<li>hexdec()将16进制转换为十进制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li><p>算数运算符+、-、*、/、%、++、–</p>\n</li>\n<li><p>赋值运算符=、+=、-=、*=、/=、%=</p>\n</li>\n<li><p>字符串运算符. 和 .=</p>\n<ul>\n<li><p>案例：隔行变色</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$str = <span class=\"string\">\"&lt;table width='500' border='1' align='center'&gt;\"</span>;</span><br><span class=\"line\">$str .= <span class=\"string\">\"&lt;tr bgColor='#f0f0f'&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"    &lt;th&gt;编号&lt;/th&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"    &lt;th&gt;新闻编号&lt;/th&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"    &lt;th&gt;发布时间&lt;/th&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>($i = <span class=\"number\">0</span> ; $i &lt; <span class=\"number\">10</span> ; $i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>($i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t$str .= <span class=\"string\">\"&lt;tr bgColor='#f0f0f'&gt;\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t$str .= <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;td&gt;$i&lt;/td&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;td&gt;&amp;nbsp;&lt;/td&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;td&gt;&amp;nbsp;&lt;/td&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$str .= <span class=\"string\">\"&lt;/table&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $str;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>比较运算符&gt;、&lt;、&gt;=、&lt;=、\\=\\=、!=、\\=\\=\\=、!==</p>\n<ul>\n<li><p>案例：字符串比较</p>\n</li>\n<li><p>ASCII码表：如果两个字符进行比较，比较的本质是它们对应的ASCII码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo (&quot;a&quot; &gt; 120);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>逻辑运算符&amp;&amp;、||、!</p>\n<ul>\n<li><p>实例：闰年判断</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件：</span></span><br><span class=\"line\"><span class=\"comment\">//1）能够被4整除，且不能被100整除</span></span><br><span class=\"line\"><span class=\"comment\">//2）能被400整除</span></span><br><span class=\"line\">$year = <span class=\"number\">2000</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($year%<span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; $year % <span class=\"number\">100</span> !=<span class=\"number\">0</span> || $year % <span class=\"number\">400</span> ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$year&#125;是闰年\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$year&#125;不是闰年\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运算符优先级</p>\n</li>\n<li><p>三元运算符</p>\n<ul>\n<li><p>案例：比较两个数的大小</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">123</span>;</span><br><span class=\"line\">$b = <span class=\"number\">456</span>;</span><br><span class=\"line\">$max = $a &gt; $b ? $a : $b;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>错误控制运算符（@）</p>\n<ul>\n<li><p>作用：主要用来屏蔽表达式的错误：</p>\n</li>\n<li><p>可以用在变量、常量、函数调用之前，但是不能用在函数定义、类定义之前。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">100</span>;</span><br><span class=\"line\">$b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> @($a / $b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><ul>\n<li><p>顺序结构</p>\n<ul>\n<li><p>赋值语句</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>分支结构</p>\n<ul>\n<li>分支结构（if）</li>\n<li>多条件判断（if else if else）<ul>\n<li>案例：根据分数给评语。</li>\n</ul>\n</li>\n<li>多分支结构（switch）<ul>\n<li>案例：完成今天星期几</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>循环结构</p>\n<ul>\n<li>while</li>\n<li>do while</li>\n<li>for</li>\n<li>break和continue</li>\n<li>案例：<ul>\n<li>1）得到1~100的所有整数相加之和</li>\n<li>2）输出100~1000以内所有水仙花数</li>\n<li>3）输出九九乘法表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>数组是一组数的集合。如：$arr = array(1,2,3,4,5,6);</li>\n</ul>\n<h3 id=\"PHP中数组的分类\"><a href=\"#PHP中数组的分类\" class=\"headerlink\" title=\"PHP中数组的分类\"></a>PHP中数组的分类</h3><ul>\n<li>枚举数组<ul>\n<li>数组元素的下标（索引），是从0开始的正整数，如：$arr = array(1,2,3,4,5,6);</li>\n</ul>\n</li>\n<li>关联数组：<ul>\n<li>数组元素的下标，是一个字符串。如：$arr[‘edu’] = ‘大专’</li>\n<li>关联数组无法通过数字下标取得对应的元素</li>\n</ul>\n</li>\n<li>混合数组：<ul>\n<li>两种下标都有的数组，就是混合数组。如：$arr = array(100, ‘edu’=&gt;’大专’ , ‘tel’ =&gt; ‘130110’)</li>\n</ul>\n</li>\n<li>多维数组：<ul>\n<li>数组元素的值，是一个数组，还可以理解为：数组嵌套数组。如：$arr[5][2] = 100</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h3><ul>\n<li><p>使用 array() 函数来创建数组</p>\n<ul>\n<li><p>创建枚举数组：</p>\n<ul>\n<li><p>下标是从0 开始的正整数</p>\n</li>\n<li><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>($value1,$value2,$value3,....);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>创建关联数组</p>\n<ul>\n<li><p>$key是重新给数组元素指定一个下标</p>\n</li>\n<li><p>下标和元素的值之间连接号是”=&gt;”，又称”重载元素下标”</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>([$key=&gt;]$value,[$key=&gt;]$value,[$key=&gt;]$value,....)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>创建混合数组</p>\n<ul>\n<li><p>有字符串下标的元素，就没有整型下标</p>\n</li>\n<li><p>如果$key省略了，就用默认下标</p>\n</li>\n<li><p>下标只能是整型以及字符串</p>\n</li>\n<li><p>如果元素没有指定下标，会在最大整数下标的基础上加1.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr[] = $value</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果$arr数组不存在的话，会先创建数组，并添加第1个数组元素，第1个元素的下标为0</li>\n<li>如果$arr已经存在 的话，添加新的数组元素，新的数组元素的下标，是最大整数下标+1</li>\n</ul>\n</li>\n<li><p>创建混合数组：</p>\n<ul>\n<li><p>由语法1，2混合创建数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr[] = <span class=\"number\">12</span>;</span><br><span class=\"line\">$arr[] = <span class=\"number\">13</span>;</span><br><span class=\"line\">$arr[<span class=\"string\">\"a\"</span>] =<span class=\"number\">14</span>;</span><br><span class=\"line\">$arr[] = <span class=\"number\">15</span>;</span><br><span class=\"line\">$arr[<span class=\"number\">20</span>] = <span class=\"number\">16</span>;</span><br><span class=\"line\">$arr[] = <span class=\"number\">19</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h3><ul>\n<li><p>多维数组，即数组中的元素又是一个数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">array</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">array</span>(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>),</span><br><span class=\"line\">\t<span class=\"string\">\"abc\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"数组中的函数\"><a href=\"#数组中的函数\" class=\"headerlink\" title=\"数组中的函数\"></a>数组中的函数</h3><ul>\n<li>count()<ul>\n<li>计算数组中的单元数目或对象中的属性个数</li>\n<li>语法：int count ( mixed $var [,\\$mode = COUNT_NORMAL ] )</li>\n<li>参数：<ul>\n<li>$var 是对象或者数组</li>\n<li>$model:  如果可选的 mode 参数设为      COUNT_RECURSIVE（或 1），count()      将递归地对数组计数。对计算多维数组的所有单元尤其有用。mode      的默认值是 0。count()识别不了无限递归</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>unset()<ul>\n<li>删除变量或数组元素</li>\n<li>语法：void unset ( mixed $var [, mixed $… ] )</li>\n<li>删除元素后，仅仅只是相当于将数据从数组中移除掉了，对数组的下标没有影响</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3><ul>\n<li>使用for加next()遍历数组   此方法比较麻烦</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; count($arr); $i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> key($arr).current($arr).<span class=\"string\">\"&lt;br/&gt;\"</span></span><br><span class=\"line\">\tnext($arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>key()：当前指针处元素的键名(下标)，不会移动指针</li>\n<li>current()：返回当前指针处元素的值，不会移动指针</li>\n<li>next(): 返回下一个元素的值，指针移动到下一个元素的开头</li>\n</ul>\n<h3 id=\"PHP中的数组传值时为值传递\"><a href=\"#PHP中的数组传值时为值传递\" class=\"headerlink\" title=\"PHP中的数组传值时为值传递\"></a>PHP中的数组传值时为值传递</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">$arr1 = $arr;</span><br><span class=\"line\">$arr1[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">0</span>];<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>函数是一段命名的代码段</li>\n<li>封装一代码，将来要执行时可以直接调用</li>\n</ul>\n<h3 id=\"定义函数的方式\"><a href=\"#定义函数的方式\" class=\"headerlink\" title=\"定义函数的方式\"></a>定义函数的方式</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    function 定义函数的关键字</span></span><br><span class=\"line\"><span class=\"comment\">    functionName 函数的名称</span></span><br><span class=\"line\"><span class=\"comment\">    arguments 形参列表</span></span><br><span class=\"line\"><span class=\"comment\">    retValue 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    fnCode 功能代码</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span><span class=\"params\">(arguments)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// fnCode</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>function： 定义函数的关键字，不区分大小写</li>\n<li>functionName：函数名称，命名规则与变量一样，只是不需要加$符号</li>\n<li>小括号()：主要用来接受传递过来的参数</li>\n<li>arguments：定义函数时的参数，形参</li>\n<li>return 函数的返回值。</li>\n</ul>\n<h3 id=\"函数的调用：\"><a href=\"#函数的调用：\" class=\"headerlink\" title=\"函数的调用：\"></a>函数的调用：</h3><ul>\n<li>实参：调用函数时，传递的参数就是实参，含有真正数据的</li>\n<li>形参：定义函数时的参数</li>\n</ul>\n<ul>\n<li>案例：得到数组中所有数组的和</li>\n</ul>\n<h3 id=\"函数参数的传递：\"><a href=\"#函数参数的传递：\" class=\"headerlink\" title=\"函数参数的传递：\"></a>函数参数的传递：</h3><ul>\n<li>值传递<ul>\n<li>函数参数的值传递，就是将参数的值，复制一份，传到函数中</li>\n<li>值传递速度比较慢，但修改其中一个不会影响到另一个；</li>\n</ul>\n</li>\n<li>引用传递<ul>\n<li>引用传递速度比较快，但修改其中一个，另一个也会改变。</li>\n<li>引用传递，是将一个变量的地址，复制一份，传到函数中</li>\n</ul>\n</li>\n<li>默认参数<ul>\n<li>函数中有些参数可能是固定不变的，为了操作方便，可以用默认参数来代替</li>\n<li>默认参数必须放在非默认参数的右边</li>\n<li>默认参数的值，只能是：字符串、整型、浮点型、布尔型、NULL、数组</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showSelf</span><span class=\"params\">($name,$age=<span class=\"number\">19</span>,$gender=<span class=\"string\">\"男\"</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"我叫&#123;$name&#125;，今天&#123;$age&#125;,性别&#123;$ender&#125;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数可变数量参数\"><a href=\"#函数可变数量参数\" class=\"headerlink\" title=\"函数可变数量参数\"></a>函数可变数量参数</h3><ul>\n<li><p>func_get_args( void )：返回一个参数列表的枚举数组，参数数组的下标是从0开始的整数</p>\n</li>\n<li><p>func_get_arg( $index )：返回参数数组中，指定下标的参数的值；</p>\n</li>\n<li><p>func_num_args( void )：返回实参的个数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t$arr = func_get_args();</span><br><span class=\"line\">\t\t$len = func_num_args();</span><br><span class=\"line\">\t\t$sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tprint_r($arr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br/&gt;\"</span>;</span><br><span class=\"line\">\t\tprint_r($len);</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br/&gt;\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">\t\t\t$sum += func_get_arg($i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"$sum\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgetSum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h3><ul>\n<li>函数的返回值，通过return语句来实现；</li>\n<li>将函数的执行结果，返给了函数调用者；</li>\n<li>return语句一旦执行，函数立即结束，函数剩余的代码不再执行了。</li>\n<li>return语句有”中断”函数、”退出”函数；</li>\n<li>return不能同时返回多个值，只能返回一个值。如果想返回多个值，可以放入数组</li>\n</ul>\n<h2 id=\"常用系统函数\"><a href=\"#常用系统函数\" class=\"headerlink\" title=\"常用系统函数\"></a>常用系统函数</h2><h3 id=\"字符串-1\"><a href=\"#字符串-1\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><ul>\n<li>定义字符串基本语法<ul>\n<li>单引号字符串</li>\n<li>双引号字符串</li>\n<li>nowdoc字符串</li>\n<li>heredoc字符串</li>\n</ul>\n</li>\n<li>字符串常用api<ul>\n<li>strlen() 获取字符串长度</li>\n<li>substr() 返回字符串的子串</li>\n<li>strtoupper() 将字符串转化为大写</li>\n<li>strtolower() 将字符串转化为小写</li>\n<li>ucfirst() 将字符串的首字母转换为大写</li>\n<li>trim() 去除字符串首尾处的空白字符</li>\n<li>ltrim() 删除字符串开头的空白字符</li>\n<li>rtrim() 删除字符串末端的空白字符</li>\n<li>strrev() 反转字符串</li>\n<li>strpos() 查找字符串首次出现的位置，从左往右查找</li>\n<li>strrpos() 计算指定字符串在目标字符串中最后一次出现的位置，从右往左查找</li>\n<li>strchr()和strstr() 两者一样，用于查找字符串的首次出现</li>\n<li>str_replace() 子字符串替换</li>\n<li>str_repeat() 重复一个字符串</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h3><ul>\n<li>常用函数<ul>\n<li>max() 求最大值</li>\n<li>min() 求最小值</li>\n<li>rand() 产生一个随机整数</li>\n<li>mt_rand() 更高效的随机数</li>\n<li>ceil() 进一法取整</li>\n<li>floor() 舍去法取整</li>\n<li>round() 对浮点数进行四舍五入</li>\n<li>pow() 次方运算</li>\n<li>abs() 求绝对值</li>\n<li>sqrt() 开方运算</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h4><ul>\n<li>常用函数<ul>\n<li>time() 返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数</li>\n<li>date() 格式化一个本地时间/日期 </li>\n<li>microtime() 返回当前 Unix 时间戳和微秒数</li>\n<li>strtotime() 将任何英文文本的日期时间描述解析为 Unix 时间戳</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ol>\n<li><p>简单了解后端开发的流程，了解后端工作人员如何对数据进行处理，以便将来在工作中能更好的跟后端开发人员交流。</p>\n</li>\n<li><p>了解B/S架构开发的基本流程，能开发动态网站，并体会动态网站和静态网站的不同。</p>\n</li>\n<li><p>多了解一门编程语言，体会不同语言之间的异同。</p>","more":"</li>\n</ol>\n<h2 id=\"前瞻知识点\"><a href=\"#前瞻知识点\" class=\"headerlink\" title=\"前瞻知识点\"></a>前瞻知识点</h2><ul>\n<li>B/S结构的处理流程</li>\n<li>网络基本概念<ul>\n<li>IP</li>\n<li>域名</li>\n<li>DNS<ul>\n<li>网络DNS</li>\n<li>本地DNS</li>\n</ul>\n</li>\n<li>端口</li>\n</ul>\n</li>\n<li>安装WAMP环境<ul>\n<li>W – web, A – Apache , M – MySql ,P – PHP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><ul>\n<li><p>所有PHP代码都放在标记： &lt;?php  …… ?&gt;</p>\n</li>\n<li><p>PHP输出方式：echo</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'hello world'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注释 </p>\n<ul>\n<li>/<em> 多行注释 </em>/<ul>\n<li>多行注释不要嵌套</li>\n</ul>\n</li>\n<li>// 单行注释</li>\n</ul>\n</li>\n<li><p>语句分隔符 “;”</p>\n</li>\n<li><p>PHP文件访问方式</p>\n</li>\n</ul>\n<h2 id=\"PHP简介\"><a href=\"#PHP简介\" class=\"headerlink\" title=\"PHP简介\"></a>PHP简介</h2><ul>\n<li>PHP Hypertext Preprocessor 超文本预处理器，是嵌入到HTML文件中的服务器端的脚本语言；</li>\n<li>一个PHP文件中，可以包含多种代码：HTML、CSS、JS、Jquery、PHP、MySQL等</li>\n<li>PHP的语法，与C、Java、Python、JS语法比较相似；</li>\n<li>PHP是服务器端的脚本语言，脚本语言相对编程语言来说，要简单的多。</li>\n<li>PHP程序只能运行在服务器端，在客户端看不见PHP任何代码；</li>\n<li>PHP文件的扩展名是以.php为后缀的。</li>\n</ul>\n<h2 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h2><ul>\n<li>PHP与ASP、JSP一样，都是嵌入到HTML文件中的服务器端的脚本语言；</li>\n<li>PHP文件的后缀是.php</li>\n<li>PHP代码的标记：&lt;?php ……  ?&gt;</li>\n<li>PHP中每行程序代码，必须以英文下的分号结束；</li>\n</ul>\n<h2 id=\"输出时间\"><a href=\"#输出时间\" class=\"headerlink\" title=\"输出时间\"></a>输出时间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo date(&apos;Y-m-d H:i:s&apos;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>默认情况下PHP输出的时间是格林威治时间，比中国时区晚8个小时</p>\n</li>\n<li><p>解决方案：</p>\n<ul>\n<li><p>1.0 找到PHP的配置文件 php.ini</p>\n</li>\n<li><p>2.0 定位到 date.timezone</p>\n</li>\n<li><p>3.0 设置中国时区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; PRC为中华人民共和国</span><br><span class=\"line\">date.timezone = PRC</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>变量是临时存储数据的容器；</li>\n<li>变量是存储在内存当中；</li>\n<li>网页执行完毕后，网页中相关的变量全部消失。</li>\n</ul>\n<h3 id=\"变量命名规则\"><a href=\"#变量命名规则\" class=\"headerlink\" title=\"变量命名规则\"></a>变量命名规则</h3><ul>\n<li>变量名称只能包含：字母、数字、下划线</li>\n<li>PHP中的变量名必须以 “\\$” 符号开头，但是”\\$”符号不属于变量的一部分，将来不管是赋值还是取值，都必须加上”\\$”</li>\n<li>变量名区分大小写</li>\n<li>PHP中的变量使用不需要声明，直接赋值使用</li>\n<li>常用的两种命名方法：<ul>\n<li>驼峰命名法<ul>\n<li>第一个单词的首字母小写，其余单词的首字母全部大写</li>\n<li>如：userName，userId</li>\n</ul>\n</li>\n<li>帕斯卡命名法：<ul>\n<li>与驼峰命名法很像</li>\n<li>唯一区别是它的首字母是大写</li>\n<li>如：UserName,UserId</li>\n</ul>\n</li>\n<li>下划线命名法<ul>\n<li>所以的单词首字都小写，由下划线连接</li>\n<li>如：user_name，user_id</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"变量的声明与赋值\"><a href=\"#变量的声明与赋值\" class=\"headerlink\" title=\"变量的声明与赋值\"></a>变量的声明与赋值</h3><ul>\n<li>声明<ul>\n<li>PHP中变量不需要声明，但是每个变量必须以$开</li>\n</ul>\n</li>\n<li>赋值：<ul>\n<li>直接给带有$的变量赋值</li>\n<li>使用“=”，赋值运算符给变量赋值，“=”读作赋值运算符</li>\n<li>赋值运算符的左边只能是一个变量名</li>\n<li>如：$userName = “张三”;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"变量值的读取\"><a href=\"#变量值的读取\" class=\"headerlink\" title=\"变量值的读取\"></a>变量值的读取</h3><ul>\n<li><p>变量的数据类型由其中的内容决定</p>\n</li>\n<li><p>直接以 “$+变量名”的方式 取得可以取得变量的值</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$userName = <span class=\"string\">\"admin\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以使用“.”来连接将变量与字符串一起输出</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"我的名字叫\"</span>.$userName</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以在字符串的内部直接使用变量</p>\n<ul>\n<li>在PHP中“.”点表示相连</li>\n<li>在PHP中“+”加表示相加（是一种算术运算符）</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\techo \"我的名字叫做<span class=\"formula\">$userName\"</span></span><br><span class=\"line\"><span class=\"formula\">但是，如果用引号时，变量后面还有其它的有文字，就不能解析了如</span></span><br><span class=\"line\"><span class=\"formula\">\techo \"我的名字叫做$</span>userName很高兴见到大家\"</span><br><span class=\"line\">这里就无法解析，需要在变量后面添加一个非空特殊字符，如：</span><br><span class=\"line\">\techo \"我的名字叫做&#123;<span class=\"formula\">$userNmae&#125;很高兴见到大家\"</span></span><br><span class=\"line\"><span class=\"formula\">如果输出字符是单引号，则无法解析字符串</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"变量相关函数\"><a href=\"#变量相关函数\" class=\"headerlink\" title=\"变量相关函数\"></a>变量相关函数</h3><ul>\n<li><p>header():设置服务器返回到浏览器的数据的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header(&apos;content-type:text/html;charset=utf-8&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>isset() 判断变量是否存在</p>\n<ul>\n<li>可以用来判断变量是否定义，或者是否为null</li>\n</ul>\n</li>\n<li><p>empty() 判断变量是否为空</p>\n<ul>\n<li>如果 <code>var</code> 是非空或非零的值，则     empty()  返回  FALSE</li>\n<li><em>“”</em>、<em>0</em>、<em>“0”</em>、<strong>NULL</strong>、<strong>FALSE</strong>、<em>array()</em>、<em>var $var;</em>      以及没有任何属性的对象都将被认为是空的,也就意味着，如果上述的数据用empty来判断返回的结果都为true</li>\n</ul>\n</li>\n<li><p>unset() 删除变量</p>\n<ul>\n<li><p>可以通过这个函数删除一个已经存在的变量，删除之后变量为null</p>\n</li>\n<li><p>可以同步删除多个变量</p>\n</li>\n<li><p>如果在函数中 <strong>unset()</strong>      一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用      <strong>unset()</strong> 之前一样的值。(这个当我们学了全局变量与局部变量以后再说)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unset</span>($a,$b,$c)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>var_dump() 显示变量的类型和值</p>\n<ul>\n<li>可以同时打印多个变量</li>\n</ul>\n</li>\n<li><p>print_r() 显示数组的元素信息</p>\n<ul>\n<li>如果是字符串，数字，boolean值，会原样输出</li>\n<li>如果是数组，会详细打印数组信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可变变量\"><a href=\"#可变变量\" class=\"headerlink\" title=\"可变变量\"></a>可变变量</h3><ul>\n<li><p>指一个变量的名称，由另一个变量的值来充当</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">$b = <span class=\"string\">\"c\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $b;<span class=\"comment\">//输出  c</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $$a;<span class=\"comment\">//输出 c</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果使用可变变量，一定要加上给可变变量的变量名加上{}作为定界符</p>\n</li>\n</ul>\n<h3 id=\"变量的值传递和引用传递\"><a href=\"#变量的值传递和引用传递\" class=\"headerlink\" title=\"变量的值传递和引用传递\"></a>变量的值传递和引用传递</h3><ul>\n<li><p>JS中的基本数据类型(只有一个值)：字符串型、数值型、布尔型、undefined、null</p>\n</li>\n<li><p>JS中的复合数据类型(多个值)：数组(Array)、对象(Object)、函数(Function)</p>\n</li>\n<li><p>值传递：</p>\n<ul>\n<li>传递的是变量中保存的值</li>\n</ul>\n</li>\n<li><p>引用传递</p>\n<ul>\n<li>传递的是变量保存的引用地址</li>\n</ul>\n</li>\n<li><p>在PHP中可以使用 &amp; 符号将值传递的变量改变为引用传递：如</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">$b = &amp;$a;</span><br><span class=\"line\">$a = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$a&lt;br/&gt;$b\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>常量就是值永远不变的量，即：一旦赋值无法删除，修改。</li>\n<li>由于变量在使用时还需要去它存储的地址中去找到对应的数据，相比变量来说，常量的速度要快。（存储地址？）</li>\n</ul>\n<h3 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h3><ul>\n<li>与变量基本一致<ul>\n<li>变量名称只能包含：字母、数字、下划线，常量也是</li>\n<li>PHP中的常量不需要使用$符号开头</li>\n<li>常量名区分大小写，一般建议使用时尽量用大写，为了与变量区分开</li>\n<li>常用的两种命名方法：<ul>\n<li>驼峰命名法<ul>\n<li>第一个单词的首字母小写，其余单词的首字母全部大写</li>\n<li>如：uerName，userId</li>\n</ul>\n</li>\n<li>下划线命名法<ul>\n<li>所以的单词首字都小写，由下划线连接</li>\n<li>如：user_name，user_id</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常量定义define\"><a href=\"#常量定义define\" class=\"headerlink\" title=\"常量定义define()\"></a>常量定义define()</h3><ul>\n<li><p>语法： bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</p>\n</li>\n<li><p>案子：通过define关键来定义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">'TITLE'</span>,<span class=\"string\">\"中华人民共和国\"</span>);<span class=\"comment\">//定义常量TITLE</span></span><br><span class=\"line\">define(<span class=\"string\">'TITLE'</span>,<span class=\"string\">\"中华人民共和国\"</span>,<span class=\"keyword\">true</span>);<span class=\"comment\">//加上true，使用时既可以使用TITLE,又可以使用小写title，来使用常量</span></span><br><span class=\"line\">define(<span class=\"string\">'TITLE'</span>,<span class=\"string\">\"中华人民共和国\"</span>,<span class=\"keyword\">false</span>);<span class=\"comment\">//加上false，使用时必须使用TITLE</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>判断是否是常量：defined()</p>\n<ul>\n<li><p>语法： bool defined    ( string  $name   )</p>\n</li>\n<li><p>defined()可以判断常量</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defined(“TITLE”);<span class=\"comment\">//通过defined判断常量时，常量一定要加上引号</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"魔术常量\"><a href=\"#魔术常量\" class=\"headerlink\" title=\"魔术常量\"></a>魔术常量</h3><ul>\n<li>量的值在程序运行过程中不会改变。但是，魔术常量的值，会随着所在位置的不同而改变。</li>\n<li>魔术常量都由系统定义好的，我们直接使用就好了，常用的有：<ul>\n<li>__LINE__:得到当前代码的行号</li>\n<li>__FILE__:得到当前文件的路径</li>\n<li>__DIR__:得到当前文件所在目录</li>\n<li>__FUNCTION__:得到所在函数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li><p>数据类型分类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js中的数据类型：</span><br><span class=\"line\">\t简单数据类型：</span><br><span class=\"line\">\t\tNumber,string,bool,undefined</span><br><span class=\"line\">    复杂数据类型</span><br><span class=\"line\">\t\t数组，对象，null</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基本数据类型：字符串型(string)、整型(int)、浮点型(float：小数)、布尔型(bool)</li>\n<li>复合数据类型：数组、对象</li>\n<li>特殊数据类型：资源、NULL</li>\n</ul>\n</li>\n<li><p>数据类型判断</p>\n<ul>\n<li><p>is_bool()，判断变量是不是布尔型</p>\n</li>\n<li><p>is_int()，判断变量是不是整型</p>\n</li>\n<li><p>is_string() 判断变量是不是字符串型</p>\n</li>\n<li><p>is_float() 判断变量是不是浮点型</p>\n</li>\n<li><p>is_numeric() 判断变量不是数值型或数字字符串。</p>\n</li>\n<li><p>is_array() 判断变量是不是数组</p>\n</li>\n<li><p>is_null()  判断变量是否为NULL</p>\n</li>\n<li><p>is_resource() 判断变量是不是资源型</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断用户是否大于18岁，如果大于18岁，显示网页内容，如果没有，则不显示</span></span><br><span class=\"line\">$age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($age) &amp;&amp; is_numeric($age)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>($age &gt;<span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span>(<span class=\"string\">'显示网页'</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">echo</span> (<span class=\"string\">'不显示'</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><ul>\n<li>关键字：int</li>\n</ul>\n<ul>\n<li><p>在js中所有的数字都用number来表示，但是在PHP，数字有不同的划分，其中整数（正整数，0，负整数）用<strong>整型</strong>来表示</p>\n<ul>\n<li><p>整型包含正整数、负整数、零0</p>\n</li>\n<li><p>可以用10进制、八进制、16进制表示</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">100</span>;<span class=\"comment\">//十进制</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">011</span>;<span class=\"comment\">//八进制，以0开头的整数，结果为9</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">0x9a</span>;<span class=\"comment\">//十六进制，以0x开头，结果为154</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>PHP中最大整数：PHP_INT_MAX，(2^31)-1</p>\n</li>\n</ul>\n</li>\n<li><p>如果数字超出来了整数据范围，则类型会变为float</p>\n</li>\n</ul>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><ul>\n<li>关键字：float</li>\n</ul>\n<ul>\n<li><p>PHP中除了整数还有浮点型，一般浮点数会包含小数，比整型更加精确</p>\n</li>\n<li><p>浮点型的范围：1.8E-308~1.8E+308</p>\n</li>\n<li><p>注意点：</p>\n<ul>\n<li><p>如果要对浮点数进行操作，就好先将浮点数转为整数再处理</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下做法不可取</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">2.1</span>/<span class=\"number\">0.7</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'相等'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'不相等'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以下是正确做法</span></span><br><span class=\"line\">$a = <span class=\"number\">2.1</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\">$b = <span class=\"number\">0.7</span> * <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($a/$b == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'相等'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">'不相等'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><ul>\n<li><p>字符串定义的四种方式</p>\n<ul>\n<li><p>用单引号可以定义一个字符串；如：$a = ‘abc’;</p>\n<ul>\n<li>单引号内无法解析变量</li>\n<li>转义符号有：\\’</li>\n</ul>\n</li>\n<li><p>用双引号来定义一个字符串；如：$a = “abc”;</p>\n<ul>\n<li>双引号内可以解析变量</li>\n<li>转义符号有：\\\\、\\’、\\”、\\$、\\r、\\n、\\t</li>\n</ul>\n</li>\n<li><p>定义长字符串：heredoc</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\">$a = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">$aa = <span class=\"string\">&lt;&lt;&lt;heredoc</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">123<span class=\"subst\">$a</span></span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">heredoc;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $aa;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用注意：<ul>\n<li>1）字符串放在两个heredoc标签之间</li>\n<li>2）以“&lt;&lt;&lt;heredoc”作为开始，不用带分号</li>\n<li>3）以“heredoc;”作为结束，要带分号</li>\n<li>4）标签名称可以自定义</li>\n<li>5）结束标签必须放单独一行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义长字符串：nowdoc</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\">$a = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">$aa = <span class=\"string\">&lt;&lt;&lt;'nowdoc'</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">123<span class=\"subst\">$a</span></span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">nowdoc;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $aa;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用注意：<ul>\n<li>与上述一样，但是开始的标签名必须加单引</li>\n<li>不能解析变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"布尔型\"><a href=\"#布尔型\" class=\"headerlink\" title=\"布尔型\"></a>布尔型</h3><ul>\n<li>关键字：bool</li>\n</ul>\n<ul>\n<li>概念<ul>\n<li>true表示真，flase表示假</li>\n</ul>\n</li>\n<li>转换：<ul>\n<li>0,””,NULL,0.0,”0”,arry() <em>空数组</em>会转为false</li>\n<li>其它的数据都会转为true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"空型\"><a href=\"#空型\" class=\"headerlink\" title=\"空型\"></a>空型</h3><ul>\n<li>用null表示，表示没有</li>\n<li>以下情况会出现NULL<ul>\n<li>可以直接给一个变量，赋一个NULL值；</li>\n<li>未定义的变量的值，也是NULL；</li>\n<li>unset()删除一个变量后，该变量的值为NULL。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><ul>\n<li><p>概念</p>\n<ul>\n<li>数据有不同的类型，有时间操作数据时需要转换类型以后才能完成操作，比如计算</li>\n<li>类型的转换分为两种：自动转换（隐式转换）、手动转换（强制转换）在js中则被称为显示转换</li>\n<li>大部分情况下数据是自动转换，少数情况下强制转换。</li>\n</ul>\n</li>\n<li><p>强制转换</p>\n<ul>\n<li><p>通过关键字进行转换</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(bool)$a\t<span class=\"comment\">//强制转换为bool</span></span><br><span class=\"line\">  \t<span class=\"comment\">//除了0，0.0，”“，”0“，NULL，array()，转为false，其余都为true</span></span><br><span class=\"line\">(int)$a\t\t<span class=\"comment\">//强制转换为int</span></span><br><span class=\"line\">  \t<span class=\"comment\">//转换会将小数去尾</span></span><br><span class=\"line\">(string)$a\t<span class=\"comment\">//强制转换为string</span></span><br><span class=\"line\">  \t<span class=\"comment\">//null也可以转为‘’;</span></span><br><span class=\"line\">(<span class=\"keyword\">array</span>)$a\t<span class=\"comment\">//强制转换为array</span></span><br><span class=\"line\">(object)$a\t<span class=\"comment\">//强制转换为object</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>进制转换</p>\n<ul>\n<li>进制就进位制，X进制，就是逢X进一。同理：十进制就是逢十进一，二进制逢二进一等等。</li>\n<li>8进制：有8个基本数，分别为0、1、2、3、4、5、6、7，运算规则”逢8进1”；</li>\n<li>16进制：有16个基本数，分别为0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F，运算规则”逢16进1”。</li>\n<li>2进制：有2个基本数，分别是0、1，运算规则”逢2进1”。</li>\n<li>转换方法：<ul>\n<li>decbin()将十进制转换为2进制</li>\n<li>bindec()将2进制转换为十进制</li>\n<li>decoct()将十进制转换为8进制</li>\n<li>octdec()将八进制转换为10进制</li>\n<li>dechex()将十进制转换为16进制</li>\n<li>hexdec()将16进制转换为十进制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li><p>算数运算符+、-、*、/、%、++、–</p>\n</li>\n<li><p>赋值运算符=、+=、-=、*=、/=、%=</p>\n</li>\n<li><p>字符串运算符. 和 .=</p>\n<ul>\n<li><p>案例：隔行变色</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$str = <span class=\"string\">\"&lt;table width='500' border='1' align='center'&gt;\"</span>;</span><br><span class=\"line\">$str .= <span class=\"string\">\"&lt;tr bgColor='#f0f0f'&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"    &lt;th&gt;编号&lt;/th&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"    &lt;th&gt;新闻编号&lt;/th&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"    &lt;th&gt;发布时间&lt;/th&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>($i = <span class=\"number\">0</span> ; $i &lt; <span class=\"number\">10</span> ; $i ++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>($i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t$str .= <span class=\"string\">\"&lt;tr bgColor='#f0f0f'&gt;\"</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t$str .= <span class=\"string\">\"&lt;tr&gt;\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;td&gt;$i&lt;/td&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;td&gt;&amp;nbsp;&lt;/td&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;td&gt;&amp;nbsp;&lt;/td&gt;\"</span>;</span><br><span class=\"line\">\t$str .= <span class=\"string\">\"&lt;/tr&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$str .= <span class=\"string\">\"&lt;/table&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $str;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>比较运算符&gt;、&lt;、&gt;=、&lt;=、\\=\\=、!=、\\=\\=\\=、!==</p>\n<ul>\n<li><p>案例：字符串比较</p>\n</li>\n<li><p>ASCII码表：如果两个字符进行比较，比较的本质是它们对应的ASCII码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo (&quot;a&quot; &gt; 120);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>逻辑运算符&amp;&amp;、||、!</p>\n<ul>\n<li><p>实例：闰年判断</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//条件：</span></span><br><span class=\"line\"><span class=\"comment\">//1）能够被4整除，且不能被100整除</span></span><br><span class=\"line\"><span class=\"comment\">//2）能被400整除</span></span><br><span class=\"line\">$year = <span class=\"number\">2000</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($year%<span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; $year % <span class=\"number\">100</span> !=<span class=\"number\">0</span> || $year % <span class=\"number\">400</span> ==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$year&#125;是闰年\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$year&#125;不是闰年\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>运算符优先级</p>\n</li>\n<li><p>三元运算符</p>\n<ul>\n<li><p>案例：比较两个数的大小</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">123</span>;</span><br><span class=\"line\">$b = <span class=\"number\">456</span>;</span><br><span class=\"line\">$max = $a &gt; $b ? $a : $b;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>错误控制运算符（@）</p>\n<ul>\n<li><p>作用：主要用来屏蔽表达式的错误：</p>\n</li>\n<li><p>可以用在变量、常量、函数调用之前，但是不能用在函数定义、类定义之前。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">100</span>;</span><br><span class=\"line\">$b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> @($a / $b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><ul>\n<li><p>顺序结构</p>\n<ul>\n<li><p>赋值语句</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>分支结构</p>\n<ul>\n<li>分支结构（if）</li>\n<li>多条件判断（if else if else）<ul>\n<li>案例：根据分数给评语。</li>\n</ul>\n</li>\n<li>多分支结构（switch）<ul>\n<li>案例：完成今天星期几</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>循环结构</p>\n<ul>\n<li>while</li>\n<li>do while</li>\n<li>for</li>\n<li>break和continue</li>\n<li>案例：<ul>\n<li>1）得到1~100的所有整数相加之和</li>\n<li>2）输出100~1000以内所有水仙花数</li>\n<li>3）输出九九乘法表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>数组是一组数的集合。如：$arr = array(1,2,3,4,5,6);</li>\n</ul>\n<h3 id=\"PHP中数组的分类\"><a href=\"#PHP中数组的分类\" class=\"headerlink\" title=\"PHP中数组的分类\"></a>PHP中数组的分类</h3><ul>\n<li>枚举数组<ul>\n<li>数组元素的下标（索引），是从0开始的正整数，如：$arr = array(1,2,3,4,5,6);</li>\n</ul>\n</li>\n<li>关联数组：<ul>\n<li>数组元素的下标，是一个字符串。如：$arr[‘edu’] = ‘大专’</li>\n<li>关联数组无法通过数字下标取得对应的元素</li>\n</ul>\n</li>\n<li>混合数组：<ul>\n<li>两种下标都有的数组，就是混合数组。如：$arr = array(100, ‘edu’=&gt;’大专’ , ‘tel’ =&gt; ‘130110’)</li>\n</ul>\n</li>\n<li>多维数组：<ul>\n<li>数组元素的值，是一个数组，还可以理解为：数组嵌套数组。如：$arr[5][2] = 100</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h3><ul>\n<li><p>使用 array() 函数来创建数组</p>\n<ul>\n<li><p>创建枚举数组：</p>\n<ul>\n<li><p>下标是从0 开始的正整数</p>\n</li>\n<li><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>($value1,$value2,$value3,....);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>创建关联数组</p>\n<ul>\n<li><p>$key是重新给数组元素指定一个下标</p>\n</li>\n<li><p>下标和元素的值之间连接号是”=&gt;”，又称”重载元素下标”</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>([$key=&gt;]$value,[$key=&gt;]$value,[$key=&gt;]$value,....)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>创建混合数组</p>\n<ul>\n<li><p>有字符串下标的元素，就没有整型下标</p>\n</li>\n<li><p>如果$key省略了，就用默认下标</p>\n</li>\n<li><p>下标只能是整型以及字符串</p>\n</li>\n<li><p>如果元素没有指定下标，会在最大整数下标的基础上加1.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr[] = $value</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果$arr数组不存在的话，会先创建数组，并添加第1个数组元素，第1个元素的下标为0</li>\n<li>如果$arr已经存在 的话，添加新的数组元素，新的数组元素的下标，是最大整数下标+1</li>\n</ul>\n</li>\n<li><p>创建混合数组：</p>\n<ul>\n<li><p>由语法1，2混合创建数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr[] = <span class=\"number\">12</span>;</span><br><span class=\"line\">$arr[] = <span class=\"number\">13</span>;</span><br><span class=\"line\">$arr[<span class=\"string\">\"a\"</span>] =<span class=\"number\">14</span>;</span><br><span class=\"line\">$arr[] = <span class=\"number\">15</span>;</span><br><span class=\"line\">$arr[<span class=\"number\">20</span>] = <span class=\"number\">16</span>;</span><br><span class=\"line\">$arr[] = <span class=\"number\">19</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h3><ul>\n<li><p>多维数组，即数组中的元素又是一个数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">array</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">array</span>(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>),</span><br><span class=\"line\">\t<span class=\"string\">\"abc\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"数组中的函数\"><a href=\"#数组中的函数\" class=\"headerlink\" title=\"数组中的函数\"></a>数组中的函数</h3><ul>\n<li>count()<ul>\n<li>计算数组中的单元数目或对象中的属性个数</li>\n<li>语法：int count ( mixed $var [,\\$mode = COUNT_NORMAL ] )</li>\n<li>参数：<ul>\n<li>$var 是对象或者数组</li>\n<li>$model:  如果可选的 mode 参数设为      COUNT_RECURSIVE（或 1），count()      将递归地对数组计数。对计算多维数组的所有单元尤其有用。mode      的默认值是 0。count()识别不了无限递归</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>unset()<ul>\n<li>删除变量或数组元素</li>\n<li>语法：void unset ( mixed $var [, mixed $… ] )</li>\n<li>删除元素后，仅仅只是相当于将数据从数组中移除掉了，对数组的下标没有影响</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h3><ul>\n<li>使用for加next()遍历数组   此方法比较麻烦</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; count($arr); $i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> key($arr).current($arr).<span class=\"string\">\"&lt;br/&gt;\"</span></span><br><span class=\"line\">\tnext($arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>key()：当前指针处元素的键名(下标)，不会移动指针</li>\n<li>current()：返回当前指针处元素的值，不会移动指针</li>\n<li>next(): 返回下一个元素的值，指针移动到下一个元素的开头</li>\n</ul>\n<h3 id=\"PHP中的数组传值时为值传递\"><a href=\"#PHP中的数组传值时为值传递\" class=\"headerlink\" title=\"PHP中的数组传值时为值传递\"></a>PHP中的数组传值时为值传递</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">$arr1 = $arr;</span><br><span class=\"line\">$arr1[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">0</span>];<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>函数是一段命名的代码段</li>\n<li>封装一代码，将来要执行时可以直接调用</li>\n</ul>\n<h3 id=\"定义函数的方式\"><a href=\"#定义函数的方式\" class=\"headerlink\" title=\"定义函数的方式\"></a>定义函数的方式</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    function 定义函数的关键字</span></span><br><span class=\"line\"><span class=\"comment\">    functionName 函数的名称</span></span><br><span class=\"line\"><span class=\"comment\">    arguments 形参列表</span></span><br><span class=\"line\"><span class=\"comment\">    retValue 返回值</span></span><br><span class=\"line\"><span class=\"comment\">    fnCode 功能代码</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span><span class=\"params\">(arguments)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// fnCode</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>function： 定义函数的关键字，不区分大小写</li>\n<li>functionName：函数名称，命名规则与变量一样，只是不需要加$符号</li>\n<li>小括号()：主要用来接受传递过来的参数</li>\n<li>arguments：定义函数时的参数，形参</li>\n<li>return 函数的返回值。</li>\n</ul>\n<h3 id=\"函数的调用：\"><a href=\"#函数的调用：\" class=\"headerlink\" title=\"函数的调用：\"></a>函数的调用：</h3><ul>\n<li>实参：调用函数时，传递的参数就是实参，含有真正数据的</li>\n<li>形参：定义函数时的参数</li>\n</ul>\n<ul>\n<li>案例：得到数组中所有数组的和</li>\n</ul>\n<h3 id=\"函数参数的传递：\"><a href=\"#函数参数的传递：\" class=\"headerlink\" title=\"函数参数的传递：\"></a>函数参数的传递：</h3><ul>\n<li>值传递<ul>\n<li>函数参数的值传递，就是将参数的值，复制一份，传到函数中</li>\n<li>值传递速度比较慢，但修改其中一个不会影响到另一个；</li>\n</ul>\n</li>\n<li>引用传递<ul>\n<li>引用传递速度比较快，但修改其中一个，另一个也会改变。</li>\n<li>引用传递，是将一个变量的地址，复制一份，传到函数中</li>\n</ul>\n</li>\n<li>默认参数<ul>\n<li>函数中有些参数可能是固定不变的，为了操作方便，可以用默认参数来代替</li>\n<li>默认参数必须放在非默认参数的右边</li>\n<li>默认参数的值，只能是：字符串、整型、浮点型、布尔型、NULL、数组</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showSelf</span><span class=\"params\">($name,$age=<span class=\"number\">19</span>,$gender=<span class=\"string\">\"男\"</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"我叫&#123;$name&#125;，今天&#123;$age&#125;,性别&#123;$ender&#125;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数可变数量参数\"><a href=\"#函数可变数量参数\" class=\"headerlink\" title=\"函数可变数量参数\"></a>函数可变数量参数</h3><ul>\n<li><p>func_get_args( void )：返回一个参数列表的枚举数组，参数数组的下标是从0开始的整数</p>\n</li>\n<li><p>func_get_arg( $index )：返回参数数组中，指定下标的参数的值；</p>\n</li>\n<li><p>func_num_args( void )：返回实参的个数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t$arr = func_get_args();</span><br><span class=\"line\">\t\t$len = func_num_args();</span><br><span class=\"line\">\t\t$sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tprint_r($arr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br/&gt;\"</span>;</span><br><span class=\"line\">\t\tprint_r($len);</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br/&gt;\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">\t\t\t$sum += func_get_arg($i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"$sum\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgetSum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h3><ul>\n<li>函数的返回值，通过return语句来实现；</li>\n<li>将函数的执行结果，返给了函数调用者；</li>\n<li>return语句一旦执行，函数立即结束，函数剩余的代码不再执行了。</li>\n<li>return语句有”中断”函数、”退出”函数；</li>\n<li>return不能同时返回多个值，只能返回一个值。如果想返回多个值，可以放入数组</li>\n</ul>\n<h2 id=\"常用系统函数\"><a href=\"#常用系统函数\" class=\"headerlink\" title=\"常用系统函数\"></a>常用系统函数</h2><h3 id=\"字符串-1\"><a href=\"#字符串-1\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><ul>\n<li>定义字符串基本语法<ul>\n<li>单引号字符串</li>\n<li>双引号字符串</li>\n<li>nowdoc字符串</li>\n<li>heredoc字符串</li>\n</ul>\n</li>\n<li>字符串常用api<ul>\n<li>strlen() 获取字符串长度</li>\n<li>substr() 返回字符串的子串</li>\n<li>strtoupper() 将字符串转化为大写</li>\n<li>strtolower() 将字符串转化为小写</li>\n<li>ucfirst() 将字符串的首字母转换为大写</li>\n<li>trim() 去除字符串首尾处的空白字符</li>\n<li>ltrim() 删除字符串开头的空白字符</li>\n<li>rtrim() 删除字符串末端的空白字符</li>\n<li>strrev() 反转字符串</li>\n<li>strpos() 查找字符串首次出现的位置，从左往右查找</li>\n<li>strrpos() 计算指定字符串在目标字符串中最后一次出现的位置，从右往左查找</li>\n<li>strchr()和strstr() 两者一样，用于查找字符串的首次出现</li>\n<li>str_replace() 子字符串替换</li>\n<li>str_repeat() 重复一个字符串</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h3><ul>\n<li>常用函数<ul>\n<li>max() 求最大值</li>\n<li>min() 求最小值</li>\n<li>rand() 产生一个随机整数</li>\n<li>mt_rand() 更高效的随机数</li>\n<li>ceil() 进一法取整</li>\n<li>floor() 舍去法取整</li>\n<li>round() 对浮点数进行四舍五入</li>\n<li>pow() 次方运算</li>\n<li>abs() 求绝对值</li>\n<li>sqrt() 开方运算</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h4><ul>\n<li>常用函数<ul>\n<li>time() 返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数</li>\n<li>date() 格式化一个本地时间/日期 </li>\n<li>microtime() 返回当前 Unix 时间戳和微秒数</li>\n<li>strtotime() 将任何英文文本的日期时间描述解析为 Unix 时间戳</li>\n</ul>\n</li>\n</ul>"},{"title":"Linux","date":"2017-04-16T11:33:00.000Z","summary_img":"http://p4z3kz4fz.bkt.clouddn.com/linux.jpg","_content":"​\t以前读书的时候做IC仿真调试，因为IC软件是装在linux系统环境，所以我们就在在基于RedHat操作系统上进行操作，那也是我第一次切切实实的使用Linux系统，界面的轻巧，文件夹设置等都给我留下了很深刻的印象。\n\n<!--more-->\n\n​\t后来我又因为自己和师傅的缘故，陆陆续续接触了centos、ubuntu等，也从那个时候接触到操作系统、服务器等皮毛知识。\n\n​\t一开始的时候，对于纯命令的操作是很不习惯的，后来接触到centos7并用xshell远程控制过一些服务器，才觉得很好用，那么久整理一下关于linux不错的资源网站吧。\n\n​\t*[菜鸟论坛](http://www.runoob.com/linux/linux-tutorial.html),适合基础入门学习。\n\n​\t*[Linux命令大全](http://man.linuxde.net/)，很全的查找命令的手册。\n\n​\t*[网易开源镜像站](http://mirrors.163.com/)，各种系统资源均可以找到，此外还有各大高校的镜像资源站，华农的镜像资源也比较齐全。\n\n\n\n​\t","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux\ndate: 2017-4-16 19:33\ntags: Linux\ncategories: 随笔\nsummary_img: http://p4z3kz4fz.bkt.clouddn.com/linux.jpg\n---\n​\t以前读书的时候做IC仿真调试，因为IC软件是装在linux系统环境，所以我们就在在基于RedHat操作系统上进行操作，那也是我第一次切切实实的使用Linux系统，界面的轻巧，文件夹设置等都给我留下了很深刻的印象。\n\n<!--more-->\n\n​\t后来我又因为自己和师傅的缘故，陆陆续续接触了centos、ubuntu等，也从那个时候接触到操作系统、服务器等皮毛知识。\n\n​\t一开始的时候，对于纯命令的操作是很不习惯的，后来接触到centos7并用xshell远程控制过一些服务器，才觉得很好用，那么久整理一下关于linux不错的资源网站吧。\n\n​\t*[菜鸟论坛](http://www.runoob.com/linux/linux-tutorial.html),适合基础入门学习。\n\n​\t*[Linux命令大全](http://man.linuxde.net/)，很全的查找命令的手册。\n\n​\t*[网易开源镜像站](http://mirrors.163.com/)，各种系统资源均可以找到，此外还有各大高校的镜像资源站，华农的镜像资源也比较齐全。\n\n\n\n​\t","slug":"Linux常用命令","published":1,"updated":"2018-03-07T04:00:00.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc10000bskrxdx8lfszj","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><p>​    以前读书的时候做IC仿真调试，因为IC软件是装在linux系统环境，所以我们就在在基于RedHat操作系统上进行操作，那也是我第一次切切实实的使用Linux系统，界面的轻巧，文件夹设置等都给我留下了很深刻的印象。</p>\n<a id=\"more\"></a>\n<p>​    后来我又因为自己和师傅的缘故，陆陆续续接触了centos、ubuntu等，也从那个时候接触到操作系统、服务器等皮毛知识。</p>\n<p>​    一开始的时候，对于纯命令的操作是很不习惯的，后来接触到centos7并用xshell远程控制过一些服务器，才觉得很好用，那么久整理一下关于linux不错的资源网站吧。</p>\n<p>​    *<a href=\"http://www.runoob.com/linux/linux-tutorial.html\" target=\"_blank\" rel=\"noopener\">菜鸟论坛</a>,适合基础入门学习。</p>\n<p>​    *<a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">Linux命令大全</a>，很全的查找命令的手册。</p>\n<p>​    *<a href=\"http://mirrors.163.com/\" target=\"_blank\" rel=\"noopener\">网易开源镜像站</a>，各种系统资源均可以找到，此外还有各大高校的镜像资源站，华农的镜像资源也比较齐全。</p>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"<p>​    以前读书的时候做IC仿真调试，因为IC软件是装在linux系统环境，所以我们就在在基于RedHat操作系统上进行操作，那也是我第一次切切实实的使用Linux系统，界面的轻巧，文件夹设置等都给我留下了很深刻的印象。</p>","more":"<p>​    后来我又因为自己和师傅的缘故，陆陆续续接触了centos、ubuntu等，也从那个时候接触到操作系统、服务器等皮毛知识。</p>\n<p>​    一开始的时候，对于纯命令的操作是很不习惯的，后来接触到centos7并用xshell远程控制过一些服务器，才觉得很好用，那么久整理一下关于linux不错的资源网站吧。</p>\n<p>​    *<a href=\"http://www.runoob.com/linux/linux-tutorial.html\" target=\"_blank\" rel=\"noopener\">菜鸟论坛</a>,适合基础入门学习。</p>\n<p>​    *<a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">Linux命令大全</a>，很全的查找命令的手册。</p>\n<p>​    *<a href=\"http://mirrors.163.com/\" target=\"_blank\" rel=\"noopener\">网易开源镜像站</a>，各种系统资源均可以找到，此外还有各大高校的镜像资源站，华农的镜像资源也比较齐全。</p>\n<p>​    </p>"},{"title":"console命令详解","date":"2017-06-03T08:11:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/H5.jpg","_content":"熟悉前端的不会对console和alert陌生，两者在调试的时候可谓是法宝级别的工具，但是关于console，其实远远不止于console.log这一个简单的命令，它能做的事情有很多，那么让我们慢慢了解一下，它有哪些功能吧。\n\n<!--more-->\n\n### 一、显示信息的命令\n\n​\t最常用的就是console.log，查看效果的方法：如果是Chrome浏览器，就打开“开发者工具”，按快捷键“Ctrl+F12”，或者右键点击页面，选择“检查”菜单。然后在“Console”面板可以查看输出结果。\n\n​        \t![p1](http://hovertree.com/hvtimg/bjafaa/ba2y5r8i.png)\n\n​\t如果是火狐浏览器的话，按组合键“Ctrl+Shift+K”可以打开“网页控制台”。\n\n![p2](http://hovertree.com/hvtimg/bjafaa/vi8de0vc.png)\n\n​\t示例代码：\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>常用console命令之显示信息_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>常用console命令之显示信息，请查看浏览器的console面板。\n\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nconsole.log('hello hovertree');\nconsole.info('信息 何问起');\nconsole.error('错误');\nconsole.warn('警告');\n</script>\n</body>\n</html>\n\n```\n\n### 二：占位符\n\n​\tconsole上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）\n\n​\t代码如图：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>console命令之占位符何问起</title><base target=\"blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>console命令之占位符 说明\n首页</div>\n<script type=\"text/javascript\">\nconsole.log(\"%d年%d月%d日\",2016,11,11);\n</script>\n</body>\n</html>\n```\n\n​\t效果如图：\n\n![p3](http://hovertree.com/hvtimg/bjafaa/ni4dheny.png)\n\n### 三、信息分组\n\n​\t示例代码：\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>常用console命令_何问起</title><base target=\"_blank\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>常用console命令之信息分组\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nconsole.group(\"第一组信息\");\nconsole.log(\"第一组第一条:何问起(http://hovertree.com)\");\nconsole.log(\"第一组第二条:柯乐义(http://keleyi.com)\");\nconsole.groupEnd();\nconsole.group(\"第二组信息\");\nconsole.log(\"第二组第一条:HoverClock 一个jQuery时钟插件\");\nconsole.log(\"第二组第二条:欢迎使用\");\nconsole.groupEnd();\n</script>\n</body>\n</html>\n```\n\n​\t效果如图：\n\n​\t![p4](http://hovertree.com/hvtimg/bjafaa/s8l7eslm.png)\n\n### 四、查看对象的信息\n\n​\tconsole.dir()可以显示一个对象所有的属性和方法。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<title>用console.dir方法查看对象信息_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>\n用console.dir方法查看对象信息\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nvar info = {\nblog:\"http://hovertree.com\",\n时钟插件:\"HoverClock\",\nmessage:\"欢迎使用！\"\n};\nconsole.dir(info);\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n​\t![p5](http://hovertree.com/hvtimg/bjafaa/hdal6y82.png)\n\n### 五、显示某个节点的内容\n\n​\tconsole.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>常用console命令_何问起</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><base target=\"_blank\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>\nconsole.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<div id=\"info\">\n<h3>我的博客：hovertree.com</h3>\n<p>HoverTreeImg插件,欢迎使用</p>\n</div>\n<script type=\"text/javascript\">\nvar info = document.getElementById('info');\nconsole.dirxml(info);\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n![p6](http://hovertree.com/hvtimg/bjafaa/s54ts251.png)\n\n### 六、判断变量是否是真\n\n​\tconsole.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>console.assert使用_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>\nconsole.assert方法的使用\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nvar result = 1;\nconsole.assert( result );\nvar year = 2014;\nconsole.assert(year == 2018 );\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n![p7](http://hovertree.com/hvtimg/bjafaa/ck69uec4.png)\n\n### 七、追踪函数的调用轨迹。\n\n​\tconsole.trace()用来追踪函数的调用轨迹。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>追踪函数的调用轨迹_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>javascript中console.trace()方法示例\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a></div>\n<script type=\"text/javascript\">\n/*函数是如何被调用的，在其中加入console.trace()方法就可以了 -- 何问起*/\nfunction add(a,b){\nconsole.trace();\nreturn a+b;\n}\nvar x = add3(1,1);\nfunction add3(a,b){return add2(a,b);}\nfunction add2(a,b){return add1(a,b);}\nfunction add1(a,b){return add(a,b);}\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n![p8](http://hovertree.com/hvtimg/bjafaa/7rvtay5j.png)\n\n### 八、计时功能\n\n​\tconsole.time()和console.timeEnd()，用来显示代码的运行时间。\n\n​\t示例代码：\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>显示代码的运行时间_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n</head>\n<body>\n<div>console.time()和console.timeEnd()，用来显示代码的运行时间。\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a></div>\n<script type=\"text/javascript\">\nconsole.time(\"控制台计时器一\");\nfor(var i=0;i<10000;i++){\nfor(var j=0;j<1000;j++){}\n}\nconsole.timeEnd(\"控制台计时器一\");\n</script>\n</body>\n</html>\n```\n\n\n\n​\t效果图：\n\n![p9](http://hovertree.com/hvtimg/bjafaa/qqd99k71.png)\n\n\n\n本文转载自[云栖社区](https://yq.aliyun.com/articles/68438)","source":"_posts/console命令详解.md","raw":"---\ntitle: console命令详解\ndate: 2017-6-03 16:11\ntags: console\ncategories: 工具\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/H5.jpg\n---\n熟悉前端的不会对console和alert陌生，两者在调试的时候可谓是法宝级别的工具，但是关于console，其实远远不止于console.log这一个简单的命令，它能做的事情有很多，那么让我们慢慢了解一下，它有哪些功能吧。\n\n<!--more-->\n\n### 一、显示信息的命令\n\n​\t最常用的就是console.log，查看效果的方法：如果是Chrome浏览器，就打开“开发者工具”，按快捷键“Ctrl+F12”，或者右键点击页面，选择“检查”菜单。然后在“Console”面板可以查看输出结果。\n\n​        \t![p1](http://hovertree.com/hvtimg/bjafaa/ba2y5r8i.png)\n\n​\t如果是火狐浏览器的话，按组合键“Ctrl+Shift+K”可以打开“网页控制台”。\n\n![p2](http://hovertree.com/hvtimg/bjafaa/vi8de0vc.png)\n\n​\t示例代码：\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>常用console命令之显示信息_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>常用console命令之显示信息，请查看浏览器的console面板。\n\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nconsole.log('hello hovertree');\nconsole.info('信息 何问起');\nconsole.error('错误');\nconsole.warn('警告');\n</script>\n</body>\n</html>\n\n```\n\n### 二：占位符\n\n​\tconsole上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）\n\n​\t代码如图：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>console命令之占位符何问起</title><base target=\"blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>console命令之占位符 说明\n首页</div>\n<script type=\"text/javascript\">\nconsole.log(\"%d年%d月%d日\",2016,11,11);\n</script>\n</body>\n</html>\n```\n\n​\t效果如图：\n\n![p3](http://hovertree.com/hvtimg/bjafaa/ni4dheny.png)\n\n### 三、信息分组\n\n​\t示例代码：\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>常用console命令_何问起</title><base target=\"_blank\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>常用console命令之信息分组\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nconsole.group(\"第一组信息\");\nconsole.log(\"第一组第一条:何问起(http://hovertree.com)\");\nconsole.log(\"第一组第二条:柯乐义(http://keleyi.com)\");\nconsole.groupEnd();\nconsole.group(\"第二组信息\");\nconsole.log(\"第二组第一条:HoverClock 一个jQuery时钟插件\");\nconsole.log(\"第二组第二条:欢迎使用\");\nconsole.groupEnd();\n</script>\n</body>\n</html>\n```\n\n​\t效果如图：\n\n​\t![p4](http://hovertree.com/hvtimg/bjafaa/s8l7eslm.png)\n\n### 四、查看对象的信息\n\n​\tconsole.dir()可以显示一个对象所有的属性和方法。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<title>用console.dir方法查看对象信息_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>\n用console.dir方法查看对象信息\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nvar info = {\nblog:\"http://hovertree.com\",\n时钟插件:\"HoverClock\",\nmessage:\"欢迎使用！\"\n};\nconsole.dir(info);\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n​\t![p5](http://hovertree.com/hvtimg/bjafaa/hdal6y82.png)\n\n### 五、显示某个节点的内容\n\n​\tconsole.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>常用console命令_何问起</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><base target=\"_blank\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>\nconsole.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<div id=\"info\">\n<h3>我的博客：hovertree.com</h3>\n<p>HoverTreeImg插件,欢迎使用</p>\n</div>\n<script type=\"text/javascript\">\nvar info = document.getElementById('info');\nconsole.dirxml(info);\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n![p6](http://hovertree.com/hvtimg/bjafaa/s54ts251.png)\n\n### 六、判断变量是否是真\n\n​\tconsole.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>console.assert使用_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>\nconsole.assert方法的使用\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a>\n</div>\n<script type=\"text/javascript\">\nvar result = 1;\nconsole.assert( result );\nvar year = 2014;\nconsole.assert(year == 2018 );\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n![p7](http://hovertree.com/hvtimg/bjafaa/ck69uec4.png)\n\n### 七、追踪函数的调用轨迹。\n\n​\tconsole.trace()用来追踪函数的调用轨迹。\n\n​\t示例代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>追踪函数的调用轨迹_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n<style>a{color:blue;}</style>\n</head>\n<body>\n<div>javascript中console.trace()方法示例\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a></div>\n<script type=\"text/javascript\">\n/*函数是如何被调用的，在其中加入console.trace()方法就可以了 -- 何问起*/\nfunction add(a,b){\nconsole.trace();\nreturn a+b;\n}\nvar x = add3(1,1);\nfunction add3(a,b){return add2(a,b);}\nfunction add2(a,b){return add1(a,b);}\nfunction add1(a,b){return add(a,b);}\n</script>\n</body>\n</html>\n```\n\n​\t效果图：\n\n![p8](http://hovertree.com/hvtimg/bjafaa/7rvtay5j.png)\n\n### 八、计时功能\n\n​\tconsole.time()和console.timeEnd()，用来显示代码的运行时间。\n\n​\t示例代码：\n\n```HTML\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>显示代码的运行时间_何问起</title><base target=\"_blank\" />\n<meta charset=\"utf-8\" />\n</head>\n<body>\n<div>console.time()和console.timeEnd()，用来显示代码的运行时间。\n<a href=\"http://hovertree.com/h/bjaf/gk6698g3.htm\">说明</a>\n<a href=\"http://hovertree.com\">首页</a></div>\n<script type=\"text/javascript\">\nconsole.time(\"控制台计时器一\");\nfor(var i=0;i<10000;i++){\nfor(var j=0;j<1000;j++){}\n}\nconsole.timeEnd(\"控制台计时器一\");\n</script>\n</body>\n</html>\n```\n\n\n\n​\t效果图：\n\n![p9](http://hovertree.com/hvtimg/bjafaa/qqd99k71.png)\n\n\n\n本文转载自[云栖社区](https://yq.aliyun.com/articles/68438)","slug":"console命令详解","published":1,"updated":"2018-03-06T22:21:12.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc19000gskrx5idjva20","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><p>熟悉前端的不会对console和alert陌生，两者在调试的时候可谓是法宝级别的工具，但是关于console，其实远远不止于console.log这一个简单的命令，它能做的事情有很多，那么让我们慢慢了解一下，它有哪些功能吧。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、显示信息的命令\"><a href=\"#一、显示信息的命令\" class=\"headerlink\" title=\"一、显示信息的命令\"></a>一、显示信息的命令</h3><p>​    最常用的就是console.log，查看效果的方法：如果是Chrome浏览器，就打开“开发者工具”，按快捷键“Ctrl+F12”，或者右键点击页面，选择“检查”菜单。然后在“Console”面板可以查看输出结果。</p>\n<p>​            <img src=\"http://hovertree.com/hvtimg/bjafaa/ba2y5r8i.png\" alt=\"p1\"></p>\n<p>​    如果是火狐浏览器的话，按组合键“Ctrl+Shift+K”可以打开“网页控制台”。</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/vi8de0vc.png\" alt=\"p2\"></p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用console命令之显示信息_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>常用console命令之显示信息，请查看浏览器的console面板。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.log('hello hovertree');</span></span><br><span class=\"line\"><span class=\"undefined\">console.info('信息 何问起');</span></span><br><span class=\"line\"><span class=\"undefined\">console.error('错误');</span></span><br><span class=\"line\"><span class=\"undefined\">console.warn('警告');</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二：占位符\"><a href=\"#二：占位符\" class=\"headerlink\" title=\"二：占位符\"></a>二：占位符</h3><p>​    console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）</p>\n<p>​    代码如图：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>console命令之占位符何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>console命令之占位符 说明</span><br><span class=\"line\">首页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"%d年%d月%d日\",2016,11,11);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果如图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/ni4dheny.png\" alt=\"p3\"></p>\n<h3 id=\"三、信息分组\"><a href=\"#三、信息分组\" class=\"headerlink\" title=\"三、信息分组\"></a>三、信息分组</h3><p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用console命令_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>常用console命令之信息分组</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.group(\"第一组信息\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第一组第一条:何问起(http://hovertree.com)\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第一组第二条:柯乐义(http://keleyi.com)\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.groupEnd();</span></span><br><span class=\"line\"><span class=\"undefined\">console.group(\"第二组信息\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第二组第一条:HoverClock 一个jQuery时钟插件\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第二组第二条:欢迎使用\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.groupEnd();</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果如图：</p>\n<p>​    <img src=\"http://hovertree.com/hvtimg/bjafaa/s8l7eslm.png\" alt=\"p4\"></p>\n<h3 id=\"四、查看对象的信息\"><a href=\"#四、查看对象的信息\" class=\"headerlink\" title=\"四、查看对象的信息\"></a>四、查看对象的信息</h3><p>​    console.dir()可以显示一个对象所有的属性和方法。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>用console.dir方法查看对象信息_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">用console.dir方法查看对象信息</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var info = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">blog:\"http://hovertree.com\",</span></span><br><span class=\"line\"><span class=\"undefined\">时钟插件:\"HoverClock\",</span></span><br><span class=\"line\"><span class=\"undefined\">message:\"欢迎使用！\"</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">console.dir(info);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p>​    <img src=\"http://hovertree.com/hvtimg/bjafaa/hdal6y82.png\" alt=\"p5\"></p>\n<h3 id=\"五、显示某个节点的内容\"><a href=\"#五、显示某个节点的内容\" class=\"headerlink\" title=\"五、显示某个节点的内容\"></a>五、显示某个节点的内容</h3><p>​    console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用console命令_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我的博客：hovertree.com<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>HoverTreeImg插件,欢迎使用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var info = document.getElementById('info');</span></span><br><span class=\"line\"><span class=\"undefined\">console.dirxml(info);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/s54ts251.png\" alt=\"p6\"></p>\n<h3 id=\"六、判断变量是否是真\"><a href=\"#六、判断变量是否是真\" class=\"headerlink\" title=\"六、判断变量是否是真\"></a>六、判断变量是否是真</h3><p>​    console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>console.assert使用_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">console.assert方法的使用</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var result = 1;</span></span><br><span class=\"line\"><span class=\"undefined\">console.assert( result );</span></span><br><span class=\"line\"><span class=\"undefined\">var year = 2014;</span></span><br><span class=\"line\"><span class=\"undefined\">console.assert(year == 2018 );</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/ck69uec4.png\" alt=\"p7\"></p>\n<h3 id=\"七、追踪函数的调用轨迹。\"><a href=\"#七、追踪函数的调用轨迹。\" class=\"headerlink\" title=\"七、追踪函数的调用轨迹。\"></a>七、追踪函数的调用轨迹。</h3><p>​    console.trace()用来追踪函数的调用轨迹。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>追踪函数的调用轨迹_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>javascript中console.trace()方法示例</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">/*函数是如何被调用的，在其中加入console.trace()方法就可以了 -- 何问起*/</span></span><br><span class=\"line\"><span class=\"undefined\">function add(a,b)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">console.trace();</span></span><br><span class=\"line\"><span class=\"undefined\">return a+b;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">var x = add3(1,1);</span></span><br><span class=\"line\"><span class=\"undefined\">function add3(a,b)&#123;return add2(a,b);&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">function add2(a,b)&#123;return add1(a,b);&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">function add1(a,b)&#123;return add(a,b);&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/7rvtay5j.png\" alt=\"p8\"></p>\n<h3 id=\"八、计时功能\"><a href=\"#八、计时功能\" class=\"headerlink\" title=\"八、计时功能\"></a>八、计时功能</h3><p>​    console.time()和console.timeEnd()，用来显示代码的运行时间。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>显示代码的运行时间_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>console.time()和console.timeEnd()，用来显示代码的运行时间。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.time(\"控制台计时器一\");</span></span><br><span class=\"line\"><span class=\"undefined\">for(var i=0;i&lt;10000;i++)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">for(var j=0;j&lt;1000;j++)&#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">console.timeEnd(\"控制台计时器一\");</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/qqd99k71.png\" alt=\"p9\"></p>\n<p>本文转载自<a href=\"https://yq.aliyun.com/articles/68438\" target=\"_blank\" rel=\"noopener\">云栖社区</a></p>\n","site":{"data":{}},"excerpt":"<p>熟悉前端的不会对console和alert陌生，两者在调试的时候可谓是法宝级别的工具，但是关于console，其实远远不止于console.log这一个简单的命令，它能做的事情有很多，那么让我们慢慢了解一下，它有哪些功能吧。</p>","more":"<h3 id=\"一、显示信息的命令\"><a href=\"#一、显示信息的命令\" class=\"headerlink\" title=\"一、显示信息的命令\"></a>一、显示信息的命令</h3><p>​    最常用的就是console.log，查看效果的方法：如果是Chrome浏览器，就打开“开发者工具”，按快捷键“Ctrl+F12”，或者右键点击页面，选择“检查”菜单。然后在“Console”面板可以查看输出结果。</p>\n<p>​            <img src=\"http://hovertree.com/hvtimg/bjafaa/ba2y5r8i.png\" alt=\"p1\"></p>\n<p>​    如果是火狐浏览器的话，按组合键“Ctrl+Shift+K”可以打开“网页控制台”。</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/vi8de0vc.png\" alt=\"p2\"></p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用console命令之显示信息_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>常用console命令之显示信息，请查看浏览器的console面板。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.log('hello hovertree');</span></span><br><span class=\"line\"><span class=\"undefined\">console.info('信息 何问起');</span></span><br><span class=\"line\"><span class=\"undefined\">console.error('错误');</span></span><br><span class=\"line\"><span class=\"undefined\">console.warn('警告');</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二：占位符\"><a href=\"#二：占位符\" class=\"headerlink\" title=\"二：占位符\"></a>二：占位符</h3><p>​    console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）</p>\n<p>​    代码如图：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>console命令之占位符何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>console命令之占位符 说明</span><br><span class=\"line\">首页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"%d年%d月%d日\",2016,11,11);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果如图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/ni4dheny.png\" alt=\"p3\"></p>\n<h3 id=\"三、信息分组\"><a href=\"#三、信息分组\" class=\"headerlink\" title=\"三、信息分组\"></a>三、信息分组</h3><p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用console命令_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>常用console命令之信息分组</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.group(\"第一组信息\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第一组第一条:何问起(http://hovertree.com)\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第一组第二条:柯乐义(http://keleyi.com)\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.groupEnd();</span></span><br><span class=\"line\"><span class=\"undefined\">console.group(\"第二组信息\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第二组第一条:HoverClock 一个jQuery时钟插件\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.log(\"第二组第二条:欢迎使用\");</span></span><br><span class=\"line\"><span class=\"undefined\">console.groupEnd();</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果如图：</p>\n<p>​    <img src=\"http://hovertree.com/hvtimg/bjafaa/s8l7eslm.png\" alt=\"p4\"></p>\n<h3 id=\"四、查看对象的信息\"><a href=\"#四、查看对象的信息\" class=\"headerlink\" title=\"四、查看对象的信息\"></a>四、查看对象的信息</h3><p>​    console.dir()可以显示一个对象所有的属性和方法。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>用console.dir方法查看对象信息_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">用console.dir方法查看对象信息</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var info = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">blog:\"http://hovertree.com\",</span></span><br><span class=\"line\"><span class=\"undefined\">时钟插件:\"HoverClock\",</span></span><br><span class=\"line\"><span class=\"undefined\">message:\"欢迎使用！\"</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">console.dir(info);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p>​    <img src=\"http://hovertree.com/hvtimg/bjafaa/hdal6y82.png\" alt=\"p5\"></p>\n<h3 id=\"五、显示某个节点的内容\"><a href=\"#五、显示某个节点的内容\" class=\"headerlink\" title=\"五、显示某个节点的内容\"></a>五、显示某个节点的内容</h3><p>​    console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用console命令_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我的博客：hovertree.com<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>HoverTreeImg插件,欢迎使用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var info = document.getElementById('info');</span></span><br><span class=\"line\"><span class=\"undefined\">console.dirxml(info);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/s54ts251.png\" alt=\"p6\"></p>\n<h3 id=\"六、判断变量是否是真\"><a href=\"#六、判断变量是否是真\" class=\"headerlink\" title=\"六、判断变量是否是真\"></a>六、判断变量是否是真</h3><p>​    console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>console.assert使用_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">console.assert方法的使用</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">var result = 1;</span></span><br><span class=\"line\"><span class=\"undefined\">console.assert( result );</span></span><br><span class=\"line\"><span class=\"undefined\">var year = 2014;</span></span><br><span class=\"line\"><span class=\"undefined\">console.assert(year == 2018 );</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/ck69uec4.png\" alt=\"p7\"></p>\n<h3 id=\"七、追踪函数的调用轨迹。\"><a href=\"#七、追踪函数的调用轨迹。\" class=\"headerlink\" title=\"七、追踪函数的调用轨迹。\"></a>七、追踪函数的调用轨迹。</h3><p>​    console.trace()用来追踪函数的调用轨迹。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>追踪函数的调用轨迹_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">color</span>:blue;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>javascript中console.trace()方法示例</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">/*函数是如何被调用的，在其中加入console.trace()方法就可以了 -- 何问起*/</span></span><br><span class=\"line\"><span class=\"undefined\">function add(a,b)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">console.trace();</span></span><br><span class=\"line\"><span class=\"undefined\">return a+b;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">var x = add3(1,1);</span></span><br><span class=\"line\"><span class=\"undefined\">function add3(a,b)&#123;return add2(a,b);&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">function add2(a,b)&#123;return add1(a,b);&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">function add1(a,b)&#123;return add(a,b);&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/7rvtay5j.png\" alt=\"p8\"></p>\n<h3 id=\"八、计时功能\"><a href=\"#八、计时功能\" class=\"headerlink\" title=\"八、计时功能\"></a>八、计时功能</h3><p>​    console.time()和console.timeEnd()，用来显示代码的运行时间。</p>\n<p>​    示例代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>显示代码的运行时间_何问起<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>console.time()和console.timeEnd()，用来显示代码的运行时间。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com/h/bjaf/gk6698g3.htm\"</span>&gt;</span>说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://hovertree.com\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">console.time(\"控制台计时器一\");</span></span><br><span class=\"line\"><span class=\"undefined\">for(var i=0;i&lt;10000;i++)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">for(var j=0;j&lt;1000;j++)&#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">console.timeEnd(\"控制台计时器一\");</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​    效果图：</p>\n<p><img src=\"http://hovertree.com/hvtimg/bjafaa/qqd99k71.png\" alt=\"p9\"></p>\n<p>本文转载自<a href=\"https://yq.aliyun.com/articles/68438\" target=\"_blank\" rel=\"noopener\">云栖社区</a></p>"},{"title":"canvas","date":"2018-02-14T20:54:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/canvas.gif","_content":"# canvas\n\n## canvas画线条基本步骤\n\n1. 编写canvas标签\n\n   ```javascript\n   <canvas>/<canvas>\n   ```\n\n2. 获取canvas的dom元素\n\n   ```javascript\n   var cas=document.querySelector(\"canvas\");\n   ```\n\n3. 获取canvas的上下文对象(画笔)\n\n   ```javascript\n   var ctx=cas.getContext(\"2d\");\n   ```\n   <!--more-->\n\n4. 设置起点\n\n   ```javascript\n   ctx.moveTo(x,y);\n   ```\n\n5. 设置终点\n\n   ```javascript\n   ctx.lineTo(x,y);\n   ```\n\n6. 描边(连线)\n\n   ```javascript\n   ctx.stroke();\n   ```\n\n   ​\n\n## 设置canvas的宽度和高度\n\n1. 在css中直接设置宽度和高度 其实是拉伸\n2. 在标签中通过属性的方式写宽度和高度(不叫做行内!!! )\n\n## 注意点\n\n1. 如果不写moveTo的话 那么lineTo 既是终点也是起点\n\n2. 首尾相连:  \n\n   1. 手动写lineTo\n   2. ctx.closePath();\n\n3. h5新标签\n\n   1. color标签 一般结合 onchange一起使用\n\n      ```html\n      <input type=\"color\" />\n      ```\n\n      > <input type=\"color\" />\n\n   2. number标签\n\n      1. min 最小值\n      2. max 最大值\n      3. value 当前的值\n      4. step 步长\n\n      ```html\n      <input type=\"number\" min=0 max=10 value=0 step=1 >\n      ```\n\n      > <input type=\"number\">\n\n4. 操作数组的4个方法\n\n   1. **原数组 arr=[a,b,c,d,e];**\n\n   2. push 往屁股添加一个值 返回数组的长度  如: \n\n      > 6= arr.push(f)  arr= [a, b, c, d,e,f];\n\n   3. pop   从屁股移除一个值 返回被删除的值 如: \n\n      > e= arr.pop()   arr=[a,b,c,d];\n\n   4. unshift 从头部添加一个值 返回数组的长度如:\n\n      > 6= arr.unshift(f)  arr=[f,a,b,c,d,e];\n\n   5. shift 从头部删除一个值 返回被删除的值 如:\n\n      > a= arr.shift()  arr=[b,c,d,e];\n\n5. eval 方法 可以把字符串变成代码执行  不要在工作里面出现 \n\n## stroke和fill\n\n1. stroke 描边-对在同一条路径上的图形进行描边(封闭和不封闭)\n2. fill 填充 对同一条路径上的**用线条画(不能填充strokeRect()的矩形)**的封闭图形进行填充\n\n## 路径\n\n1. 路径也是图形\n2. 判断两个图形是否在同一条路径上 不能够靠视觉上的首尾相连来判断\n3. 而是看有没有调用 ctx.beginPath();\n4. 一般在画新图形之前,最好要 开启一条新的路径 \n\n## 线条属性\n\n1. 颜色\n\n   > ctx.strokeStyle=\"red\";\n   >\n   > ctx.fillStyle=\"red\";\n\n2. 宽度\n\n   > ctx.lineWidth=10;\n\n3. 线段末端类型\n\n   1. miter 默认\n   2. round 突出圆角\n   3. square 突出矩形\n   4. ctx.lineCap=\"miter\";\n\n4. 线段相交点的类型\n\n   1. butt 屁股 默认值\n   2. round 圆角\n   3. bevel 平切\n   4. ctx.lineJoin=\"butt\";\n\n5. 虚线\n\n   1. setLineDash([实线的长度,实线的间隙的长度......])  设置虚线\n   2. getLineDash() 获取虚线\n   3. lineDashOffset=1 设置虚线的偏移值\n\n## 内置画矩形和擦除\n\n1. 画矩形 stokeRect(x,y,width.height)\n2. 填充矩形 fillRect(x,y,width,height)\n3. 擦除 clearRect(x,y,width,height)\n\n## 内置画圆弧\n\n1. 360 度=PI*2   \n2. return  Math.PI/180* num\n3. ctx.arc(圆心x,圆心y,半径,开始的**弧度**,结束的**弧度**,?是否反向)\n\n## 内置 画图片\n\n### 步骤:\n\n```javascript\nvar img=new Image();\nimg.src=\"路径\";\nimg.onload=function(){\n  ctx.drawImage()......\n}\n```\n\n### 方法解释\n\n1. 3个参数  drawImage(图片对象,画在画布的x,画在画布的y);\n2. 5个参数  drawImage(图片对象,画在画布的x,画在画布的y,画多宽,画多高);\n3. 9个参数 drawImage(图片对象, 原图的x,原图的y,原图的宽,原图的高, 画在画布的x,画在画布的y,画多宽,画多高);\n\n## 渐变\n\n决定渐变图案的因素\n\n1. 颜色\n2. 方向\n3. 长度\n\n代码:\n\n```javascript\nvar g=ctx.creatLinearGradient(开始的坐标x,y,结束的坐标x,y);\ng.addColorStop(0,\"red\");\ng.addColorStop(1,\"black\");\nctx.strokeStyle=g;\nctx.fillStyle=g;\nctx.fillRect(0,0,50,50);\n```\n\n## 文字\n\nctx.strokeText(\"文本\",x,y);\n\nctx.fillText(\"文本\",x,y);\n\nctx.font=\"50px 宋体\"\n\n> font的设置和在css中的设置一样\n\n## 阴影\n\nctx.shadowBlur  模糊值\n\nctx.shadowColor 颜色\n\nctx.shadowOffsetX x 偏移\n\nctx.shadowOffsetY y 偏移\n\n```javascript\n  ctx.shadowBlur=10;\n  ctx.shadowColor=\"red\";\n  ctx.shadowOffsetX=10;\n  ctx.shadowOffsetY=10;\n```\n\n## canvas中的转换\n\n### 移动\n\n#### css3中的移动和canvas中的移动的区别\n\n##### css3中的移动\n\n1. 移动的是自身的dom元素\n2. 移动的值 是覆盖的 先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(200px)\n3. 移动的单位 一个 百分比 %  一个是像素 px \n\n##### canvas中的移动\n\n1. 移动的是坐标系\n\n2. 移动的值是叠加的  先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(300px)\n\n3. 单位  不用写单位\n\n   ```\n   ctx.translate(1,1)\n   ```\n\n### 旋转\n\n#### css3中的旋转和canvas中的旋转的区别\n\n##### css3中的旋转\n\n1. 旋转的自身的dom元素\n2. 旋转的值 是覆盖的 \n3. 单位 是  角度\n4. 旋转的中心点 是元素的中心 center center\n\n##### canvas中的旋转\n\n1. 旋转的是坐标系\n2. 旋转的值 是叠加的\n3. 单位 是 弧度!!!! \n4. 旋转的中心点是坐标系的圆点 0 0 \n\n```\n ctx.rotate(degToArc(10));\n```\n\n## 环境\n\n环境 值 坐标系和线条属性 \n\n### 保存和还原\n\n保存的是 坐标系 和 线条属性\n\n还原的是 坐标系 和 线条属性\n\n保存了几次 就可以还原几次 \n\n```\nctx.save()\nctx.restore();\n```\n\n### 擦除和重置\n\n#### 擦除\n\nctx.clearRect(**0,0**,100,100)   有时候 坐标系改变了的话 再使用擦除这个代码  坐标不一定是 **0   0**  \n\n不能擦除坐标系  不能擦除线条属性(颜色 大小 虚线 末端  相交🍌)\n\n#### 重置\n\ncas.width=cas.width  \n\n可以擦除画图的图案  可以重置坐标系  可以重置线条属性  \n\n## 下载\n\n### 标签实现\n\n```html\n<a href=\"资源路径\" download=\"资源名字(可以随便写)\" ></a>\n```\n\n### 代码实现\n\n```\n// 1 创建a标签\nvar aDom=document.createElement(\"a\");\n// 2 指定 href\naDom.href=\"资源路径\";\n// 3 设置download属性\naDom.download=\"五年高考\";\n// 4 手动触发 a标签的点击行为\naDom.click();//它是个方法 不是 事件 \n```\n\n## 画布保存和下载\n\n### 获取canvas画布的路径 cas.toDataURL()\n\n#### cas.ToDataURL(图片类型,质量)\n\n##### 图片类型\n\n1. image/png\n   1. 默认值 即 cas.toDataURL() 既可以\n   2. 不能压缩\n2. image/jpeg\n   1. 可以压缩  \n   2. 默认会把透明背景填充成黑色\n   3. 建议在使用它的时候 先手动fill 画布 成白色\n\n##### 质量(0-1) 0 最低 1 最高\n\n## 画视频\n\n将video标签传入 ctx.drawImage(video,0,0) 即可 参数和 之前画图片的一样\n\n### 在线视频截图下载\n\n报错: `Uncaught DOMException: Failed to execute 'toDataURL' on 'HTMLCanvasElement': Tainted canvases may not be exported.`\n\n解决:**以服务器的形式打开即可**\n\n\n\n## 和canvas相关的技术\n\n1. echartjs\n   1. 百度 数据展示 文档详细 基于配置\n2. konvajs\n   1. 国外 自定义图形 类jq和js的关系\n3. three.js\n   1. 国外 3d模拟 门槛高 电脑性能要求高\n4. d3.js\n   1. 国外 大数据 门槛中 数据分析\n\n# 移动web\n\n## 失真\n\n### 原因\n\n图片的清晰度和设备的清晰度不一致\n\n### 解决方案:\n\n1. 不用解决 忍受 模糊 \n\n2. 全部高清图 最常用 \n\n3. srcset 设备像素比的方式 devicePixelRatio  \n\n   ```html\n   <img src=\"./images/科比.png\" srcset=\"./images/赵丽颖.png 2x,./images/高圆圆.png 3x\" alt=\"\">\n   ```\n\n   ​\n\n## 基本概念\n\n1. 逻辑分辨率:屏幕的宽和高 单位 是px  \n2. 设备分辨率:屏幕里面一共拥有的物理像素点的个数!!!\n3. 对角线:一般说的手机屏幕尺寸都是指对角线的长度 单位 是英寸 \n4. PPI (Pixels Per Inch)也叫像素密度，所表示的是每英寸所拥有的像素数量 值越高,越清晰\n\n\n\n## 视口\n\n### 布局视口\n\n被手机厂商设置宽度为980px的视口\n\n### 理想视口\n\n视口宽度和屏幕等宽并且使用绝对长度单位写元素大小 是固定\n\n在代码里面如何写处理\n\n` meta:vp+tab` \n\n#### 不标准的\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n#### 标准的写法\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0,maximum-scale=1,minimum-scale=1,user-scalable=no\">\n```\n\n\n\n## less\n\n### 编译工具\n\n#### 考拉\n\n##### 注意事项\n\n1. 需要将 整个 **css文件夹**  都拖放到考拉当中\n2. 存放less文件的文件夹的名字不能够包含 **less** 字段\n3. 新创建less文件的时候 需要手动点击一下 考拉 里面的刷新按钮 **reflash**\n\n#### vs code 中的插件 easyless\n\n直接在vs code中下载 启用即可  \n\n### 语法:\n\n#### 变量\n\n```less\n@myColor:red;\nbody{\n  color:@myColor;\n}\n```\n\n#### 函数\n\n```less\n// 不带参数的函数\n.changeColor1(){\n  color:red;\n}\nbody{\n  .changeColor1();\n}\n// 带参数的函数\n.changeColor2(@c){\n  color:@c;\n}\nbody{\n  .changeColor2(red);\n}\n// 带默认参数的函数\n.changeColor3(@c:black){\n  color:@c;\n}\nbody{\n  .changeColor3();// color:black;\n  .changeColor3(red);// color:red;\n}\n```\n\n​\n\n#### 嵌套\n\n```less\ndiv{\n  &:after{}\n  p{}\n  >section{}\n}\n```\n\n​\n\n#### 导入\n\n```less\n@import \"base.less\";\n```\n\n​\n\n#### 注释\n\n```less\n// 这种注释不会被编译到css中\n/* 这种注释会被编译到css中 */\n```\n\n### 真机调试\n\nghostlab\n\n[云真机](http://wetest.qq.com/cloud/index.php/help/cloudindex)\n\n工作中如何对待:\n\n1 公司里面有测试 开发者的只要确保在 模拟器上 没有bug 就可以了.\n\n2 大公司里 有第三方的测试团队去测试  \n\n3 小小的公司  公司人少 只能够自己去测试 (再去研究真机调试的步骤)\n\n5 在学习的时候 可以先不用管真机调试 .以后用到的时候再去搭建环境和步骤就可以 了 !!! \n\n\n\n## 触屏事件\n\n### 触屏事件的种类\n\ntouchstart  手指按下屏幕\n\ntouchemove  手指在屏幕上滑动\n\ntouchend 手指离开屏幕\n\n### 三个触摸点数组\n\ntouches  屏幕上所有的触摸点的集合\n\ntargetTouches 目标元素上的触摸点的集合\n\nchangedTouches 在目标元素上发生了状态改变(进入 离开 移动)的触摸点的集合\n\n### 三对坐标信息\n\nclientX/Y 相对于视口的坐标\n\npageX/Y 相对于页面的坐标\n\nscreenX/Y 相对屏幕的坐标\n\n### 触屏事件的注意点\n\n#### 需求:\n\n1. 鼠标事件不能模拟多指触控\n2. click点击事件在移动端存在延迟\n   1. 原因  手机厂商为了用户更方便的放大页面\n   2. 延迟机制:\n      1. 第一次点击后,先等待一段时间 这一段时间过后 \n         1. 判断有没有第二次的点击发生 有 触发双击放大\n         2. 没有的再触发单击\n      2. 不管有没有第二次的点击 都需要等待 -  延迟\n3. 触屏事件不能在pc端上触发\n4. 建议绑定事件的时候 用 addEventListener  来绑定  \n\n#### 手势封装tap\n\n判断依据:\n\n1. 手指个数不能超过1\n2. 按下时间不能超过300ms\n3. 滑动距离不能超过5px\n\n#### 手势封装swipe\n\n判断依据:\n\n1. 手指个数不能超过1\n2. 按下时间不能超过800ms\n3. 滑动距离不能小于15px\n\n### 京东轮播图\n\n#### 过渡结束事件\n\ntransitionend 每一次过渡结束的时候 都会触发一次\n\n### 移动端轮播图插件 swiper.js\n\n我们使用的版本是3.x版本\n\n使用教程看官网即可 \n\n[网站](http://www.swiper.com.cn/)\n\n### vs code 插件\n\n1 安装 ease Server 插件 (同步刷新功能)\n\n2 在当前的html页面中 输入 `ctrl+shift+enter`\n\n### 自己构建zepto\n\n1 先安装好 **nodejs**   在cmd中输入 `node -v`  如果出现了版本号 证明安装成功了 \n\n2 在zepto文件夹内 按下 `shift+鼠标右键` 弹出命令行窗口\n\n3 输入 `npm install `\n\n4 执行编译 `npm run-script dist`\n\n5 自己设置要编译的模块 `SET MODULES=zepto event data touch`  \n\n6 执行编译 `npm run-script dist`\n\n\n\n# 响应式布局\n\n## 概念:\n\n用一套代码 可以做一个适应不同宽度的设备,还可以提供比较友好的用户体验\n\n## 核心原理:\n\n媒体查询\n\n## 媒体查询\n\n一种css的语法,可以根据设备的不同(主要是宽度),去加载对应的css代码\n\n## 媒体查询的知识点\n\n### 媒体类型\n\n1. all 包括一下两个类型\n2. screen 带正常屏幕的设备\n3. print 打印机\n\n### 媒体特性\n\n1. 宽度\n\n2. 高度\n\n3. 视口的宽高比      \n\n   ```\n   // 2/1 不能改为  2\n   @media screen and (aspect-ratio:2/1){\n     body{\n       \n     }\n   }\n   ```\n\n### 媒体关键字\n\n1. and\n2. or 代码中写逗号 来体现\n3. not 取反\n4. only 用来做兼容 \n\n### 媒体查询的引入方式\n\n1. **在css(和一般的样式代码是同层级)中直接写媒体查询-用得最多**\n2. 在style标签上 通过属性的方式 \n3. 在link标签上 通过属性的方式 \n\n## bootstrap框架\n\n## 栅格系统\n\n是把所有屏幕(4种屏幕) 分成了12份 每一列占一份\n\n### 4种宽度不同的屏幕\n\n1. 极小屏幕  xs < 768px\n2. 小屏幕  sm   768-992\n3. 中等-普通屏幕   md   992-1200\n4. 大屏幕  lg  > 1200\n\n### 步骤:\n\n1. 先写容器 .container(版心的宽度)  .container-fluid (全屏)\n2. 写 .row\n3. 再去写栅格(要注意标明屏幕的种类)\n\n## 工具提示\n\n用法:\n\n1. 直接粘贴标签的代码\n2. 必须要写上一段初始化的js代码 \n\n## 微金所\n\n### 知识点\n\n### a标签不能嵌套a标签\n\n### nth-child和nth-of-type的区别\n\n1. nth-child 计算子元素索引的时候 会计算其他类型的标签\n2. nth-of-type 计算子元素的索引的时候 不会计算其他类型的标签\n\n### 列嵌套-有时候代码怎么简单怎么写\n\n### 在做大的布局的时候容器的时候 建议使用 块级元素 (千万不要写行内嵌套块级元素)\n\n\n\n# rem+媒体查询 布局\n\n## rem和px和em的区别\n\n1. px是绝对长度单位\n2. em是相对长度单位 相对于自身的fontsize\n   1. 谷歌浏览器默认字体是16px\n   2. 谷歌浏览器默认最小字体是12px\n3. rem 是相对长度单位  相对于html标签的fontsize\n\n## 实现屏幕适配的步骤\n\n1. 使用rem+媒体查询还原设计稿\n2. 使用rem+媒体查询去做屏幕适配\n\n## 适配的注意事项\n\n1. 基础值 和设计稿等宽的媒体查询里面的html标签的fontsize  为100px\n2. 写100px 是为了方便计算\n3. 公式: `fontsize=基础值*要适配的屏幕/设计稿的宽度`\n4. 不建议使用js来代替媒体查询的功能\n5. 任何宽度的设计稿都可以用这套解决方案\n6. pc端的滚动条占宽度 移动端的滚动条不占宽度\n\n## 在线工具\n\n[标你妹](http://www.biaonimeia.com/project)\n\n[px转rem工具](http://mxd.tencent.com/wp-content/uploads/2014/11/rem.html)\n\n# 开发技巧\n\n## less和souce map\n\n### souce map\n\n存放了less文件和css文件的映射关系\n\n### 作用\n\n可以从页面调试工具里面 直接映射会对应的less文件\n\n### 步骤:\n\n1. 使用工具创建souce map (考拉 vs code中插件 easyless)\n\n   1. 考拉\n\n   2. easyless 插件\n\n      1. 需要在vs code 的设置中 加入以下代码 就可以了 \n\n         ```\n         \"less.compile\": {\n                 \"sourceMap\": true  // true => generate source maps (.css.map files)\n             },\n         ```\n\n   3. 需要在谷歌浏览器中开启\n\n      ​\n\n      ​","source":"_posts/canvas.md","raw":"---\ntitle: canvas\ndate: 2018-2-15 4:54\ntags: canvas\ncategories: web\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/canvas.gif\n---\n# canvas\n\n## canvas画线条基本步骤\n\n1. 编写canvas标签\n\n   ```javascript\n   <canvas>/<canvas>\n   ```\n\n2. 获取canvas的dom元素\n\n   ```javascript\n   var cas=document.querySelector(\"canvas\");\n   ```\n\n3. 获取canvas的上下文对象(画笔)\n\n   ```javascript\n   var ctx=cas.getContext(\"2d\");\n   ```\n   <!--more-->\n\n4. 设置起点\n\n   ```javascript\n   ctx.moveTo(x,y);\n   ```\n\n5. 设置终点\n\n   ```javascript\n   ctx.lineTo(x,y);\n   ```\n\n6. 描边(连线)\n\n   ```javascript\n   ctx.stroke();\n   ```\n\n   ​\n\n## 设置canvas的宽度和高度\n\n1. 在css中直接设置宽度和高度 其实是拉伸\n2. 在标签中通过属性的方式写宽度和高度(不叫做行内!!! )\n\n## 注意点\n\n1. 如果不写moveTo的话 那么lineTo 既是终点也是起点\n\n2. 首尾相连:  \n\n   1. 手动写lineTo\n   2. ctx.closePath();\n\n3. h5新标签\n\n   1. color标签 一般结合 onchange一起使用\n\n      ```html\n      <input type=\"color\" />\n      ```\n\n      > <input type=\"color\" />\n\n   2. number标签\n\n      1. min 最小值\n      2. max 最大值\n      3. value 当前的值\n      4. step 步长\n\n      ```html\n      <input type=\"number\" min=0 max=10 value=0 step=1 >\n      ```\n\n      > <input type=\"number\">\n\n4. 操作数组的4个方法\n\n   1. **原数组 arr=[a,b,c,d,e];**\n\n   2. push 往屁股添加一个值 返回数组的长度  如: \n\n      > 6= arr.push(f)  arr= [a, b, c, d,e,f];\n\n   3. pop   从屁股移除一个值 返回被删除的值 如: \n\n      > e= arr.pop()   arr=[a,b,c,d];\n\n   4. unshift 从头部添加一个值 返回数组的长度如:\n\n      > 6= arr.unshift(f)  arr=[f,a,b,c,d,e];\n\n   5. shift 从头部删除一个值 返回被删除的值 如:\n\n      > a= arr.shift()  arr=[b,c,d,e];\n\n5. eval 方法 可以把字符串变成代码执行  不要在工作里面出现 \n\n## stroke和fill\n\n1. stroke 描边-对在同一条路径上的图形进行描边(封闭和不封闭)\n2. fill 填充 对同一条路径上的**用线条画(不能填充strokeRect()的矩形)**的封闭图形进行填充\n\n## 路径\n\n1. 路径也是图形\n2. 判断两个图形是否在同一条路径上 不能够靠视觉上的首尾相连来判断\n3. 而是看有没有调用 ctx.beginPath();\n4. 一般在画新图形之前,最好要 开启一条新的路径 \n\n## 线条属性\n\n1. 颜色\n\n   > ctx.strokeStyle=\"red\";\n   >\n   > ctx.fillStyle=\"red\";\n\n2. 宽度\n\n   > ctx.lineWidth=10;\n\n3. 线段末端类型\n\n   1. miter 默认\n   2. round 突出圆角\n   3. square 突出矩形\n   4. ctx.lineCap=\"miter\";\n\n4. 线段相交点的类型\n\n   1. butt 屁股 默认值\n   2. round 圆角\n   3. bevel 平切\n   4. ctx.lineJoin=\"butt\";\n\n5. 虚线\n\n   1. setLineDash([实线的长度,实线的间隙的长度......])  设置虚线\n   2. getLineDash() 获取虚线\n   3. lineDashOffset=1 设置虚线的偏移值\n\n## 内置画矩形和擦除\n\n1. 画矩形 stokeRect(x,y,width.height)\n2. 填充矩形 fillRect(x,y,width,height)\n3. 擦除 clearRect(x,y,width,height)\n\n## 内置画圆弧\n\n1. 360 度=PI*2   \n2. return  Math.PI/180* num\n3. ctx.arc(圆心x,圆心y,半径,开始的**弧度**,结束的**弧度**,?是否反向)\n\n## 内置 画图片\n\n### 步骤:\n\n```javascript\nvar img=new Image();\nimg.src=\"路径\";\nimg.onload=function(){\n  ctx.drawImage()......\n}\n```\n\n### 方法解释\n\n1. 3个参数  drawImage(图片对象,画在画布的x,画在画布的y);\n2. 5个参数  drawImage(图片对象,画在画布的x,画在画布的y,画多宽,画多高);\n3. 9个参数 drawImage(图片对象, 原图的x,原图的y,原图的宽,原图的高, 画在画布的x,画在画布的y,画多宽,画多高);\n\n## 渐变\n\n决定渐变图案的因素\n\n1. 颜色\n2. 方向\n3. 长度\n\n代码:\n\n```javascript\nvar g=ctx.creatLinearGradient(开始的坐标x,y,结束的坐标x,y);\ng.addColorStop(0,\"red\");\ng.addColorStop(1,\"black\");\nctx.strokeStyle=g;\nctx.fillStyle=g;\nctx.fillRect(0,0,50,50);\n```\n\n## 文字\n\nctx.strokeText(\"文本\",x,y);\n\nctx.fillText(\"文本\",x,y);\n\nctx.font=\"50px 宋体\"\n\n> font的设置和在css中的设置一样\n\n## 阴影\n\nctx.shadowBlur  模糊值\n\nctx.shadowColor 颜色\n\nctx.shadowOffsetX x 偏移\n\nctx.shadowOffsetY y 偏移\n\n```javascript\n  ctx.shadowBlur=10;\n  ctx.shadowColor=\"red\";\n  ctx.shadowOffsetX=10;\n  ctx.shadowOffsetY=10;\n```\n\n## canvas中的转换\n\n### 移动\n\n#### css3中的移动和canvas中的移动的区别\n\n##### css3中的移动\n\n1. 移动的是自身的dom元素\n2. 移动的值 是覆盖的 先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(200px)\n3. 移动的单位 一个 百分比 %  一个是像素 px \n\n##### canvas中的移动\n\n1. 移动的是坐标系\n\n2. 移动的值是叠加的  先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(300px)\n\n3. 单位  不用写单位\n\n   ```\n   ctx.translate(1,1)\n   ```\n\n### 旋转\n\n#### css3中的旋转和canvas中的旋转的区别\n\n##### css3中的旋转\n\n1. 旋转的自身的dom元素\n2. 旋转的值 是覆盖的 \n3. 单位 是  角度\n4. 旋转的中心点 是元素的中心 center center\n\n##### canvas中的旋转\n\n1. 旋转的是坐标系\n2. 旋转的值 是叠加的\n3. 单位 是 弧度!!!! \n4. 旋转的中心点是坐标系的圆点 0 0 \n\n```\n ctx.rotate(degToArc(10));\n```\n\n## 环境\n\n环境 值 坐标系和线条属性 \n\n### 保存和还原\n\n保存的是 坐标系 和 线条属性\n\n还原的是 坐标系 和 线条属性\n\n保存了几次 就可以还原几次 \n\n```\nctx.save()\nctx.restore();\n```\n\n### 擦除和重置\n\n#### 擦除\n\nctx.clearRect(**0,0**,100,100)   有时候 坐标系改变了的话 再使用擦除这个代码  坐标不一定是 **0   0**  \n\n不能擦除坐标系  不能擦除线条属性(颜色 大小 虚线 末端  相交🍌)\n\n#### 重置\n\ncas.width=cas.width  \n\n可以擦除画图的图案  可以重置坐标系  可以重置线条属性  \n\n## 下载\n\n### 标签实现\n\n```html\n<a href=\"资源路径\" download=\"资源名字(可以随便写)\" ></a>\n```\n\n### 代码实现\n\n```\n// 1 创建a标签\nvar aDom=document.createElement(\"a\");\n// 2 指定 href\naDom.href=\"资源路径\";\n// 3 设置download属性\naDom.download=\"五年高考\";\n// 4 手动触发 a标签的点击行为\naDom.click();//它是个方法 不是 事件 \n```\n\n## 画布保存和下载\n\n### 获取canvas画布的路径 cas.toDataURL()\n\n#### cas.ToDataURL(图片类型,质量)\n\n##### 图片类型\n\n1. image/png\n   1. 默认值 即 cas.toDataURL() 既可以\n   2. 不能压缩\n2. image/jpeg\n   1. 可以压缩  \n   2. 默认会把透明背景填充成黑色\n   3. 建议在使用它的时候 先手动fill 画布 成白色\n\n##### 质量(0-1) 0 最低 1 最高\n\n## 画视频\n\n将video标签传入 ctx.drawImage(video,0,0) 即可 参数和 之前画图片的一样\n\n### 在线视频截图下载\n\n报错: `Uncaught DOMException: Failed to execute 'toDataURL' on 'HTMLCanvasElement': Tainted canvases may not be exported.`\n\n解决:**以服务器的形式打开即可**\n\n\n\n## 和canvas相关的技术\n\n1. echartjs\n   1. 百度 数据展示 文档详细 基于配置\n2. konvajs\n   1. 国外 自定义图形 类jq和js的关系\n3. three.js\n   1. 国外 3d模拟 门槛高 电脑性能要求高\n4. d3.js\n   1. 国外 大数据 门槛中 数据分析\n\n# 移动web\n\n## 失真\n\n### 原因\n\n图片的清晰度和设备的清晰度不一致\n\n### 解决方案:\n\n1. 不用解决 忍受 模糊 \n\n2. 全部高清图 最常用 \n\n3. srcset 设备像素比的方式 devicePixelRatio  \n\n   ```html\n   <img src=\"./images/科比.png\" srcset=\"./images/赵丽颖.png 2x,./images/高圆圆.png 3x\" alt=\"\">\n   ```\n\n   ​\n\n## 基本概念\n\n1. 逻辑分辨率:屏幕的宽和高 单位 是px  \n2. 设备分辨率:屏幕里面一共拥有的物理像素点的个数!!!\n3. 对角线:一般说的手机屏幕尺寸都是指对角线的长度 单位 是英寸 \n4. PPI (Pixels Per Inch)也叫像素密度，所表示的是每英寸所拥有的像素数量 值越高,越清晰\n\n\n\n## 视口\n\n### 布局视口\n\n被手机厂商设置宽度为980px的视口\n\n### 理想视口\n\n视口宽度和屏幕等宽并且使用绝对长度单位写元素大小 是固定\n\n在代码里面如何写处理\n\n` meta:vp+tab` \n\n#### 不标准的\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n#### 标准的写法\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0,maximum-scale=1,minimum-scale=1,user-scalable=no\">\n```\n\n\n\n## less\n\n### 编译工具\n\n#### 考拉\n\n##### 注意事项\n\n1. 需要将 整个 **css文件夹**  都拖放到考拉当中\n2. 存放less文件的文件夹的名字不能够包含 **less** 字段\n3. 新创建less文件的时候 需要手动点击一下 考拉 里面的刷新按钮 **reflash**\n\n#### vs code 中的插件 easyless\n\n直接在vs code中下载 启用即可  \n\n### 语法:\n\n#### 变量\n\n```less\n@myColor:red;\nbody{\n  color:@myColor;\n}\n```\n\n#### 函数\n\n```less\n// 不带参数的函数\n.changeColor1(){\n  color:red;\n}\nbody{\n  .changeColor1();\n}\n// 带参数的函数\n.changeColor2(@c){\n  color:@c;\n}\nbody{\n  .changeColor2(red);\n}\n// 带默认参数的函数\n.changeColor3(@c:black){\n  color:@c;\n}\nbody{\n  .changeColor3();// color:black;\n  .changeColor3(red);// color:red;\n}\n```\n\n​\n\n#### 嵌套\n\n```less\ndiv{\n  &:after{}\n  p{}\n  >section{}\n}\n```\n\n​\n\n#### 导入\n\n```less\n@import \"base.less\";\n```\n\n​\n\n#### 注释\n\n```less\n// 这种注释不会被编译到css中\n/* 这种注释会被编译到css中 */\n```\n\n### 真机调试\n\nghostlab\n\n[云真机](http://wetest.qq.com/cloud/index.php/help/cloudindex)\n\n工作中如何对待:\n\n1 公司里面有测试 开发者的只要确保在 模拟器上 没有bug 就可以了.\n\n2 大公司里 有第三方的测试团队去测试  \n\n3 小小的公司  公司人少 只能够自己去测试 (再去研究真机调试的步骤)\n\n5 在学习的时候 可以先不用管真机调试 .以后用到的时候再去搭建环境和步骤就可以 了 !!! \n\n\n\n## 触屏事件\n\n### 触屏事件的种类\n\ntouchstart  手指按下屏幕\n\ntouchemove  手指在屏幕上滑动\n\ntouchend 手指离开屏幕\n\n### 三个触摸点数组\n\ntouches  屏幕上所有的触摸点的集合\n\ntargetTouches 目标元素上的触摸点的集合\n\nchangedTouches 在目标元素上发生了状态改变(进入 离开 移动)的触摸点的集合\n\n### 三对坐标信息\n\nclientX/Y 相对于视口的坐标\n\npageX/Y 相对于页面的坐标\n\nscreenX/Y 相对屏幕的坐标\n\n### 触屏事件的注意点\n\n#### 需求:\n\n1. 鼠标事件不能模拟多指触控\n2. click点击事件在移动端存在延迟\n   1. 原因  手机厂商为了用户更方便的放大页面\n   2. 延迟机制:\n      1. 第一次点击后,先等待一段时间 这一段时间过后 \n         1. 判断有没有第二次的点击发生 有 触发双击放大\n         2. 没有的再触发单击\n      2. 不管有没有第二次的点击 都需要等待 -  延迟\n3. 触屏事件不能在pc端上触发\n4. 建议绑定事件的时候 用 addEventListener  来绑定  \n\n#### 手势封装tap\n\n判断依据:\n\n1. 手指个数不能超过1\n2. 按下时间不能超过300ms\n3. 滑动距离不能超过5px\n\n#### 手势封装swipe\n\n判断依据:\n\n1. 手指个数不能超过1\n2. 按下时间不能超过800ms\n3. 滑动距离不能小于15px\n\n### 京东轮播图\n\n#### 过渡结束事件\n\ntransitionend 每一次过渡结束的时候 都会触发一次\n\n### 移动端轮播图插件 swiper.js\n\n我们使用的版本是3.x版本\n\n使用教程看官网即可 \n\n[网站](http://www.swiper.com.cn/)\n\n### vs code 插件\n\n1 安装 ease Server 插件 (同步刷新功能)\n\n2 在当前的html页面中 输入 `ctrl+shift+enter`\n\n### 自己构建zepto\n\n1 先安装好 **nodejs**   在cmd中输入 `node -v`  如果出现了版本号 证明安装成功了 \n\n2 在zepto文件夹内 按下 `shift+鼠标右键` 弹出命令行窗口\n\n3 输入 `npm install `\n\n4 执行编译 `npm run-script dist`\n\n5 自己设置要编译的模块 `SET MODULES=zepto event data touch`  \n\n6 执行编译 `npm run-script dist`\n\n\n\n# 响应式布局\n\n## 概念:\n\n用一套代码 可以做一个适应不同宽度的设备,还可以提供比较友好的用户体验\n\n## 核心原理:\n\n媒体查询\n\n## 媒体查询\n\n一种css的语法,可以根据设备的不同(主要是宽度),去加载对应的css代码\n\n## 媒体查询的知识点\n\n### 媒体类型\n\n1. all 包括一下两个类型\n2. screen 带正常屏幕的设备\n3. print 打印机\n\n### 媒体特性\n\n1. 宽度\n\n2. 高度\n\n3. 视口的宽高比      \n\n   ```\n   // 2/1 不能改为  2\n   @media screen and (aspect-ratio:2/1){\n     body{\n       \n     }\n   }\n   ```\n\n### 媒体关键字\n\n1. and\n2. or 代码中写逗号 来体现\n3. not 取反\n4. only 用来做兼容 \n\n### 媒体查询的引入方式\n\n1. **在css(和一般的样式代码是同层级)中直接写媒体查询-用得最多**\n2. 在style标签上 通过属性的方式 \n3. 在link标签上 通过属性的方式 \n\n## bootstrap框架\n\n## 栅格系统\n\n是把所有屏幕(4种屏幕) 分成了12份 每一列占一份\n\n### 4种宽度不同的屏幕\n\n1. 极小屏幕  xs < 768px\n2. 小屏幕  sm   768-992\n3. 中等-普通屏幕   md   992-1200\n4. 大屏幕  lg  > 1200\n\n### 步骤:\n\n1. 先写容器 .container(版心的宽度)  .container-fluid (全屏)\n2. 写 .row\n3. 再去写栅格(要注意标明屏幕的种类)\n\n## 工具提示\n\n用法:\n\n1. 直接粘贴标签的代码\n2. 必须要写上一段初始化的js代码 \n\n## 微金所\n\n### 知识点\n\n### a标签不能嵌套a标签\n\n### nth-child和nth-of-type的区别\n\n1. nth-child 计算子元素索引的时候 会计算其他类型的标签\n2. nth-of-type 计算子元素的索引的时候 不会计算其他类型的标签\n\n### 列嵌套-有时候代码怎么简单怎么写\n\n### 在做大的布局的时候容器的时候 建议使用 块级元素 (千万不要写行内嵌套块级元素)\n\n\n\n# rem+媒体查询 布局\n\n## rem和px和em的区别\n\n1. px是绝对长度单位\n2. em是相对长度单位 相对于自身的fontsize\n   1. 谷歌浏览器默认字体是16px\n   2. 谷歌浏览器默认最小字体是12px\n3. rem 是相对长度单位  相对于html标签的fontsize\n\n## 实现屏幕适配的步骤\n\n1. 使用rem+媒体查询还原设计稿\n2. 使用rem+媒体查询去做屏幕适配\n\n## 适配的注意事项\n\n1. 基础值 和设计稿等宽的媒体查询里面的html标签的fontsize  为100px\n2. 写100px 是为了方便计算\n3. 公式: `fontsize=基础值*要适配的屏幕/设计稿的宽度`\n4. 不建议使用js来代替媒体查询的功能\n5. 任何宽度的设计稿都可以用这套解决方案\n6. pc端的滚动条占宽度 移动端的滚动条不占宽度\n\n## 在线工具\n\n[标你妹](http://www.biaonimeia.com/project)\n\n[px转rem工具](http://mxd.tencent.com/wp-content/uploads/2014/11/rem.html)\n\n# 开发技巧\n\n## less和souce map\n\n### souce map\n\n存放了less文件和css文件的映射关系\n\n### 作用\n\n可以从页面调试工具里面 直接映射会对应的less文件\n\n### 步骤:\n\n1. 使用工具创建souce map (考拉 vs code中插件 easyless)\n\n   1. 考拉\n\n   2. easyless 插件\n\n      1. 需要在vs code 的设置中 加入以下代码 就可以了 \n\n         ```\n         \"less.compile\": {\n                 \"sourceMap\": true  // true => generate source maps (.css.map files)\n             },\n         ```\n\n   3. 需要在谷歌浏览器中开启\n\n      ​\n\n      ​","slug":"canvas","published":1,"updated":"2018-03-06T22:20:51.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc1c000hskrxcrqr2ln0","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h1 id=\"canvas\"><a href=\"#canvas\" class=\"headerlink\" title=\"canvas\"></a>canvas</h1><h2 id=\"canvas画线条基本步骤\"><a href=\"#canvas画线条基本步骤\" class=\"headerlink\" title=\"canvas画线条基本步骤\"></a>canvas画线条基本步骤</h2><ol>\n<li><p>编写canvas标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas&gt;<span class=\"regexp\">/&lt;canvas&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取canvas的dom元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cas=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"canvas\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取canvas的上下文对象(画笔)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ctx=cas.getContext(<span class=\"string\">\"2d\"</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n</li>\n<li><p>设置起点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.moveTo(x,y);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置终点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.lineTo(x,y);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>描边(连线)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"设置canvas的宽度和高度\"><a href=\"#设置canvas的宽度和高度\" class=\"headerlink\" title=\"设置canvas的宽度和高度\"></a>设置canvas的宽度和高度</h2><ol>\n<li>在css中直接设置宽度和高度 其实是拉伸</li>\n<li>在标签中通过属性的方式写宽度和高度(不叫做行内!!! )</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>如果不写moveTo的话 那么lineTo 既是终点也是起点</p>\n</li>\n<li><p>首尾相连:  </p>\n<ol>\n<li>手动写lineTo</li>\n<li>ctx.closePath();</li>\n</ol>\n</li>\n<li><p>h5新标签</p>\n<ol>\n<li><p>color标签 一般结合 onchange一起使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<input type=\"color\">\n</blockquote>\n</li>\n<li><p>number标签</p>\n<ol>\n<li>min 最小值</li>\n<li>max 最大值</li>\n<li>value 当前的值</li>\n<li>step 步长</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">min</span>=<span class=\"string\">0</span> <span class=\"attr\">max</span>=<span class=\"string\">10</span> <span class=\"attr\">value</span>=<span class=\"string\">0</span> <span class=\"attr\">step</span>=<span class=\"string\">1</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<input type=\"number\">\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>操作数组的4个方法</p>\n<ol>\n<li><p><strong>原数组 arr=[a,b,c,d,e];</strong></p>\n</li>\n<li><p>push 往屁股添加一个值 返回数组的长度  如: </p>\n<blockquote>\n<p>6= arr.push(f)  arr= [a, b, c, d,e,f];</p>\n</blockquote>\n</li>\n<li><p>pop   从屁股移除一个值 返回被删除的值 如: </p>\n<blockquote>\n<p>e= arr.pop()   arr=[a,b,c,d];</p>\n</blockquote>\n</li>\n<li><p>unshift 从头部添加一个值 返回数组的长度如:</p>\n<blockquote>\n<p>6= arr.unshift(f)  arr=[f,a,b,c,d,e];</p>\n</blockquote>\n</li>\n<li><p>shift 从头部删除一个值 返回被删除的值 如:</p>\n<blockquote>\n<p>a= arr.shift()  arr=[b,c,d,e];</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>eval 方法 可以把字符串变成代码执行  不要在工作里面出现 </p>\n</li>\n</ol>\n<h2 id=\"stroke和fill\"><a href=\"#stroke和fill\" class=\"headerlink\" title=\"stroke和fill\"></a>stroke和fill</h2><ol>\n<li>stroke 描边-对在同一条路径上的图形进行描边(封闭和不封闭)</li>\n<li>fill 填充 对同一条路径上的<strong>用线条画(不能填充strokeRect()的矩形)</strong>的封闭图形进行填充</li>\n</ol>\n<h2 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h2><ol>\n<li>路径也是图形</li>\n<li>判断两个图形是否在同一条路径上 不能够靠视觉上的首尾相连来判断</li>\n<li>而是看有没有调用 ctx.beginPath();</li>\n<li>一般在画新图形之前,最好要 开启一条新的路径 </li>\n</ol>\n<h2 id=\"线条属性\"><a href=\"#线条属性\" class=\"headerlink\" title=\"线条属性\"></a>线条属性</h2><ol>\n<li><p>颜色</p>\n<blockquote>\n<p>ctx.strokeStyle=”red”;</p>\n<p>ctx.fillStyle=”red”;</p>\n</blockquote>\n</li>\n<li><p>宽度</p>\n<blockquote>\n<p>ctx.lineWidth=10;</p>\n</blockquote>\n</li>\n<li><p>线段末端类型</p>\n<ol>\n<li>miter 默认</li>\n<li>round 突出圆角</li>\n<li>square 突出矩形</li>\n<li>ctx.lineCap=”miter”;</li>\n</ol>\n</li>\n<li><p>线段相交点的类型</p>\n<ol>\n<li>butt 屁股 默认值</li>\n<li>round 圆角</li>\n<li>bevel 平切</li>\n<li>ctx.lineJoin=”butt”;</li>\n</ol>\n</li>\n<li><p>虚线</p>\n<ol>\n<li>setLineDash([实线的长度,实线的间隙的长度……])  设置虚线</li>\n<li>getLineDash() 获取虚线</li>\n<li>lineDashOffset=1 设置虚线的偏移值</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"内置画矩形和擦除\"><a href=\"#内置画矩形和擦除\" class=\"headerlink\" title=\"内置画矩形和擦除\"></a>内置画矩形和擦除</h2><ol>\n<li>画矩形 stokeRect(x,y,width.height)</li>\n<li>填充矩形 fillRect(x,y,width,height)</li>\n<li>擦除 clearRect(x,y,width,height)</li>\n</ol>\n<h2 id=\"内置画圆弧\"><a href=\"#内置画圆弧\" class=\"headerlink\" title=\"内置画圆弧\"></a>内置画圆弧</h2><ol>\n<li>360 度=PI*2   </li>\n<li>return  Math.PI/180* num</li>\n<li>ctx.arc(圆心x,圆心y,半径,开始的<strong>弧度</strong>,结束的<strong>弧度</strong>,?是否反向)</li>\n</ol>\n<h2 id=\"内置-画图片\"><a href=\"#内置-画图片\" class=\"headerlink\" title=\"内置 画图片\"></a>内置 画图片</h2><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤:\"></a>步骤:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.src=<span class=\"string\">\"路径\"</span>;</span><br><span class=\"line\">img.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ctx.drawImage()......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法解释\"><a href=\"#方法解释\" class=\"headerlink\" title=\"方法解释\"></a>方法解释</h3><ol>\n<li>3个参数  drawImage(图片对象,画在画布的x,画在画布的y);</li>\n<li>5个参数  drawImage(图片对象,画在画布的x,画在画布的y,画多宽,画多高);</li>\n<li>9个参数 drawImage(图片对象, 原图的x,原图的y,原图的宽,原图的高, 画在画布的x,画在画布的y,画多宽,画多高);</li>\n</ol>\n<h2 id=\"渐变\"><a href=\"#渐变\" class=\"headerlink\" title=\"渐变\"></a>渐变</h2><p>决定渐变图案的因素</p>\n<ol>\n<li>颜色</li>\n<li>方向</li>\n<li>长度</li>\n</ol>\n<p>代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g=ctx.creatLinearGradient(开始的坐标x,y,结束的坐标x,y);</span><br><span class=\"line\">g.addColorStop(<span class=\"number\">0</span>,<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">g.addColorStop(<span class=\"number\">1</span>,<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\">ctx.strokeStyle=g;</span><br><span class=\"line\">ctx.fillStyle=g;</span><br><span class=\"line\">ctx.fillRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><p>ctx.strokeText(“文本”,x,y);</p>\n<p>ctx.fillText(“文本”,x,y);</p>\n<p>ctx.font=”50px 宋体”</p>\n<blockquote>\n<p>font的设置和在css中的设置一样</p>\n</blockquote>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><p>ctx.shadowBlur  模糊值</p>\n<p>ctx.shadowColor 颜色</p>\n<p>ctx.shadowOffsetX x 偏移</p>\n<p>ctx.shadowOffsetY y 偏移</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.shadowBlur=<span class=\"number\">10</span>;</span><br><span class=\"line\">ctx.shadowColor=<span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">ctx.shadowOffsetX=<span class=\"number\">10</span>;</span><br><span class=\"line\">ctx.shadowOffsetY=<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"canvas中的转换\"><a href=\"#canvas中的转换\" class=\"headerlink\" title=\"canvas中的转换\"></a>canvas中的转换</h2><h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><h4 id=\"css3中的移动和canvas中的移动的区别\"><a href=\"#css3中的移动和canvas中的移动的区别\" class=\"headerlink\" title=\"css3中的移动和canvas中的移动的区别\"></a>css3中的移动和canvas中的移动的区别</h4><h5 id=\"css3中的移动\"><a href=\"#css3中的移动\" class=\"headerlink\" title=\"css3中的移动\"></a>css3中的移动</h5><ol>\n<li>移动的是自身的dom元素</li>\n<li>移动的值 是覆盖的 先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(200px)</li>\n<li>移动的单位 一个 百分比 %  一个是像素 px </li>\n</ol>\n<h5 id=\"canvas中的移动\"><a href=\"#canvas中的移动\" class=\"headerlink\" title=\"canvas中的移动\"></a>canvas中的移动</h5><ol>\n<li><p>移动的是坐标系</p>\n</li>\n<li><p>移动的值是叠加的  先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(300px)</p>\n</li>\n<li><p>单位  不用写单位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.translate(1,1)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><h4 id=\"css3中的旋转和canvas中的旋转的区别\"><a href=\"#css3中的旋转和canvas中的旋转的区别\" class=\"headerlink\" title=\"css3中的旋转和canvas中的旋转的区别\"></a>css3中的旋转和canvas中的旋转的区别</h4><h5 id=\"css3中的旋转\"><a href=\"#css3中的旋转\" class=\"headerlink\" title=\"css3中的旋转\"></a>css3中的旋转</h5><ol>\n<li>旋转的自身的dom元素</li>\n<li>旋转的值 是覆盖的 </li>\n<li>单位 是  角度</li>\n<li>旋转的中心点 是元素的中心 center center</li>\n</ol>\n<h5 id=\"canvas中的旋转\"><a href=\"#canvas中的旋转\" class=\"headerlink\" title=\"canvas中的旋转\"></a>canvas中的旋转</h5><ol>\n<li>旋转的是坐标系</li>\n<li>旋转的值 是叠加的</li>\n<li>单位 是 弧度!!!! </li>\n<li>旋转的中心点是坐标系的圆点 0 0 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.rotate(degToArc(10));</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>环境 值 坐标系和线条属性 </p>\n<h3 id=\"保存和还原\"><a href=\"#保存和还原\" class=\"headerlink\" title=\"保存和还原\"></a>保存和还原</h3><p>保存的是 坐标系 和 线条属性</p>\n<p>还原的是 坐标系 和 线条属性</p>\n<p>保存了几次 就可以还原几次 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.save()</span><br><span class=\"line\">ctx.restore();</span><br></pre></td></tr></table></figure>\n<h3 id=\"擦除和重置\"><a href=\"#擦除和重置\" class=\"headerlink\" title=\"擦除和重置\"></a>擦除和重置</h3><h4 id=\"擦除\"><a href=\"#擦除\" class=\"headerlink\" title=\"擦除\"></a>擦除</h4><p>ctx.clearRect(<strong>0,0</strong>,100,100)   有时候 坐标系改变了的话 再使用擦除这个代码  坐标不一定是 <strong>0   0</strong>  </p>\n<p>不能擦除坐标系  不能擦除线条属性(颜色 大小 虚线 末端  相交🍌)</p>\n<h4 id=\"重置\"><a href=\"#重置\" class=\"headerlink\" title=\"重置\"></a>重置</h4><p>cas.width=cas.width  </p>\n<p>可以擦除画图的图案  可以重置坐标系  可以重置线条属性  </p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><h3 id=\"标签实现\"><a href=\"#标签实现\" class=\"headerlink\" title=\"标签实现\"></a>标签实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"资源路径\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"资源名字(可以随便写)\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1 创建a标签</span><br><span class=\"line\">var aDom=document.createElement(&quot;a&quot;);</span><br><span class=\"line\">// 2 指定 href</span><br><span class=\"line\">aDom.href=&quot;资源路径&quot;;</span><br><span class=\"line\">// 3 设置download属性</span><br><span class=\"line\">aDom.download=&quot;五年高考&quot;;</span><br><span class=\"line\">// 4 手动触发 a标签的点击行为</span><br><span class=\"line\">aDom.click();//它是个方法 不是 事件</span><br></pre></td></tr></table></figure>\n<h2 id=\"画布保存和下载\"><a href=\"#画布保存和下载\" class=\"headerlink\" title=\"画布保存和下载\"></a>画布保存和下载</h2><h3 id=\"获取canvas画布的路径-cas-toDataURL\"><a href=\"#获取canvas画布的路径-cas-toDataURL\" class=\"headerlink\" title=\"获取canvas画布的路径 cas.toDataURL()\"></a>获取canvas画布的路径 cas.toDataURL()</h3><h4 id=\"cas-ToDataURL-图片类型-质量\"><a href=\"#cas-ToDataURL-图片类型-质量\" class=\"headerlink\" title=\"cas.ToDataURL(图片类型,质量)\"></a>cas.ToDataURL(图片类型,质量)</h4><h5 id=\"图片类型\"><a href=\"#图片类型\" class=\"headerlink\" title=\"图片类型\"></a>图片类型</h5><ol>\n<li>image/png<ol>\n<li>默认值 即 cas.toDataURL() 既可以</li>\n<li>不能压缩</li>\n</ol>\n</li>\n<li>image/jpeg<ol>\n<li>可以压缩  </li>\n<li>默认会把透明背景填充成黑色</li>\n<li>建议在使用它的时候 先手动fill 画布 成白色</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"质量-0-1-0-最低-1-最高\"><a href=\"#质量-0-1-0-最低-1-最高\" class=\"headerlink\" title=\"质量(0-1) 0 最低 1 最高\"></a>质量(0-1) 0 最低 1 最高</h5><h2 id=\"画视频\"><a href=\"#画视频\" class=\"headerlink\" title=\"画视频\"></a>画视频</h2><p>将video标签传入 ctx.drawImage(video,0,0) 即可 参数和 之前画图片的一样</p>\n<h3 id=\"在线视频截图下载\"><a href=\"#在线视频截图下载\" class=\"headerlink\" title=\"在线视频截图下载\"></a>在线视频截图下载</h3><p>报错: <code>Uncaught DOMException: Failed to execute &#39;toDataURL&#39; on &#39;HTMLCanvasElement&#39;: Tainted canvases may not be exported.</code></p>\n<p>解决:<strong>以服务器的形式打开即可</strong></p>\n<h2 id=\"和canvas相关的技术\"><a href=\"#和canvas相关的技术\" class=\"headerlink\" title=\"和canvas相关的技术\"></a>和canvas相关的技术</h2><ol>\n<li>echartjs<ol>\n<li>百度 数据展示 文档详细 基于配置</li>\n</ol>\n</li>\n<li>konvajs<ol>\n<li>国外 自定义图形 类jq和js的关系</li>\n</ol>\n</li>\n<li>three.js<ol>\n<li>国外 3d模拟 门槛高 电脑性能要求高</li>\n</ol>\n</li>\n<li>d3.js<ol>\n<li>国外 大数据 门槛中 数据分析</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"移动web\"><a href=\"#移动web\" class=\"headerlink\" title=\"移动web\"></a>移动web</h1><h2 id=\"失真\"><a href=\"#失真\" class=\"headerlink\" title=\"失真\"></a>失真</h2><h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>图片的清晰度和设备的清晰度不一致</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h3><ol>\n<li><p>不用解决 忍受 模糊 </p>\n</li>\n<li><p>全部高清图 最常用 </p>\n</li>\n<li><p>srcset 设备像素比的方式 devicePixelRatio  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./images/科比.png\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"./images/赵丽颖.png 2x,./images/高圆圆.png 3x\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ol>\n<li>逻辑分辨率:屏幕的宽和高 单位 是px  </li>\n<li>设备分辨率:屏幕里面一共拥有的物理像素点的个数!!!</li>\n<li>对角线:一般说的手机屏幕尺寸都是指对角线的长度 单位 是英寸 </li>\n<li>PPI (Pixels Per Inch)也叫像素密度，所表示的是每英寸所拥有的像素数量 值越高,越清晰</li>\n</ol>\n<h2 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h2><h3 id=\"布局视口\"><a href=\"#布局视口\" class=\"headerlink\" title=\"布局视口\"></a>布局视口</h3><p>被手机厂商设置宽度为980px的视口</p>\n<h3 id=\"理想视口\"><a href=\"#理想视口\" class=\"headerlink\" title=\"理想视口\"></a>理想视口</h3><p>视口宽度和屏幕等宽并且使用绝对长度单位写元素大小 是固定</p>\n<p>在代码里面如何写处理</p>\n<p><code>meta:vp+tab</code> </p>\n<h4 id=\"不标准的\"><a href=\"#不标准的\" class=\"headerlink\" title=\"不标准的\"></a>不标准的</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"标准的写法\"><a href=\"#标准的写法\" class=\"headerlink\" title=\"标准的写法\"></a>标准的写法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0,maximum-scale=1,minimum-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><h3 id=\"编译工具\"><a href=\"#编译工具\" class=\"headerlink\" title=\"编译工具\"></a>编译工具</h3><h4 id=\"考拉\"><a href=\"#考拉\" class=\"headerlink\" title=\"考拉\"></a>考拉</h4><h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ol>\n<li>需要将 整个 <strong>css文件夹</strong>  都拖放到考拉当中</li>\n<li>存放less文件的文件夹的名字不能够包含 <strong>less</strong> 字段</li>\n<li>新创建less文件的时候 需要手动点击一下 考拉 里面的刷新按钮 <strong>reflash</strong></li>\n</ol>\n<h4 id=\"vs-code-中的插件-easyless\"><a href=\"#vs-code-中的插件-easyless\" class=\"headerlink\" title=\"vs code 中的插件 easyless\"></a>vs code 中的插件 easyless</h4><p>直接在vs code中下载 启用即可  </p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法:\"></a>语法:</h3><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@myColor:</span>red;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"variable\">@myColor</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不带参数的函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.changeColor1</span>()&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor1</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 带参数的函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.changeColor2</span>(<span class=\"variable\">@c</span>)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"variable\">@c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor2</span>(red);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 带默认参数的函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.changeColor3</span>(<span class=\"variable\">@c</span>:black)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"variable\">@c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor3</span>();<span class=\"comment\">// color:black;</span></span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor3</span>(red);<span class=\"comment\">// color:red;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:after</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">p</span>&#123;&#125;</span><br><span class=\"line\">  &gt;<span class=\"selector-tag\">section</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"base.less\"</span>;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这种注释不会被编译到css中</span></span><br><span class=\"line\"><span class=\"comment\">/* 这种注释会被编译到css中 */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h3><p>ghostlab</p>\n<p><a href=\"http://wetest.qq.com/cloud/index.php/help/cloudindex\" target=\"_blank\" rel=\"noopener\">云真机</a></p>\n<p>工作中如何对待:</p>\n<p>1 公司里面有测试 开发者的只要确保在 模拟器上 没有bug 就可以了.</p>\n<p>2 大公司里 有第三方的测试团队去测试  </p>\n<p>3 小小的公司  公司人少 只能够自己去测试 (再去研究真机调试的步骤)</p>\n<p>5 在学习的时候 可以先不用管真机调试 .以后用到的时候再去搭建环境和步骤就可以 了 !!! </p>\n<h2 id=\"触屏事件\"><a href=\"#触屏事件\" class=\"headerlink\" title=\"触屏事件\"></a>触屏事件</h2><h3 id=\"触屏事件的种类\"><a href=\"#触屏事件的种类\" class=\"headerlink\" title=\"触屏事件的种类\"></a>触屏事件的种类</h3><p>touchstart  手指按下屏幕</p>\n<p>touchemove  手指在屏幕上滑动</p>\n<p>touchend 手指离开屏幕</p>\n<h3 id=\"三个触摸点数组\"><a href=\"#三个触摸点数组\" class=\"headerlink\" title=\"三个触摸点数组\"></a>三个触摸点数组</h3><p>touches  屏幕上所有的触摸点的集合</p>\n<p>targetTouches 目标元素上的触摸点的集合</p>\n<p>changedTouches 在目标元素上发生了状态改变(进入 离开 移动)的触摸点的集合</p>\n<h3 id=\"三对坐标信息\"><a href=\"#三对坐标信息\" class=\"headerlink\" title=\"三对坐标信息\"></a>三对坐标信息</h3><p>clientX/Y 相对于视口的坐标</p>\n<p>pageX/Y 相对于页面的坐标</p>\n<p>screenX/Y 相对屏幕的坐标</p>\n<h3 id=\"触屏事件的注意点\"><a href=\"#触屏事件的注意点\" class=\"headerlink\" title=\"触屏事件的注意点\"></a>触屏事件的注意点</h3><h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求:\"></a>需求:</h4><ol>\n<li>鼠标事件不能模拟多指触控</li>\n<li>click点击事件在移动端存在延迟<ol>\n<li>原因  手机厂商为了用户更方便的放大页面</li>\n<li>延迟机制:<ol>\n<li>第一次点击后,先等待一段时间 这一段时间过后 <ol>\n<li>判断有没有第二次的点击发生 有 触发双击放大</li>\n<li>没有的再触发单击</li>\n</ol>\n</li>\n<li>不管有没有第二次的点击 都需要等待 -  延迟</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>触屏事件不能在pc端上触发</li>\n<li>建议绑定事件的时候 用 addEventListener  来绑定  </li>\n</ol>\n<h4 id=\"手势封装tap\"><a href=\"#手势封装tap\" class=\"headerlink\" title=\"手势封装tap\"></a>手势封装tap</h4><p>判断依据:</p>\n<ol>\n<li>手指个数不能超过1</li>\n<li>按下时间不能超过300ms</li>\n<li>滑动距离不能超过5px</li>\n</ol>\n<h4 id=\"手势封装swipe\"><a href=\"#手势封装swipe\" class=\"headerlink\" title=\"手势封装swipe\"></a>手势封装swipe</h4><p>判断依据:</p>\n<ol>\n<li>手指个数不能超过1</li>\n<li>按下时间不能超过800ms</li>\n<li>滑动距离不能小于15px</li>\n</ol>\n<h3 id=\"京东轮播图\"><a href=\"#京东轮播图\" class=\"headerlink\" title=\"京东轮播图\"></a>京东轮播图</h3><h4 id=\"过渡结束事件\"><a href=\"#过渡结束事件\" class=\"headerlink\" title=\"过渡结束事件\"></a>过渡结束事件</h4><p>transitionend 每一次过渡结束的时候 都会触发一次</p>\n<h3 id=\"移动端轮播图插件-swiper-js\"><a href=\"#移动端轮播图插件-swiper-js\" class=\"headerlink\" title=\"移动端轮播图插件 swiper.js\"></a>移动端轮播图插件 swiper.js</h3><p>我们使用的版本是3.x版本</p>\n<p>使用教程看官网即可 </p>\n<p><a href=\"http://www.swiper.com.cn/\" target=\"_blank\" rel=\"noopener\">网站</a></p>\n<h3 id=\"vs-code-插件\"><a href=\"#vs-code-插件\" class=\"headerlink\" title=\"vs code 插件\"></a>vs code 插件</h3><p>1 安装 ease Server 插件 (同步刷新功能)</p>\n<p>2 在当前的html页面中 输入 <code>ctrl+shift+enter</code></p>\n<h3 id=\"自己构建zepto\"><a href=\"#自己构建zepto\" class=\"headerlink\" title=\"自己构建zepto\"></a>自己构建zepto</h3><p>1 先安装好 <strong>nodejs</strong>   在cmd中输入 <code>node -v</code>  如果出现了版本号 证明安装成功了 </p>\n<p>2 在zepto文件夹内 按下 <code>shift+鼠标右键</code> 弹出命令行窗口</p>\n<p>3 输入 <code>npm install</code></p>\n<p>4 执行编译 <code>npm run-script dist</code></p>\n<p>5 自己设置要编译的模块 <code>SET MODULES=zepto event data touch</code>  </p>\n<p>6 执行编译 <code>npm run-script dist</code></p>\n<h1 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念:\"></a>概念:</h2><p>用一套代码 可以做一个适应不同宽度的设备,还可以提供比较友好的用户体验</p>\n<h2 id=\"核心原理\"><a href=\"#核心原理\" class=\"headerlink\" title=\"核心原理:\"></a>核心原理:</h2><p>媒体查询</p>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><p>一种css的语法,可以根据设备的不同(主要是宽度),去加载对应的css代码</p>\n<h2 id=\"媒体查询的知识点\"><a href=\"#媒体查询的知识点\" class=\"headerlink\" title=\"媒体查询的知识点\"></a>媒体查询的知识点</h2><h3 id=\"媒体类型\"><a href=\"#媒体类型\" class=\"headerlink\" title=\"媒体类型\"></a>媒体类型</h3><ol>\n<li>all 包括一下两个类型</li>\n<li>screen 带正常屏幕的设备</li>\n<li>print 打印机</li>\n</ol>\n<h3 id=\"媒体特性\"><a href=\"#媒体特性\" class=\"headerlink\" title=\"媒体特性\"></a>媒体特性</h3><ol>\n<li><p>宽度</p>\n</li>\n<li><p>高度</p>\n</li>\n<li><p>视口的宽高比      </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 2/1 不能改为  2</span><br><span class=\"line\">@media screen and (aspect-ratio:2/1)&#123;</span><br><span class=\"line\">  body&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"媒体关键字\"><a href=\"#媒体关键字\" class=\"headerlink\" title=\"媒体关键字\"></a>媒体关键字</h3><ol>\n<li>and</li>\n<li>or 代码中写逗号 来体现</li>\n<li>not 取反</li>\n<li>only 用来做兼容 </li>\n</ol>\n<h3 id=\"媒体查询的引入方式\"><a href=\"#媒体查询的引入方式\" class=\"headerlink\" title=\"媒体查询的引入方式\"></a>媒体查询的引入方式</h3><ol>\n<li><strong>在css(和一般的样式代码是同层级)中直接写媒体查询-用得最多</strong></li>\n<li>在style标签上 通过属性的方式 </li>\n<li>在link标签上 通过属性的方式 </li>\n</ol>\n<h2 id=\"bootstrap框架\"><a href=\"#bootstrap框架\" class=\"headerlink\" title=\"bootstrap框架\"></a>bootstrap框架</h2><h2 id=\"栅格系统\"><a href=\"#栅格系统\" class=\"headerlink\" title=\"栅格系统\"></a>栅格系统</h2><p>是把所有屏幕(4种屏幕) 分成了12份 每一列占一份</p>\n<h3 id=\"4种宽度不同的屏幕\"><a href=\"#4种宽度不同的屏幕\" class=\"headerlink\" title=\"4种宽度不同的屏幕\"></a>4种宽度不同的屏幕</h3><ol>\n<li>极小屏幕  xs &lt; 768px</li>\n<li>小屏幕  sm   768-992</li>\n<li>中等-普通屏幕   md   992-1200</li>\n<li>大屏幕  lg  &gt; 1200</li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤:\"></a>步骤:</h3><ol>\n<li>先写容器 .container(版心的宽度)  .container-fluid (全屏)</li>\n<li>写 .row</li>\n<li>再去写栅格(要注意标明屏幕的种类)</li>\n</ol>\n<h2 id=\"工具提示\"><a href=\"#工具提示\" class=\"headerlink\" title=\"工具提示\"></a>工具提示</h2><p>用法:</p>\n<ol>\n<li>直接粘贴标签的代码</li>\n<li>必须要写上一段初始化的js代码 </li>\n</ol>\n<h2 id=\"微金所\"><a href=\"#微金所\" class=\"headerlink\" title=\"微金所\"></a>微金所</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><h3 id=\"a标签不能嵌套a标签\"><a href=\"#a标签不能嵌套a标签\" class=\"headerlink\" title=\"a标签不能嵌套a标签\"></a>a标签不能嵌套a标签</h3><h3 id=\"nth-child和nth-of-type的区别\"><a href=\"#nth-child和nth-of-type的区别\" class=\"headerlink\" title=\"nth-child和nth-of-type的区别\"></a>nth-child和nth-of-type的区别</h3><ol>\n<li>nth-child 计算子元素索引的时候 会计算其他类型的标签</li>\n<li>nth-of-type 计算子元素的索引的时候 不会计算其他类型的标签</li>\n</ol>\n<h3 id=\"列嵌套-有时候代码怎么简单怎么写\"><a href=\"#列嵌套-有时候代码怎么简单怎么写\" class=\"headerlink\" title=\"列嵌套-有时候代码怎么简单怎么写\"></a>列嵌套-有时候代码怎么简单怎么写</h3><h3 id=\"在做大的布局的时候容器的时候-建议使用-块级元素-千万不要写行内嵌套块级元素\"><a href=\"#在做大的布局的时候容器的时候-建议使用-块级元素-千万不要写行内嵌套块级元素\" class=\"headerlink\" title=\"在做大的布局的时候容器的时候 建议使用 块级元素 (千万不要写行内嵌套块级元素)\"></a>在做大的布局的时候容器的时候 建议使用 块级元素 (千万不要写行内嵌套块级元素)</h3><h1 id=\"rem-媒体查询-布局\"><a href=\"#rem-媒体查询-布局\" class=\"headerlink\" title=\"rem+媒体查询 布局\"></a>rem+媒体查询 布局</h1><h2 id=\"rem和px和em的区别\"><a href=\"#rem和px和em的区别\" class=\"headerlink\" title=\"rem和px和em的区别\"></a>rem和px和em的区别</h2><ol>\n<li>px是绝对长度单位</li>\n<li>em是相对长度单位 相对于自身的fontsize<ol>\n<li>谷歌浏览器默认字体是16px</li>\n<li>谷歌浏览器默认最小字体是12px</li>\n</ol>\n</li>\n<li>rem 是相对长度单位  相对于html标签的fontsize</li>\n</ol>\n<h2 id=\"实现屏幕适配的步骤\"><a href=\"#实现屏幕适配的步骤\" class=\"headerlink\" title=\"实现屏幕适配的步骤\"></a>实现屏幕适配的步骤</h2><ol>\n<li>使用rem+媒体查询还原设计稿</li>\n<li>使用rem+媒体查询去做屏幕适配</li>\n</ol>\n<h2 id=\"适配的注意事项\"><a href=\"#适配的注意事项\" class=\"headerlink\" title=\"适配的注意事项\"></a>适配的注意事项</h2><ol>\n<li>基础值 和设计稿等宽的媒体查询里面的html标签的fontsize  为100px</li>\n<li>写100px 是为了方便计算</li>\n<li>公式: <code>fontsize=基础值*要适配的屏幕/设计稿的宽度</code></li>\n<li>不建议使用js来代替媒体查询的功能</li>\n<li>任何宽度的设计稿都可以用这套解决方案</li>\n<li>pc端的滚动条占宽度 移动端的滚动条不占宽度</li>\n</ol>\n<h2 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h2><p><a href=\"http://www.biaonimeia.com/project\" target=\"_blank\" rel=\"noopener\">标你妹</a></p>\n<p><a href=\"http://mxd.tencent.com/wp-content/uploads/2014/11/rem.html\" target=\"_blank\" rel=\"noopener\">px转rem工具</a></p>\n<h1 id=\"开发技巧\"><a href=\"#开发技巧\" class=\"headerlink\" title=\"开发技巧\"></a>开发技巧</h1><h2 id=\"less和souce-map\"><a href=\"#less和souce-map\" class=\"headerlink\" title=\"less和souce map\"></a>less和souce map</h2><h3 id=\"souce-map\"><a href=\"#souce-map\" class=\"headerlink\" title=\"souce map\"></a>souce map</h3><p>存放了less文件和css文件的映射关系</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以从页面调试工具里面 直接映射会对应的less文件</p>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤:\"></a>步骤:</h3><ol>\n<li><p>使用工具创建souce map (考拉 vs code中插件 easyless)</p>\n<ol>\n<li><p>考拉</p>\n</li>\n<li><p>easyless 插件</p>\n<ol>\n<li><p>需要在vs code 的设置中 加入以下代码 就可以了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;less.compile&quot;: &#123;</span><br><span class=\"line\">        &quot;sourceMap&quot;: true  // true =&gt; generate source maps (.css.map files)</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>需要在谷歌浏览器中开启</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"canvas\"><a href=\"#canvas\" class=\"headerlink\" title=\"canvas\"></a>canvas</h1><h2 id=\"canvas画线条基本步骤\"><a href=\"#canvas画线条基本步骤\" class=\"headerlink\" title=\"canvas画线条基本步骤\"></a>canvas画线条基本步骤</h2><ol>\n<li><p>编写canvas标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas&gt;<span class=\"regexp\">/&lt;canvas&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取canvas的dom元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cas=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"canvas\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取canvas的上下文对象(画笔)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ctx=cas.getContext(<span class=\"string\">\"2d\"</span>);</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>设置起点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.moveTo(x,y);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置终点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.lineTo(x,y);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>描边(连线)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.stroke();</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"设置canvas的宽度和高度\"><a href=\"#设置canvas的宽度和高度\" class=\"headerlink\" title=\"设置canvas的宽度和高度\"></a>设置canvas的宽度和高度</h2><ol>\n<li>在css中直接设置宽度和高度 其实是拉伸</li>\n<li>在标签中通过属性的方式写宽度和高度(不叫做行内!!! )</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li><p>如果不写moveTo的话 那么lineTo 既是终点也是起点</p>\n</li>\n<li><p>首尾相连:  </p>\n<ol>\n<li>手动写lineTo</li>\n<li>ctx.closePath();</li>\n</ol>\n</li>\n<li><p>h5新标签</p>\n<ol>\n<li><p>color标签 一般结合 onchange一起使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<input type=\"color\">\n</blockquote>\n</li>\n<li><p>number标签</p>\n<ol>\n<li>min 最小值</li>\n<li>max 最大值</li>\n<li>value 当前的值</li>\n<li>step 步长</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">min</span>=<span class=\"string\">0</span> <span class=\"attr\">max</span>=<span class=\"string\">10</span> <span class=\"attr\">value</span>=<span class=\"string\">0</span> <span class=\"attr\">step</span>=<span class=\"string\">1</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<input type=\"number\">\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>操作数组的4个方法</p>\n<ol>\n<li><p><strong>原数组 arr=[a,b,c,d,e];</strong></p>\n</li>\n<li><p>push 往屁股添加一个值 返回数组的长度  如: </p>\n<blockquote>\n<p>6= arr.push(f)  arr= [a, b, c, d,e,f];</p>\n</blockquote>\n</li>\n<li><p>pop   从屁股移除一个值 返回被删除的值 如: </p>\n<blockquote>\n<p>e= arr.pop()   arr=[a,b,c,d];</p>\n</blockquote>\n</li>\n<li><p>unshift 从头部添加一个值 返回数组的长度如:</p>\n<blockquote>\n<p>6= arr.unshift(f)  arr=[f,a,b,c,d,e];</p>\n</blockquote>\n</li>\n<li><p>shift 从头部删除一个值 返回被删除的值 如:</p>\n<blockquote>\n<p>a= arr.shift()  arr=[b,c,d,e];</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>eval 方法 可以把字符串变成代码执行  不要在工作里面出现 </p>\n</li>\n</ol>\n<h2 id=\"stroke和fill\"><a href=\"#stroke和fill\" class=\"headerlink\" title=\"stroke和fill\"></a>stroke和fill</h2><ol>\n<li>stroke 描边-对在同一条路径上的图形进行描边(封闭和不封闭)</li>\n<li>fill 填充 对同一条路径上的<strong>用线条画(不能填充strokeRect()的矩形)</strong>的封闭图形进行填充</li>\n</ol>\n<h2 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h2><ol>\n<li>路径也是图形</li>\n<li>判断两个图形是否在同一条路径上 不能够靠视觉上的首尾相连来判断</li>\n<li>而是看有没有调用 ctx.beginPath();</li>\n<li>一般在画新图形之前,最好要 开启一条新的路径 </li>\n</ol>\n<h2 id=\"线条属性\"><a href=\"#线条属性\" class=\"headerlink\" title=\"线条属性\"></a>线条属性</h2><ol>\n<li><p>颜色</p>\n<blockquote>\n<p>ctx.strokeStyle=”red”;</p>\n<p>ctx.fillStyle=”red”;</p>\n</blockquote>\n</li>\n<li><p>宽度</p>\n<blockquote>\n<p>ctx.lineWidth=10;</p>\n</blockquote>\n</li>\n<li><p>线段末端类型</p>\n<ol>\n<li>miter 默认</li>\n<li>round 突出圆角</li>\n<li>square 突出矩形</li>\n<li>ctx.lineCap=”miter”;</li>\n</ol>\n</li>\n<li><p>线段相交点的类型</p>\n<ol>\n<li>butt 屁股 默认值</li>\n<li>round 圆角</li>\n<li>bevel 平切</li>\n<li>ctx.lineJoin=”butt”;</li>\n</ol>\n</li>\n<li><p>虚线</p>\n<ol>\n<li>setLineDash([实线的长度,实线的间隙的长度……])  设置虚线</li>\n<li>getLineDash() 获取虚线</li>\n<li>lineDashOffset=1 设置虚线的偏移值</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"内置画矩形和擦除\"><a href=\"#内置画矩形和擦除\" class=\"headerlink\" title=\"内置画矩形和擦除\"></a>内置画矩形和擦除</h2><ol>\n<li>画矩形 stokeRect(x,y,width.height)</li>\n<li>填充矩形 fillRect(x,y,width,height)</li>\n<li>擦除 clearRect(x,y,width,height)</li>\n</ol>\n<h2 id=\"内置画圆弧\"><a href=\"#内置画圆弧\" class=\"headerlink\" title=\"内置画圆弧\"></a>内置画圆弧</h2><ol>\n<li>360 度=PI*2   </li>\n<li>return  Math.PI/180* num</li>\n<li>ctx.arc(圆心x,圆心y,半径,开始的<strong>弧度</strong>,结束的<strong>弧度</strong>,?是否反向)</li>\n</ol>\n<h2 id=\"内置-画图片\"><a href=\"#内置-画图片\" class=\"headerlink\" title=\"内置 画图片\"></a>内置 画图片</h2><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤:\"></a>步骤:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img=<span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">img.src=<span class=\"string\">\"路径\"</span>;</span><br><span class=\"line\">img.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ctx.drawImage()......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法解释\"><a href=\"#方法解释\" class=\"headerlink\" title=\"方法解释\"></a>方法解释</h3><ol>\n<li>3个参数  drawImage(图片对象,画在画布的x,画在画布的y);</li>\n<li>5个参数  drawImage(图片对象,画在画布的x,画在画布的y,画多宽,画多高);</li>\n<li>9个参数 drawImage(图片对象, 原图的x,原图的y,原图的宽,原图的高, 画在画布的x,画在画布的y,画多宽,画多高);</li>\n</ol>\n<h2 id=\"渐变\"><a href=\"#渐变\" class=\"headerlink\" title=\"渐变\"></a>渐变</h2><p>决定渐变图案的因素</p>\n<ol>\n<li>颜色</li>\n<li>方向</li>\n<li>长度</li>\n</ol>\n<p>代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g=ctx.creatLinearGradient(开始的坐标x,y,结束的坐标x,y);</span><br><span class=\"line\">g.addColorStop(<span class=\"number\">0</span>,<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">g.addColorStop(<span class=\"number\">1</span>,<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\">ctx.strokeStyle=g;</span><br><span class=\"line\">ctx.fillStyle=g;</span><br><span class=\"line\">ctx.fillRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><p>ctx.strokeText(“文本”,x,y);</p>\n<p>ctx.fillText(“文本”,x,y);</p>\n<p>ctx.font=”50px 宋体”</p>\n<blockquote>\n<p>font的设置和在css中的设置一样</p>\n</blockquote>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><p>ctx.shadowBlur  模糊值</p>\n<p>ctx.shadowColor 颜色</p>\n<p>ctx.shadowOffsetX x 偏移</p>\n<p>ctx.shadowOffsetY y 偏移</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.shadowBlur=<span class=\"number\">10</span>;</span><br><span class=\"line\">ctx.shadowColor=<span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">ctx.shadowOffsetX=<span class=\"number\">10</span>;</span><br><span class=\"line\">ctx.shadowOffsetY=<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"canvas中的转换\"><a href=\"#canvas中的转换\" class=\"headerlink\" title=\"canvas中的转换\"></a>canvas中的转换</h2><h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><h4 id=\"css3中的移动和canvas中的移动的区别\"><a href=\"#css3中的移动和canvas中的移动的区别\" class=\"headerlink\" title=\"css3中的移动和canvas中的移动的区别\"></a>css3中的移动和canvas中的移动的区别</h4><h5 id=\"css3中的移动\"><a href=\"#css3中的移动\" class=\"headerlink\" title=\"css3中的移动\"></a>css3中的移动</h5><ol>\n<li>移动的是自身的dom元素</li>\n<li>移动的值 是覆盖的 先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(200px)</li>\n<li>移动的单位 一个 百分比 %  一个是像素 px </li>\n</ol>\n<h5 id=\"canvas中的移动\"><a href=\"#canvas中的移动\" class=\"headerlink\" title=\"canvas中的移动\"></a>canvas中的移动</h5><ol>\n<li><p>移动的是坐标系</p>\n</li>\n<li><p>移动的值是叠加的  先 translateX(100px) 再 tranlateX(200px) 最终的值 是 ranlateX(300px)</p>\n</li>\n<li><p>单位  不用写单位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.translate(1,1)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><h4 id=\"css3中的旋转和canvas中的旋转的区别\"><a href=\"#css3中的旋转和canvas中的旋转的区别\" class=\"headerlink\" title=\"css3中的旋转和canvas中的旋转的区别\"></a>css3中的旋转和canvas中的旋转的区别</h4><h5 id=\"css3中的旋转\"><a href=\"#css3中的旋转\" class=\"headerlink\" title=\"css3中的旋转\"></a>css3中的旋转</h5><ol>\n<li>旋转的自身的dom元素</li>\n<li>旋转的值 是覆盖的 </li>\n<li>单位 是  角度</li>\n<li>旋转的中心点 是元素的中心 center center</li>\n</ol>\n<h5 id=\"canvas中的旋转\"><a href=\"#canvas中的旋转\" class=\"headerlink\" title=\"canvas中的旋转\"></a>canvas中的旋转</h5><ol>\n<li>旋转的是坐标系</li>\n<li>旋转的值 是叠加的</li>\n<li>单位 是 弧度!!!! </li>\n<li>旋转的中心点是坐标系的圆点 0 0 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.rotate(degToArc(10));</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>环境 值 坐标系和线条属性 </p>\n<h3 id=\"保存和还原\"><a href=\"#保存和还原\" class=\"headerlink\" title=\"保存和还原\"></a>保存和还原</h3><p>保存的是 坐标系 和 线条属性</p>\n<p>还原的是 坐标系 和 线条属性</p>\n<p>保存了几次 就可以还原几次 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.save()</span><br><span class=\"line\">ctx.restore();</span><br></pre></td></tr></table></figure>\n<h3 id=\"擦除和重置\"><a href=\"#擦除和重置\" class=\"headerlink\" title=\"擦除和重置\"></a>擦除和重置</h3><h4 id=\"擦除\"><a href=\"#擦除\" class=\"headerlink\" title=\"擦除\"></a>擦除</h4><p>ctx.clearRect(<strong>0,0</strong>,100,100)   有时候 坐标系改变了的话 再使用擦除这个代码  坐标不一定是 <strong>0   0</strong>  </p>\n<p>不能擦除坐标系  不能擦除线条属性(颜色 大小 虚线 末端  相交🍌)</p>\n<h4 id=\"重置\"><a href=\"#重置\" class=\"headerlink\" title=\"重置\"></a>重置</h4><p>cas.width=cas.width  </p>\n<p>可以擦除画图的图案  可以重置坐标系  可以重置线条属性  </p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><h3 id=\"标签实现\"><a href=\"#标签实现\" class=\"headerlink\" title=\"标签实现\"></a>标签实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"资源路径\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"资源名字(可以随便写)\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1 创建a标签</span><br><span class=\"line\">var aDom=document.createElement(&quot;a&quot;);</span><br><span class=\"line\">// 2 指定 href</span><br><span class=\"line\">aDom.href=&quot;资源路径&quot;;</span><br><span class=\"line\">// 3 设置download属性</span><br><span class=\"line\">aDom.download=&quot;五年高考&quot;;</span><br><span class=\"line\">// 4 手动触发 a标签的点击行为</span><br><span class=\"line\">aDom.click();//它是个方法 不是 事件</span><br></pre></td></tr></table></figure>\n<h2 id=\"画布保存和下载\"><a href=\"#画布保存和下载\" class=\"headerlink\" title=\"画布保存和下载\"></a>画布保存和下载</h2><h3 id=\"获取canvas画布的路径-cas-toDataURL\"><a href=\"#获取canvas画布的路径-cas-toDataURL\" class=\"headerlink\" title=\"获取canvas画布的路径 cas.toDataURL()\"></a>获取canvas画布的路径 cas.toDataURL()</h3><h4 id=\"cas-ToDataURL-图片类型-质量\"><a href=\"#cas-ToDataURL-图片类型-质量\" class=\"headerlink\" title=\"cas.ToDataURL(图片类型,质量)\"></a>cas.ToDataURL(图片类型,质量)</h4><h5 id=\"图片类型\"><a href=\"#图片类型\" class=\"headerlink\" title=\"图片类型\"></a>图片类型</h5><ol>\n<li>image/png<ol>\n<li>默认值 即 cas.toDataURL() 既可以</li>\n<li>不能压缩</li>\n</ol>\n</li>\n<li>image/jpeg<ol>\n<li>可以压缩  </li>\n<li>默认会把透明背景填充成黑色</li>\n<li>建议在使用它的时候 先手动fill 画布 成白色</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"质量-0-1-0-最低-1-最高\"><a href=\"#质量-0-1-0-最低-1-最高\" class=\"headerlink\" title=\"质量(0-1) 0 最低 1 最高\"></a>质量(0-1) 0 最低 1 最高</h5><h2 id=\"画视频\"><a href=\"#画视频\" class=\"headerlink\" title=\"画视频\"></a>画视频</h2><p>将video标签传入 ctx.drawImage(video,0,0) 即可 参数和 之前画图片的一样</p>\n<h3 id=\"在线视频截图下载\"><a href=\"#在线视频截图下载\" class=\"headerlink\" title=\"在线视频截图下载\"></a>在线视频截图下载</h3><p>报错: <code>Uncaught DOMException: Failed to execute &#39;toDataURL&#39; on &#39;HTMLCanvasElement&#39;: Tainted canvases may not be exported.</code></p>\n<p>解决:<strong>以服务器的形式打开即可</strong></p>\n<h2 id=\"和canvas相关的技术\"><a href=\"#和canvas相关的技术\" class=\"headerlink\" title=\"和canvas相关的技术\"></a>和canvas相关的技术</h2><ol>\n<li>echartjs<ol>\n<li>百度 数据展示 文档详细 基于配置</li>\n</ol>\n</li>\n<li>konvajs<ol>\n<li>国外 自定义图形 类jq和js的关系</li>\n</ol>\n</li>\n<li>three.js<ol>\n<li>国外 3d模拟 门槛高 电脑性能要求高</li>\n</ol>\n</li>\n<li>d3.js<ol>\n<li>国外 大数据 门槛中 数据分析</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"移动web\"><a href=\"#移动web\" class=\"headerlink\" title=\"移动web\"></a>移动web</h1><h2 id=\"失真\"><a href=\"#失真\" class=\"headerlink\" title=\"失真\"></a>失真</h2><h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>图片的清晰度和设备的清晰度不一致</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案:\"></a>解决方案:</h3><ol>\n<li><p>不用解决 忍受 模糊 </p>\n</li>\n<li><p>全部高清图 最常用 </p>\n</li>\n<li><p>srcset 设备像素比的方式 devicePixelRatio  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./images/科比.png\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"./images/赵丽颖.png 2x,./images/高圆圆.png 3x\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ol>\n<li>逻辑分辨率:屏幕的宽和高 单位 是px  </li>\n<li>设备分辨率:屏幕里面一共拥有的物理像素点的个数!!!</li>\n<li>对角线:一般说的手机屏幕尺寸都是指对角线的长度 单位 是英寸 </li>\n<li>PPI (Pixels Per Inch)也叫像素密度，所表示的是每英寸所拥有的像素数量 值越高,越清晰</li>\n</ol>\n<h2 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h2><h3 id=\"布局视口\"><a href=\"#布局视口\" class=\"headerlink\" title=\"布局视口\"></a>布局视口</h3><p>被手机厂商设置宽度为980px的视口</p>\n<h3 id=\"理想视口\"><a href=\"#理想视口\" class=\"headerlink\" title=\"理想视口\"></a>理想视口</h3><p>视口宽度和屏幕等宽并且使用绝对长度单位写元素大小 是固定</p>\n<p>在代码里面如何写处理</p>\n<p><code>meta:vp+tab</code> </p>\n<h4 id=\"不标准的\"><a href=\"#不标准的\" class=\"headerlink\" title=\"不标准的\"></a>不标准的</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"标准的写法\"><a href=\"#标准的写法\" class=\"headerlink\" title=\"标准的写法\"></a>标准的写法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0,maximum-scale=1,minimum-scale=1,user-scalable=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><h3 id=\"编译工具\"><a href=\"#编译工具\" class=\"headerlink\" title=\"编译工具\"></a>编译工具</h3><h4 id=\"考拉\"><a href=\"#考拉\" class=\"headerlink\" title=\"考拉\"></a>考拉</h4><h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ol>\n<li>需要将 整个 <strong>css文件夹</strong>  都拖放到考拉当中</li>\n<li>存放less文件的文件夹的名字不能够包含 <strong>less</strong> 字段</li>\n<li>新创建less文件的时候 需要手动点击一下 考拉 里面的刷新按钮 <strong>reflash</strong></li>\n</ol>\n<h4 id=\"vs-code-中的插件-easyless\"><a href=\"#vs-code-中的插件-easyless\" class=\"headerlink\" title=\"vs code 中的插件 easyless\"></a>vs code 中的插件 easyless</h4><p>直接在vs code中下载 启用即可  </p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法:\"></a>语法:</h3><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@myColor:</span>red;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"variable\">@myColor</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不带参数的函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.changeColor1</span>()&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor1</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 带参数的函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.changeColor2</span>(<span class=\"variable\">@c</span>)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"variable\">@c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor2</span>(red);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 带默认参数的函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.changeColor3</span>(<span class=\"variable\">@c</span>:black)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:<span class=\"variable\">@c</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor3</span>();<span class=\"comment\">// color:black;</span></span><br><span class=\"line\">  <span class=\"selector-class\">.changeColor3</span>(red);<span class=\"comment\">// color:red;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:after</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">p</span>&#123;&#125;</span><br><span class=\"line\">  &gt;<span class=\"selector-tag\">section</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"base.less\"</span>;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这种注释不会被编译到css中</span></span><br><span class=\"line\"><span class=\"comment\">/* 这种注释会被编译到css中 */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h3><p>ghostlab</p>\n<p><a href=\"http://wetest.qq.com/cloud/index.php/help/cloudindex\" target=\"_blank\" rel=\"noopener\">云真机</a></p>\n<p>工作中如何对待:</p>\n<p>1 公司里面有测试 开发者的只要确保在 模拟器上 没有bug 就可以了.</p>\n<p>2 大公司里 有第三方的测试团队去测试  </p>\n<p>3 小小的公司  公司人少 只能够自己去测试 (再去研究真机调试的步骤)</p>\n<p>5 在学习的时候 可以先不用管真机调试 .以后用到的时候再去搭建环境和步骤就可以 了 !!! </p>\n<h2 id=\"触屏事件\"><a href=\"#触屏事件\" class=\"headerlink\" title=\"触屏事件\"></a>触屏事件</h2><h3 id=\"触屏事件的种类\"><a href=\"#触屏事件的种类\" class=\"headerlink\" title=\"触屏事件的种类\"></a>触屏事件的种类</h3><p>touchstart  手指按下屏幕</p>\n<p>touchemove  手指在屏幕上滑动</p>\n<p>touchend 手指离开屏幕</p>\n<h3 id=\"三个触摸点数组\"><a href=\"#三个触摸点数组\" class=\"headerlink\" title=\"三个触摸点数组\"></a>三个触摸点数组</h3><p>touches  屏幕上所有的触摸点的集合</p>\n<p>targetTouches 目标元素上的触摸点的集合</p>\n<p>changedTouches 在目标元素上发生了状态改变(进入 离开 移动)的触摸点的集合</p>\n<h3 id=\"三对坐标信息\"><a href=\"#三对坐标信息\" class=\"headerlink\" title=\"三对坐标信息\"></a>三对坐标信息</h3><p>clientX/Y 相对于视口的坐标</p>\n<p>pageX/Y 相对于页面的坐标</p>\n<p>screenX/Y 相对屏幕的坐标</p>\n<h3 id=\"触屏事件的注意点\"><a href=\"#触屏事件的注意点\" class=\"headerlink\" title=\"触屏事件的注意点\"></a>触屏事件的注意点</h3><h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求:\"></a>需求:</h4><ol>\n<li>鼠标事件不能模拟多指触控</li>\n<li>click点击事件在移动端存在延迟<ol>\n<li>原因  手机厂商为了用户更方便的放大页面</li>\n<li>延迟机制:<ol>\n<li>第一次点击后,先等待一段时间 这一段时间过后 <ol>\n<li>判断有没有第二次的点击发生 有 触发双击放大</li>\n<li>没有的再触发单击</li>\n</ol>\n</li>\n<li>不管有没有第二次的点击 都需要等待 -  延迟</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>触屏事件不能在pc端上触发</li>\n<li>建议绑定事件的时候 用 addEventListener  来绑定  </li>\n</ol>\n<h4 id=\"手势封装tap\"><a href=\"#手势封装tap\" class=\"headerlink\" title=\"手势封装tap\"></a>手势封装tap</h4><p>判断依据:</p>\n<ol>\n<li>手指个数不能超过1</li>\n<li>按下时间不能超过300ms</li>\n<li>滑动距离不能超过5px</li>\n</ol>\n<h4 id=\"手势封装swipe\"><a href=\"#手势封装swipe\" class=\"headerlink\" title=\"手势封装swipe\"></a>手势封装swipe</h4><p>判断依据:</p>\n<ol>\n<li>手指个数不能超过1</li>\n<li>按下时间不能超过800ms</li>\n<li>滑动距离不能小于15px</li>\n</ol>\n<h3 id=\"京东轮播图\"><a href=\"#京东轮播图\" class=\"headerlink\" title=\"京东轮播图\"></a>京东轮播图</h3><h4 id=\"过渡结束事件\"><a href=\"#过渡结束事件\" class=\"headerlink\" title=\"过渡结束事件\"></a>过渡结束事件</h4><p>transitionend 每一次过渡结束的时候 都会触发一次</p>\n<h3 id=\"移动端轮播图插件-swiper-js\"><a href=\"#移动端轮播图插件-swiper-js\" class=\"headerlink\" title=\"移动端轮播图插件 swiper.js\"></a>移动端轮播图插件 swiper.js</h3><p>我们使用的版本是3.x版本</p>\n<p>使用教程看官网即可 </p>\n<p><a href=\"http://www.swiper.com.cn/\" target=\"_blank\" rel=\"noopener\">网站</a></p>\n<h3 id=\"vs-code-插件\"><a href=\"#vs-code-插件\" class=\"headerlink\" title=\"vs code 插件\"></a>vs code 插件</h3><p>1 安装 ease Server 插件 (同步刷新功能)</p>\n<p>2 在当前的html页面中 输入 <code>ctrl+shift+enter</code></p>\n<h3 id=\"自己构建zepto\"><a href=\"#自己构建zepto\" class=\"headerlink\" title=\"自己构建zepto\"></a>自己构建zepto</h3><p>1 先安装好 <strong>nodejs</strong>   在cmd中输入 <code>node -v</code>  如果出现了版本号 证明安装成功了 </p>\n<p>2 在zepto文件夹内 按下 <code>shift+鼠标右键</code> 弹出命令行窗口</p>\n<p>3 输入 <code>npm install</code></p>\n<p>4 执行编译 <code>npm run-script dist</code></p>\n<p>5 自己设置要编译的模块 <code>SET MODULES=zepto event data touch</code>  </p>\n<p>6 执行编译 <code>npm run-script dist</code></p>\n<h1 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念:\"></a>概念:</h2><p>用一套代码 可以做一个适应不同宽度的设备,还可以提供比较友好的用户体验</p>\n<h2 id=\"核心原理\"><a href=\"#核心原理\" class=\"headerlink\" title=\"核心原理:\"></a>核心原理:</h2><p>媒体查询</p>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><p>一种css的语法,可以根据设备的不同(主要是宽度),去加载对应的css代码</p>\n<h2 id=\"媒体查询的知识点\"><a href=\"#媒体查询的知识点\" class=\"headerlink\" title=\"媒体查询的知识点\"></a>媒体查询的知识点</h2><h3 id=\"媒体类型\"><a href=\"#媒体类型\" class=\"headerlink\" title=\"媒体类型\"></a>媒体类型</h3><ol>\n<li>all 包括一下两个类型</li>\n<li>screen 带正常屏幕的设备</li>\n<li>print 打印机</li>\n</ol>\n<h3 id=\"媒体特性\"><a href=\"#媒体特性\" class=\"headerlink\" title=\"媒体特性\"></a>媒体特性</h3><ol>\n<li><p>宽度</p>\n</li>\n<li><p>高度</p>\n</li>\n<li><p>视口的宽高比      </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 2/1 不能改为  2</span><br><span class=\"line\">@media screen and (aspect-ratio:2/1)&#123;</span><br><span class=\"line\">  body&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"媒体关键字\"><a href=\"#媒体关键字\" class=\"headerlink\" title=\"媒体关键字\"></a>媒体关键字</h3><ol>\n<li>and</li>\n<li>or 代码中写逗号 来体现</li>\n<li>not 取反</li>\n<li>only 用来做兼容 </li>\n</ol>\n<h3 id=\"媒体查询的引入方式\"><a href=\"#媒体查询的引入方式\" class=\"headerlink\" title=\"媒体查询的引入方式\"></a>媒体查询的引入方式</h3><ol>\n<li><strong>在css(和一般的样式代码是同层级)中直接写媒体查询-用得最多</strong></li>\n<li>在style标签上 通过属性的方式 </li>\n<li>在link标签上 通过属性的方式 </li>\n</ol>\n<h2 id=\"bootstrap框架\"><a href=\"#bootstrap框架\" class=\"headerlink\" title=\"bootstrap框架\"></a>bootstrap框架</h2><h2 id=\"栅格系统\"><a href=\"#栅格系统\" class=\"headerlink\" title=\"栅格系统\"></a>栅格系统</h2><p>是把所有屏幕(4种屏幕) 分成了12份 每一列占一份</p>\n<h3 id=\"4种宽度不同的屏幕\"><a href=\"#4种宽度不同的屏幕\" class=\"headerlink\" title=\"4种宽度不同的屏幕\"></a>4种宽度不同的屏幕</h3><ol>\n<li>极小屏幕  xs &lt; 768px</li>\n<li>小屏幕  sm   768-992</li>\n<li>中等-普通屏幕   md   992-1200</li>\n<li>大屏幕  lg  &gt; 1200</li>\n</ol>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤:\"></a>步骤:</h3><ol>\n<li>先写容器 .container(版心的宽度)  .container-fluid (全屏)</li>\n<li>写 .row</li>\n<li>再去写栅格(要注意标明屏幕的种类)</li>\n</ol>\n<h2 id=\"工具提示\"><a href=\"#工具提示\" class=\"headerlink\" title=\"工具提示\"></a>工具提示</h2><p>用法:</p>\n<ol>\n<li>直接粘贴标签的代码</li>\n<li>必须要写上一段初始化的js代码 </li>\n</ol>\n<h2 id=\"微金所\"><a href=\"#微金所\" class=\"headerlink\" title=\"微金所\"></a>微金所</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><h3 id=\"a标签不能嵌套a标签\"><a href=\"#a标签不能嵌套a标签\" class=\"headerlink\" title=\"a标签不能嵌套a标签\"></a>a标签不能嵌套a标签</h3><h3 id=\"nth-child和nth-of-type的区别\"><a href=\"#nth-child和nth-of-type的区别\" class=\"headerlink\" title=\"nth-child和nth-of-type的区别\"></a>nth-child和nth-of-type的区别</h3><ol>\n<li>nth-child 计算子元素索引的时候 会计算其他类型的标签</li>\n<li>nth-of-type 计算子元素的索引的时候 不会计算其他类型的标签</li>\n</ol>\n<h3 id=\"列嵌套-有时候代码怎么简单怎么写\"><a href=\"#列嵌套-有时候代码怎么简单怎么写\" class=\"headerlink\" title=\"列嵌套-有时候代码怎么简单怎么写\"></a>列嵌套-有时候代码怎么简单怎么写</h3><h3 id=\"在做大的布局的时候容器的时候-建议使用-块级元素-千万不要写行内嵌套块级元素\"><a href=\"#在做大的布局的时候容器的时候-建议使用-块级元素-千万不要写行内嵌套块级元素\" class=\"headerlink\" title=\"在做大的布局的时候容器的时候 建议使用 块级元素 (千万不要写行内嵌套块级元素)\"></a>在做大的布局的时候容器的时候 建议使用 块级元素 (千万不要写行内嵌套块级元素)</h3><h1 id=\"rem-媒体查询-布局\"><a href=\"#rem-媒体查询-布局\" class=\"headerlink\" title=\"rem+媒体查询 布局\"></a>rem+媒体查询 布局</h1><h2 id=\"rem和px和em的区别\"><a href=\"#rem和px和em的区别\" class=\"headerlink\" title=\"rem和px和em的区别\"></a>rem和px和em的区别</h2><ol>\n<li>px是绝对长度单位</li>\n<li>em是相对长度单位 相对于自身的fontsize<ol>\n<li>谷歌浏览器默认字体是16px</li>\n<li>谷歌浏览器默认最小字体是12px</li>\n</ol>\n</li>\n<li>rem 是相对长度单位  相对于html标签的fontsize</li>\n</ol>\n<h2 id=\"实现屏幕适配的步骤\"><a href=\"#实现屏幕适配的步骤\" class=\"headerlink\" title=\"实现屏幕适配的步骤\"></a>实现屏幕适配的步骤</h2><ol>\n<li>使用rem+媒体查询还原设计稿</li>\n<li>使用rem+媒体查询去做屏幕适配</li>\n</ol>\n<h2 id=\"适配的注意事项\"><a href=\"#适配的注意事项\" class=\"headerlink\" title=\"适配的注意事项\"></a>适配的注意事项</h2><ol>\n<li>基础值 和设计稿等宽的媒体查询里面的html标签的fontsize  为100px</li>\n<li>写100px 是为了方便计算</li>\n<li>公式: <code>fontsize=基础值*要适配的屏幕/设计稿的宽度</code></li>\n<li>不建议使用js来代替媒体查询的功能</li>\n<li>任何宽度的设计稿都可以用这套解决方案</li>\n<li>pc端的滚动条占宽度 移动端的滚动条不占宽度</li>\n</ol>\n<h2 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h2><p><a href=\"http://www.biaonimeia.com/project\" target=\"_blank\" rel=\"noopener\">标你妹</a></p>\n<p><a href=\"http://mxd.tencent.com/wp-content/uploads/2014/11/rem.html\" target=\"_blank\" rel=\"noopener\">px转rem工具</a></p>\n<h1 id=\"开发技巧\"><a href=\"#开发技巧\" class=\"headerlink\" title=\"开发技巧\"></a>开发技巧</h1><h2 id=\"less和souce-map\"><a href=\"#less和souce-map\" class=\"headerlink\" title=\"less和souce map\"></a>less和souce map</h2><h3 id=\"souce-map\"><a href=\"#souce-map\" class=\"headerlink\" title=\"souce map\"></a>souce map</h3><p>存放了less文件和css文件的映射关系</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以从页面调试工具里面 直接映射会对应的less文件</p>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤:\"></a>步骤:</h3><ol>\n<li><p>使用工具创建souce map (考拉 vs code中插件 easyless)</p>\n<ol>\n<li><p>考拉</p>\n</li>\n<li><p>easyless 插件</p>\n<ol>\n<li><p>需要在vs code 的设置中 加入以下代码 就可以了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;less.compile&quot;: &#123;</span><br><span class=\"line\">        &quot;sourceMap&quot;: true  // true =&gt; generate source maps (.css.map files)</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>需要在谷歌浏览器中开启</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>\n</li>\n</ol>"},{"title":"Hello World","date":"2017-04-05T02:54:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/h.jpeg","_content":"## Welcome to my blog!\n\n本博客基于**Hexo**博客框架搭建，并部署在**GithubPages**上，仍在不断完善中。\n\n因为关于部署搭建的文章很多，所以我将不会赘述关于部署搭建相关的内容，不过在搭建的过程中的的确确遇到各种各样的小Bug，但是当网站搭建出来，老实说真的蛮开心的！\n\n<!--more-->\n\n页面的右下角是网站的“守护兽”，叫hijiki，毕竟我不经常有空更新，所以总要有人看家嘛！不要调戏它哦!超凶嘚！喵~\n\n如果你有什么想法或建议想与我联系，欢迎加我QQ1107840447或者你也可以邮箱发送到:mrgowell1994@gmail.com(墙外用户)或megowell@qq.com。\n\n最后，欢迎您的访问，大爷！有空常来看看哟！","source":"_posts/hello world.md","raw":"---\ntitle: Hello World\ndate: 2017-4-05 10:54\ntags: life\ncategories: blog\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/h.jpeg\n---\n## Welcome to my blog!\n\n本博客基于**Hexo**博客框架搭建，并部署在**GithubPages**上，仍在不断完善中。\n\n因为关于部署搭建的文章很多，所以我将不会赘述关于部署搭建相关的内容，不过在搭建的过程中的的确确遇到各种各样的小Bug，但是当网站搭建出来，老实说真的蛮开心的！\n\n<!--more-->\n\n页面的右下角是网站的“守护兽”，叫hijiki，毕竟我不经常有空更新，所以总要有人看家嘛！不要调戏它哦!超凶嘚！喵~\n\n如果你有什么想法或建议想与我联系，欢迎加我QQ1107840447或者你也可以邮箱发送到:mrgowell1994@gmail.com(墙外用户)或megowell@qq.com。\n\n最后，欢迎您的访问，大爷！有空常来看看哟！","slug":"hello-world","published":1,"updated":"2018-03-08T15:23:53.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc1k000lskrx90bnw7y9","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"Welcome-to-my-blog\"><a href=\"#Welcome-to-my-blog\" class=\"headerlink\" title=\"Welcome to my blog!\"></a>Welcome to my blog!</h2><p>本博客基于<strong>Hexo</strong>博客框架搭建，并部署在<strong>GithubPages</strong>上，仍在不断完善中。</p>\n<p>因为关于部署搭建的文章很多，所以我将不会赘述关于部署搭建相关的内容，不过在搭建的过程中的的确确遇到各种各样的小Bug，但是当网站搭建出来，老实说真的蛮开心的！</p>\n<a id=\"more\"></a>\n<p>页面的右下角是网站的“守护兽”，叫hijiki，毕竟我不经常有空更新，所以总要有人看家嘛！不要调戏它哦!超凶嘚！喵~</p>\n<p>如果你有什么想法或建议想与我联系，欢迎加我QQ1107840447或者你也可以邮箱发送到:mrgowell1994@gmail.com(墙外用户)或megowell@qq.com。</p>\n<p>最后，欢迎您的访问，大爷！有空常来看看哟！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Welcome-to-my-blog\"><a href=\"#Welcome-to-my-blog\" class=\"headerlink\" title=\"Welcome to my blog!\"></a>Welcome to my blog!</h2><p>本博客基于<strong>Hexo</strong>博客框架搭建，并部署在<strong>GithubPages</strong>上，仍在不断完善中。</p>\n<p>因为关于部署搭建的文章很多，所以我将不会赘述关于部署搭建相关的内容，不过在搭建的过程中的的确确遇到各种各样的小Bug，但是当网站搭建出来，老实说真的蛮开心的！</p>","more":"<p>页面的右下角是网站的“守护兽”，叫hijiki，毕竟我不经常有空更新，所以总要有人看家嘛！不要调戏它哦!超凶嘚！喵~</p>\n<p>如果你有什么想法或建议想与我联系，欢迎加我QQ1107840447或者你也可以邮箱发送到:mrgowell1994@gmail.com(墙外用户)或megowell@qq.com。</p>\n<p>最后，欢迎您的访问，大爷！有空常来看看哟！</p>"},{"title":"js知识点常记","date":"2017-05-13T05:24:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/js2.jpg","_content":"## 1.hasOwnProperty相关\n\n为了判断一个对象是否包含自定义属性而不是原型链上的属性，我们需要使用继承自 Object.prototype 的 hasOwnProperty方法。\nhasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。\n\n<!--more-->\n\n```javascript\n// 修改Object.prototype\nObject.prototype.bar = 1; \nvar foo = {goo: undefined};\n\nfoo.bar; // 1\n'bar' in foo; // true\n\nfoo.hasOwnProperty('bar'); // false\nfoo.hasOwnProperty('goo'); // true\n```\n\n\n\n> 注意: 通过判断一个属性是否 undefined 是不够的。 因为一个属性可能确实存在，只不过它的值被设置为 undefined。\n\n### hasOwnProperty 作为属性\n\nJavaScript 不会保护 hasOwnProperty 被非法占用，因此如果一个对象碰巧存在这个属性， 就需要使用外部的 hasOwnProperty 函数来获取正确的结果。\n\n```javascript\nvar foo = {\n    hasOwnProperty: function() {\n        return false;\n    },\n    bar: 'Here be dragons'\n};\n\nfoo.hasOwnProperty('bar'); // 总是返回 false\n\n// 使用其它对象的 hasOwnProperty，并将其上下文设置为foo\n({}).hasOwnProperty.call(foo, 'bar'); // true\n```\n\n\n\n当检查对象上某个属性是否存在时，hasOwnProperty 是唯一可用的方法。 同时在使用 for in loop遍历对象时，推荐总是使用 hasOwnProperty 方法， 这将会避免原型对象扩展带来的干扰。\n\n### for in 循环\n\n和 in 操作符一样，for in 循环同样在查找对象属性时遍历原型链上的所有属性。\n\n```javascript\n// 修改 Object.prototype\nObject.prototype.bar = 1;\n\nvar foo = {moo: 2};\nfor(var i in foo) {\n    console.log(i); // 输出两个属性：bar 和 moo\n}\n```\n\n\n\n> 注意: 由于 for in 总是要遍历整个原型链，因此如果一个对象的继承层次太深的话会影响性能。\n\n由于不可能改变 for in 自身的行为，因此有必要过滤出那些不希望出现在循环体中的属性， 这可以通过 Object.prototype 原型上的 hasOwnProperty 函数来完成。\n\n### 使用 hasOwnProperty 过滤\n\n```javascript\n// foo 变量是上例中的\nfor(var i in foo) {\n    if (foo.hasOwnProperty(i)) {\n        console.log(i);\n    }\n}\n```\n\n\n\n> 推荐总是使用 hasOwnProperty。不要对代码运行的环境做任何假设，不要假设原生对象是否已经被扩展了。\n\n## 2.命名函数的赋值表达式\n\n另外一个特殊的情况是将命名函数赋值给一个变量。\n\n```javascript\nvar foo = function bar() {\n    bar(); // 正常运行\n}\nbar(); // 出错：ReferenceError\n```\n\n\n\nbar 函数声明外是不可见的，这是因为我们已经把函数赋值给了 foo； 然而在 bar 内部依然可见。这是由于 JavaScript 的命名处理所致， 函数名在函数内总是可见的。\n\n> 注意:在IE8及IE8以下版本浏览器bar在外部也是可见的，是因为浏览器对命名函数赋值表达式进行了错误的解析， 解析成两个函数 foo 和 bar\n\n## 3.方法的赋值表达式\n\n另一个看起来奇怪的地方是函数别名，也就是将一个方法赋值给一个变量。\n\n```javascript\nvar test = someObject.methodTest;\ntest();\n```\n\n\n\n上例中，test 就像一个普通的函数被调用；因此，函数内的 this 将不再被指向到 someObject 对象。而是指向了window。\n\n## 4.循环中的闭包\n\n一个常见的错误出现在循环中使用闭包，假设我们需要在每次循环中调用循环序号\n\n```javascript\nfor(var i = 0; i < 10; i++) {\n    setTimeout(function() {\n        console.log(i);  \n    }, 1000);\n}\n```\n\n\n\n上面的代码不会输出数字 `0`到 `9`，而是会输出数字`10` 十次。\n\n当 console.log 被调用的时候，匿名函数保持对外部变量`i`的引用，此时 `for`循环已经结束，`i`的值被修改成了`10`.\n\n为了得到想要的结果，需要在每次循环中创建变量 `i`的拷贝。\n\n为了避免引用错误，为了正确的获得循环序号，最好使用 匿名包装器（注：其实就是我们通常说的自执行匿名函数）。\n\n```javascript\nfor(var i = 0; i < 10; i++) {\n    (function(e) {\n        setTimeout(function() {\n            console.log(e);  \n        }, 1000);\n    })(i);\n}\n```\n\n\n\n外部的匿名函数会立即执行，并把 i 作为它的参数，此时函数内 e 变量就拥有了 i 的一个拷贝。\n\n当传递给 setTimeout 的匿名函数执行时，它就拥有了对 e 的引用，而这个值是不会被循环改变的。\n\n有另一个方法完成同样的工作，那就是从匿名包装器中返回一个函数。这和上面的代码效果一样。\n\n```javascript\nfor(var i = 0; i < 10; i++) {\n    setTimeout((function(e) {\n        return function() {\n            console.log(e);\n        }\n    })(i), 1000)\n}\n```\n\n\n\n## 5.对象使用和属性\n\nJavaScript 中所有变量都可以当作对象使用，除了两个例外 `null` 和 `undefined`。\n\n```javascript\nfalse.toString(); // 'false'\n[1, 2, 3].toString(); // '1,2,3'\n\nfunction Foo(){}\nFoo.bar = 1;\nFoo.bar; // 1\n```\n\n\n\n一个常见的误解是数字的字面值（literal）不能当作对象使用。这是因为 JavaScript 解析器的一个错误， 它试图将点操作符解析为浮点数字面值的一部分。\n\n```javascript\n2.toString(); // 出错：SyntaxError\n```\n\n\n\n有很多变通方法可以让数字的字面值看起来像对象。\n\n```javascript\n2..toString(); // 第二个点号可以正常解析\n2 .toString(); // 注意点号前面的空格\n(2).toString(); // 2先被计算\n```\n\n\n\n删除属性的唯一方法是使用 `delete` 操作符；设置属性为 `undefined` 或者 `null` 并不能真正的删除属性， 而**仅仅**是移除了属性和值的关联。\n\n```javascript\nvar obj = {\n    bar: 1,\n    foo: 2,\n    baz: 3\n};\nobj.bar = undefined;\nobj.foo = null;\ndelete obj.baz;\n\nfor(var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n        console.log(i, '' + obj[i]);\n    }\n}\n```\n\n\n\n上面的输出结果有 `bar undefined` 和 `foo null` - 只有 `baz` 被真正的删除了，所以从输出结果中消失。\n\n## 6.`arguments` 对象\n\nJavaScript 中每个函数内都能访问一个特别变量 `arguments`。这个变量维护着所有传递到这个函数中的参数列表。\n\n`arguments` 变量**不是**一个数组（`Array`）。 尽管在语法上它有数组相关的属性 `length`，但它不从 `Array.prototype`继承，实际上它是一个对象（`Object`）。\n\n因此，无法对 `arguments` 变量使用标准的数组方法，比如 `push`, `pop` 或者 `slice`。 虽然使用 `for` 循环遍历也是可以的，但是为了更好的使用数组方法，最好把它转化为一个真正的数组。\n\n### 转化为数组\n\n下面的代码将会创建一个新的数组，包含所有 `arguments` 对象中的元素。\n\n```\nArray.prototype.slice.call(arguments);\n```\n\n`arguments` 对象为其内部属性以及函数形式参数创建 *getter* 和 *setter* 方法。\n\n因此，改变形参的值会影响到 `arguments` 对象的值，反之亦然。\n\n```javascript\nfunction foo(a, b, c) {\n    arguments[0] = 2;\n    a; // 2                                                           \n\n    b = 4;\n    arguments[1]; // 4\n\n    var d = c;\n    d = 9;\n    c; // 3\n}\nfoo(1, 2, 3);\n```\n\n\n\n如下一个例子：\n\n```javascript\nfunction sidEffecting(ary) { \n  ary[0] = ary[2];\n}\nfunction bar(a,b,c) { \n  c = 10\n  sidEffecting(arguments);\n  return a + b + c;\n}\nbar(1,1,1)\n```\n\n这里所有的更改都将生效，a和c的值都为10，a+b+c的值将为21。\n\n## 7.类型相关\n\n### 测试为定义变量\n\n```javascript\ntypeof foo !== 'undefined'\n```\n\n\n\n上面代码会检测 `foo` 是否已经定义；如果没有定义而直接使用会导致 `ReferenceError` 的异常。 这是 `typeof` 唯一有用的地方。当然也能判断出来基本类型。\n\n### `Object.prototype.toString检测一个对象的类型`\n\n为了检测一个对象的类型，强烈推荐使用 `Object.prototype.toString` 方法\n\n如下例子：\n\n```javascript\nObject.prototype.toString.call([])    // \"[object Array]\"\nObject.prototype.toString.call({})    // \"[object Object]\"\nObject.prototype.toString.call(2)    // \"[object Number]\"\n```\n\n\n\n### 类型转换\n\n内置类型（比如 `Number` 和 `String`）的构造函数在被调用时，使用或者不使用 `new` 的结果完全不同。\n\n```javascript\nnew Number(10) === 10;     // False, 对象与数字的比较\nNumber(10) === 10;         // True, 数字与数字的比较\nnew Number(10) + 0 === 10; // True, 由于隐式的类型转换\n```\n\n\n\n**转换为字符串**\n\n```javascript\n'' + 10 === '10'; // true\n```\n\n\n\n将一个值加上空字符串可以轻松转换为字符串类型。\n\n**转换为数字**\n\n```javascript\n+'10' === 10; // true\n```\n\n\n\n使用**一元**的加号操作符，可以把字符串转换为数字。\n\n**转换为布尔型**\n\n通过使用 否 操作符两次，可以把一个值转换为布尔型。\n\n```javascript\n!!'foo';   // true\n!!'';      // false\n!!'0';     // true\n!!'1';     // true\n!!'-1'     // true\n!!{};      // true\n!!true;    // true\n```\n\n\n\n## 8.为什么不要使用 `eval`\n\n`eval` 函数会在当前作用域中执行一段 JavaScript 代码字符串。\n\n```javascript\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    eval('foo = 3');\n    return foo;\n}\ntest(); // 3\nfoo; // 1\n```\n\n\n\n但是 `eval` 只在被**直接**调用并且调用函数就是 `eval` 本身时，才在当前作用域中执行。\n\n```javascript\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    var bar = eval;\n    bar('foo = 3');\n    return foo;\n}\ntest(); // 2\nfoo; // 3\n```\n\n\n\n上面的代码等价于在全局作用域中调用 `eval`，和下面两种写法效果一样：\n\n```javascript\n// 写法一：直接调用全局作用域下的 foo 变量\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    window.foo = 3;\n    return foo;\n}\ntest(); // 2\nfoo; // 3\n\n// 写法二：使用 call 函数修改 eval 执行的上下文为全局作用域\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    eval.call(window, 'foo = 3');\n    return foo;\n}\ntest(); // 2\nfoo; // 3\n```\n\n\n\n在**任何情况下**我们都应该避免使用 `eval` 函数。99.9% 使用 `eval` 的场景都有**不使用** `eval` 的解决方案。\n\n`eval` 也存在安全问题，因为它会执行**任意**传给它的代码， 在代码字符串未知或者是来自一个不信任的源时，绝对不要使用 `eval` 函数。\n\n## 9.定时器\n\n### 手工清空定时器\n\n```javascript\nvar id = setTimeout(foo, 1000);\nclearTimeout(id);\n```\n\n\n\n### 清除所有定时器\n\n由于没有内置的清除所有定时器的方法，可以采用一种暴力的方式来达到这一目的。\n\n```javascript\n// 清空\"所有\"的定时器\nfor(var i = 1; i < 1000; i++) {\n    clearTimeout(i);\n}\n```\n\n\n\n可能还有些定时器不会在上面代码中被清除（注**：**如果定时器调用时返回的 ID 值大于 1000）， 因此我们可以事先保存所有的定时器 ID，然后一把清除。\n\n建议**不要**在调用定时器函数时，为了向回调函数传递参数而使用字符串的形式。\n\n```javascript\nfunction foo(a, b, c) {}\n\n// 不要这样做\nsetTimeout('foo(1,2, 3)', 1000)\n\n// 可以使用匿名函数完成相同功能\nsetTimeout(function() {\n    foo(1, 2, 3);\n}, 1000)\n```\n\n\n\n> **绝对不要**使用字符串作为 `setTimeout` 或者 `setInterval` 的第一个参数， 这么写的代码明显质量很差。当需要向回调函数传递参数时，可以创建一个*匿名函数*，在函数内执行真实的回调函数。\n>\n> 另外，应该避免使用 `setInterval`，因为它的定时执行不会被 JavaScript 阻塞。\n>\n>  后续逐渐添加\n\n## 10，数组和字符串\n\n- split() join() 的区别\n  - 前者是切割成数组的形式，后者是将数组转换成字符串\n- 数组方法pop() push() unshift() shift()\n  - Push( )尾部添加\n  - pop ( )尾部删除\n  - Unshift( )头部添加\n  - shift( )头部删除 并返回删除项","source":"_posts/js知识点常记.md","raw":"---\ntitle: js知识点常记\ndate: 2017-5-13 13:24\ntags: js\ncategories: 前端\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/js2.jpg\n---\n## 1.hasOwnProperty相关\n\n为了判断一个对象是否包含自定义属性而不是原型链上的属性，我们需要使用继承自 Object.prototype 的 hasOwnProperty方法。\nhasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。\n\n<!--more-->\n\n```javascript\n// 修改Object.prototype\nObject.prototype.bar = 1; \nvar foo = {goo: undefined};\n\nfoo.bar; // 1\n'bar' in foo; // true\n\nfoo.hasOwnProperty('bar'); // false\nfoo.hasOwnProperty('goo'); // true\n```\n\n\n\n> 注意: 通过判断一个属性是否 undefined 是不够的。 因为一个属性可能确实存在，只不过它的值被设置为 undefined。\n\n### hasOwnProperty 作为属性\n\nJavaScript 不会保护 hasOwnProperty 被非法占用，因此如果一个对象碰巧存在这个属性， 就需要使用外部的 hasOwnProperty 函数来获取正确的结果。\n\n```javascript\nvar foo = {\n    hasOwnProperty: function() {\n        return false;\n    },\n    bar: 'Here be dragons'\n};\n\nfoo.hasOwnProperty('bar'); // 总是返回 false\n\n// 使用其它对象的 hasOwnProperty，并将其上下文设置为foo\n({}).hasOwnProperty.call(foo, 'bar'); // true\n```\n\n\n\n当检查对象上某个属性是否存在时，hasOwnProperty 是唯一可用的方法。 同时在使用 for in loop遍历对象时，推荐总是使用 hasOwnProperty 方法， 这将会避免原型对象扩展带来的干扰。\n\n### for in 循环\n\n和 in 操作符一样，for in 循环同样在查找对象属性时遍历原型链上的所有属性。\n\n```javascript\n// 修改 Object.prototype\nObject.prototype.bar = 1;\n\nvar foo = {moo: 2};\nfor(var i in foo) {\n    console.log(i); // 输出两个属性：bar 和 moo\n}\n```\n\n\n\n> 注意: 由于 for in 总是要遍历整个原型链，因此如果一个对象的继承层次太深的话会影响性能。\n\n由于不可能改变 for in 自身的行为，因此有必要过滤出那些不希望出现在循环体中的属性， 这可以通过 Object.prototype 原型上的 hasOwnProperty 函数来完成。\n\n### 使用 hasOwnProperty 过滤\n\n```javascript\n// foo 变量是上例中的\nfor(var i in foo) {\n    if (foo.hasOwnProperty(i)) {\n        console.log(i);\n    }\n}\n```\n\n\n\n> 推荐总是使用 hasOwnProperty。不要对代码运行的环境做任何假设，不要假设原生对象是否已经被扩展了。\n\n## 2.命名函数的赋值表达式\n\n另外一个特殊的情况是将命名函数赋值给一个变量。\n\n```javascript\nvar foo = function bar() {\n    bar(); // 正常运行\n}\nbar(); // 出错：ReferenceError\n```\n\n\n\nbar 函数声明外是不可见的，这是因为我们已经把函数赋值给了 foo； 然而在 bar 内部依然可见。这是由于 JavaScript 的命名处理所致， 函数名在函数内总是可见的。\n\n> 注意:在IE8及IE8以下版本浏览器bar在外部也是可见的，是因为浏览器对命名函数赋值表达式进行了错误的解析， 解析成两个函数 foo 和 bar\n\n## 3.方法的赋值表达式\n\n另一个看起来奇怪的地方是函数别名，也就是将一个方法赋值给一个变量。\n\n```javascript\nvar test = someObject.methodTest;\ntest();\n```\n\n\n\n上例中，test 就像一个普通的函数被调用；因此，函数内的 this 将不再被指向到 someObject 对象。而是指向了window。\n\n## 4.循环中的闭包\n\n一个常见的错误出现在循环中使用闭包，假设我们需要在每次循环中调用循环序号\n\n```javascript\nfor(var i = 0; i < 10; i++) {\n    setTimeout(function() {\n        console.log(i);  \n    }, 1000);\n}\n```\n\n\n\n上面的代码不会输出数字 `0`到 `9`，而是会输出数字`10` 十次。\n\n当 console.log 被调用的时候，匿名函数保持对外部变量`i`的引用，此时 `for`循环已经结束，`i`的值被修改成了`10`.\n\n为了得到想要的结果，需要在每次循环中创建变量 `i`的拷贝。\n\n为了避免引用错误，为了正确的获得循环序号，最好使用 匿名包装器（注：其实就是我们通常说的自执行匿名函数）。\n\n```javascript\nfor(var i = 0; i < 10; i++) {\n    (function(e) {\n        setTimeout(function() {\n            console.log(e);  \n        }, 1000);\n    })(i);\n}\n```\n\n\n\n外部的匿名函数会立即执行，并把 i 作为它的参数，此时函数内 e 变量就拥有了 i 的一个拷贝。\n\n当传递给 setTimeout 的匿名函数执行时，它就拥有了对 e 的引用，而这个值是不会被循环改变的。\n\n有另一个方法完成同样的工作，那就是从匿名包装器中返回一个函数。这和上面的代码效果一样。\n\n```javascript\nfor(var i = 0; i < 10; i++) {\n    setTimeout((function(e) {\n        return function() {\n            console.log(e);\n        }\n    })(i), 1000)\n}\n```\n\n\n\n## 5.对象使用和属性\n\nJavaScript 中所有变量都可以当作对象使用，除了两个例外 `null` 和 `undefined`。\n\n```javascript\nfalse.toString(); // 'false'\n[1, 2, 3].toString(); // '1,2,3'\n\nfunction Foo(){}\nFoo.bar = 1;\nFoo.bar; // 1\n```\n\n\n\n一个常见的误解是数字的字面值（literal）不能当作对象使用。这是因为 JavaScript 解析器的一个错误， 它试图将点操作符解析为浮点数字面值的一部分。\n\n```javascript\n2.toString(); // 出错：SyntaxError\n```\n\n\n\n有很多变通方法可以让数字的字面值看起来像对象。\n\n```javascript\n2..toString(); // 第二个点号可以正常解析\n2 .toString(); // 注意点号前面的空格\n(2).toString(); // 2先被计算\n```\n\n\n\n删除属性的唯一方法是使用 `delete` 操作符；设置属性为 `undefined` 或者 `null` 并不能真正的删除属性， 而**仅仅**是移除了属性和值的关联。\n\n```javascript\nvar obj = {\n    bar: 1,\n    foo: 2,\n    baz: 3\n};\nobj.bar = undefined;\nobj.foo = null;\ndelete obj.baz;\n\nfor(var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n        console.log(i, '' + obj[i]);\n    }\n}\n```\n\n\n\n上面的输出结果有 `bar undefined` 和 `foo null` - 只有 `baz` 被真正的删除了，所以从输出结果中消失。\n\n## 6.`arguments` 对象\n\nJavaScript 中每个函数内都能访问一个特别变量 `arguments`。这个变量维护着所有传递到这个函数中的参数列表。\n\n`arguments` 变量**不是**一个数组（`Array`）。 尽管在语法上它有数组相关的属性 `length`，但它不从 `Array.prototype`继承，实际上它是一个对象（`Object`）。\n\n因此，无法对 `arguments` 变量使用标准的数组方法，比如 `push`, `pop` 或者 `slice`。 虽然使用 `for` 循环遍历也是可以的，但是为了更好的使用数组方法，最好把它转化为一个真正的数组。\n\n### 转化为数组\n\n下面的代码将会创建一个新的数组，包含所有 `arguments` 对象中的元素。\n\n```\nArray.prototype.slice.call(arguments);\n```\n\n`arguments` 对象为其内部属性以及函数形式参数创建 *getter* 和 *setter* 方法。\n\n因此，改变形参的值会影响到 `arguments` 对象的值，反之亦然。\n\n```javascript\nfunction foo(a, b, c) {\n    arguments[0] = 2;\n    a; // 2                                                           \n\n    b = 4;\n    arguments[1]; // 4\n\n    var d = c;\n    d = 9;\n    c; // 3\n}\nfoo(1, 2, 3);\n```\n\n\n\n如下一个例子：\n\n```javascript\nfunction sidEffecting(ary) { \n  ary[0] = ary[2];\n}\nfunction bar(a,b,c) { \n  c = 10\n  sidEffecting(arguments);\n  return a + b + c;\n}\nbar(1,1,1)\n```\n\n这里所有的更改都将生效，a和c的值都为10，a+b+c的值将为21。\n\n## 7.类型相关\n\n### 测试为定义变量\n\n```javascript\ntypeof foo !== 'undefined'\n```\n\n\n\n上面代码会检测 `foo` 是否已经定义；如果没有定义而直接使用会导致 `ReferenceError` 的异常。 这是 `typeof` 唯一有用的地方。当然也能判断出来基本类型。\n\n### `Object.prototype.toString检测一个对象的类型`\n\n为了检测一个对象的类型，强烈推荐使用 `Object.prototype.toString` 方法\n\n如下例子：\n\n```javascript\nObject.prototype.toString.call([])    // \"[object Array]\"\nObject.prototype.toString.call({})    // \"[object Object]\"\nObject.prototype.toString.call(2)    // \"[object Number]\"\n```\n\n\n\n### 类型转换\n\n内置类型（比如 `Number` 和 `String`）的构造函数在被调用时，使用或者不使用 `new` 的结果完全不同。\n\n```javascript\nnew Number(10) === 10;     // False, 对象与数字的比较\nNumber(10) === 10;         // True, 数字与数字的比较\nnew Number(10) + 0 === 10; // True, 由于隐式的类型转换\n```\n\n\n\n**转换为字符串**\n\n```javascript\n'' + 10 === '10'; // true\n```\n\n\n\n将一个值加上空字符串可以轻松转换为字符串类型。\n\n**转换为数字**\n\n```javascript\n+'10' === 10; // true\n```\n\n\n\n使用**一元**的加号操作符，可以把字符串转换为数字。\n\n**转换为布尔型**\n\n通过使用 否 操作符两次，可以把一个值转换为布尔型。\n\n```javascript\n!!'foo';   // true\n!!'';      // false\n!!'0';     // true\n!!'1';     // true\n!!'-1'     // true\n!!{};      // true\n!!true;    // true\n```\n\n\n\n## 8.为什么不要使用 `eval`\n\n`eval` 函数会在当前作用域中执行一段 JavaScript 代码字符串。\n\n```javascript\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    eval('foo = 3');\n    return foo;\n}\ntest(); // 3\nfoo; // 1\n```\n\n\n\n但是 `eval` 只在被**直接**调用并且调用函数就是 `eval` 本身时，才在当前作用域中执行。\n\n```javascript\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    var bar = eval;\n    bar('foo = 3');\n    return foo;\n}\ntest(); // 2\nfoo; // 3\n```\n\n\n\n上面的代码等价于在全局作用域中调用 `eval`，和下面两种写法效果一样：\n\n```javascript\n// 写法一：直接调用全局作用域下的 foo 变量\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    window.foo = 3;\n    return foo;\n}\ntest(); // 2\nfoo; // 3\n\n// 写法二：使用 call 函数修改 eval 执行的上下文为全局作用域\nvar foo = 1;\nfunction test() {\n    var foo = 2;\n    eval.call(window, 'foo = 3');\n    return foo;\n}\ntest(); // 2\nfoo; // 3\n```\n\n\n\n在**任何情况下**我们都应该避免使用 `eval` 函数。99.9% 使用 `eval` 的场景都有**不使用** `eval` 的解决方案。\n\n`eval` 也存在安全问题，因为它会执行**任意**传给它的代码， 在代码字符串未知或者是来自一个不信任的源时，绝对不要使用 `eval` 函数。\n\n## 9.定时器\n\n### 手工清空定时器\n\n```javascript\nvar id = setTimeout(foo, 1000);\nclearTimeout(id);\n```\n\n\n\n### 清除所有定时器\n\n由于没有内置的清除所有定时器的方法，可以采用一种暴力的方式来达到这一目的。\n\n```javascript\n// 清空\"所有\"的定时器\nfor(var i = 1; i < 1000; i++) {\n    clearTimeout(i);\n}\n```\n\n\n\n可能还有些定时器不会在上面代码中被清除（注**：**如果定时器调用时返回的 ID 值大于 1000）， 因此我们可以事先保存所有的定时器 ID，然后一把清除。\n\n建议**不要**在调用定时器函数时，为了向回调函数传递参数而使用字符串的形式。\n\n```javascript\nfunction foo(a, b, c) {}\n\n// 不要这样做\nsetTimeout('foo(1,2, 3)', 1000)\n\n// 可以使用匿名函数完成相同功能\nsetTimeout(function() {\n    foo(1, 2, 3);\n}, 1000)\n```\n\n\n\n> **绝对不要**使用字符串作为 `setTimeout` 或者 `setInterval` 的第一个参数， 这么写的代码明显质量很差。当需要向回调函数传递参数时，可以创建一个*匿名函数*，在函数内执行真实的回调函数。\n>\n> 另外，应该避免使用 `setInterval`，因为它的定时执行不会被 JavaScript 阻塞。\n>\n>  后续逐渐添加\n\n## 10，数组和字符串\n\n- split() join() 的区别\n  - 前者是切割成数组的形式，后者是将数组转换成字符串\n- 数组方法pop() push() unshift() shift()\n  - Push( )尾部添加\n  - pop ( )尾部删除\n  - Unshift( )头部添加\n  - shift( )头部删除 并返回删除项","slug":"js知识点常记","published":1,"updated":"2018-03-07T03:31:34.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc1o000nskrxdzlqxo3h","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"1-hasOwnProperty相关\"><a href=\"#1-hasOwnProperty相关\" class=\"headerlink\" title=\"1.hasOwnProperty相关\"></a>1.hasOwnProperty相关</h2><p>为了判断一个对象是否包含自定义属性而不是原型链上的属性，我们需要使用继承自 Object.prototype 的 hasOwnProperty方法。<br>hasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.bar = <span class=\"number\">1</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;<span class=\"attr\">goo</span>: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.bar; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"string\">'bar'</span> <span class=\"keyword\">in</span> foo; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'bar'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'goo'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: 通过判断一个属性是否 undefined 是不够的。 因为一个属性可能确实存在，只不过它的值被设置为 undefined。</p>\n</blockquote>\n<h3 id=\"hasOwnProperty-作为属性\"><a href=\"#hasOwnProperty-作为属性\" class=\"headerlink\" title=\"hasOwnProperty 作为属性\"></a>hasOwnProperty 作为属性</h3><p>JavaScript 不会保护 hasOwnProperty 被非法占用，因此如果一个对象碰巧存在这个属性， 就需要使用外部的 hasOwnProperty 函数来获取正确的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    hasOwnProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bar: <span class=\"string\">'Here be dragons'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'bar'</span>); <span class=\"comment\">// 总是返回 false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用其它对象的 hasOwnProperty，并将其上下文设置为foo</span></span><br><span class=\"line\">(&#123;&#125;).hasOwnProperty.call(foo, <span class=\"string\">'bar'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>当检查对象上某个属性是否存在时，hasOwnProperty 是唯一可用的方法。 同时在使用 for in loop遍历对象时，推荐总是使用 hasOwnProperty 方法， 这将会避免原型对象扩展带来的干扰。</p>\n<h3 id=\"for-in-循环\"><a href=\"#for-in-循环\" class=\"headerlink\" title=\"for in 循环\"></a>for in 循环</h3><p>和 in 操作符一样，for in 循环同样在查找对象属性时遍历原型链上的所有属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改 Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.bar = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;<span class=\"attr\">moo</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> foo) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出两个属性：bar 和 moo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: 由于 for in 总是要遍历整个原型链，因此如果一个对象的继承层次太深的话会影响性能。</p>\n</blockquote>\n<p>由于不可能改变 for in 自身的行为，因此有必要过滤出那些不希望出现在循环体中的属性， 这可以通过 Object.prototype 原型上的 hasOwnProperty 函数来完成。</p>\n<h3 id=\"使用-hasOwnProperty-过滤\"><a href=\"#使用-hasOwnProperty-过滤\" class=\"headerlink\" title=\"使用 hasOwnProperty 过滤\"></a>使用 hasOwnProperty 过滤</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo 变量是上例中的</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> foo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foo.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>推荐总是使用 hasOwnProperty。不要对代码运行的环境做任何假设，不要假设原生对象是否已经被扩展了。</p>\n</blockquote>\n<h2 id=\"2-命名函数的赋值表达式\"><a href=\"#2-命名函数的赋值表达式\" class=\"headerlink\" title=\"2.命名函数的赋值表达式\"></a>2.命名函数的赋值表达式</h2><p>另外一个特殊的情况是将命名函数赋值给一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    bar(); <span class=\"comment\">// 正常运行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(); <span class=\"comment\">// 出错：ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>bar 函数声明外是不可见的，这是因为我们已经把函数赋值给了 foo； 然而在 bar 内部依然可见。这是由于 JavaScript 的命名处理所致， 函数名在函数内总是可见的。</p>\n<blockquote>\n<p>注意:在IE8及IE8以下版本浏览器bar在外部也是可见的，是因为浏览器对命名函数赋值表达式进行了错误的解析， 解析成两个函数 foo 和 bar</p>\n</blockquote>\n<h2 id=\"3-方法的赋值表达式\"><a href=\"#3-方法的赋值表达式\" class=\"headerlink\" title=\"3.方法的赋值表达式\"></a>3.方法的赋值表达式</h2><p>另一个看起来奇怪的地方是函数别名，也就是将一个方法赋值给一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = someObject.methodTest;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>上例中，test 就像一个普通的函数被调用；因此，函数内的 this 将不再被指向到 someObject 对象。而是指向了window。</p>\n<h2 id=\"4-循环中的闭包\"><a href=\"#4-循环中的闭包\" class=\"headerlink\" title=\"4.循环中的闭包\"></a>4.循环中的闭包</h2><p>一个常见的错误出现在循环中使用闭包，假设我们需要在每次循环中调用循环序号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);  </span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码不会输出数字 <code>0</code>到 <code>9</code>，而是会输出数字<code>10</code> 十次。</p>\n<p>当 console.log 被调用的时候，匿名函数保持对外部变量<code>i</code>的引用，此时 <code>for</code>循环已经结束，<code>i</code>的值被修改成了<code>10</code>.</p>\n<p>为了得到想要的结果，需要在每次循环中创建变量 <code>i</code>的拷贝。</p>\n<p>为了避免引用错误，为了正确的获得循环序号，最好使用 匿名包装器（注：其实就是我们通常说的自执行匿名函数）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e);  </span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>外部的匿名函数会立即执行，并把 i 作为它的参数，此时函数内 e 变量就拥有了 i 的一个拷贝。</p>\n<p>当传递给 setTimeout 的匿名函数执行时，它就拥有了对 e 的引用，而这个值是不会被循环改变的。</p>\n<p>有另一个方法完成同样的工作，那就是从匿名包装器中返回一个函数。这和上面的代码效果一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i), <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-对象使用和属性\"><a href=\"#5-对象使用和属性\" class=\"headerlink\" title=\"5.对象使用和属性\"></a>5.对象使用和属性</h2><p>JavaScript 中所有变量都可以当作对象使用，除了两个例外 <code>null</code> 和 <code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span>.toString(); <span class=\"comment\">// 'false'</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].toString(); <span class=\"comment\">// '1,2,3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Foo.bar = <span class=\"number\">1</span>;</span><br><span class=\"line\">Foo.bar; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>一个常见的误解是数字的字面值（literal）不能当作对象使用。这是因为 JavaScript 解析器的一个错误， 它试图将点操作符解析为浮点数字面值的一部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span>toString(); <span class=\"comment\">// 出错：SyntaxError</span></span><br></pre></td></tr></table></figure>\n<p>有很多变通方法可以让数字的字面值看起来像对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span>.toString(); <span class=\"comment\">// 第二个点号可以正常解析</span></span><br><span class=\"line\"><span class=\"number\">2</span> .toString(); <span class=\"comment\">// 注意点号前面的空格</span></span><br><span class=\"line\">(<span class=\"number\">2</span>).toString(); <span class=\"comment\">// 2先被计算</span></span><br></pre></td></tr></table></figure>\n<p>删除属性的唯一方法是使用 <code>delete</code> 操作符；设置属性为 <code>undefined</code> 或者 <code>null</code> 并不能真正的删除属性， 而<strong>仅仅</strong>是移除了属性和值的关联。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    bar: <span class=\"number\">1</span>,</span><br><span class=\"line\">    foo: <span class=\"number\">2</span>,</span><br><span class=\"line\">    baz: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.bar = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">obj.foo = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i, <span class=\"string\">''</span> + obj[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的输出结果有 <code>bar undefined</code> 和 <code>foo null</code> - 只有 <code>baz</code> 被真正的删除了，所以从输出结果中消失。</p>\n<h2 id=\"6-arguments-对象\"><a href=\"#6-arguments-对象\" class=\"headerlink\" title=\"6.arguments 对象\"></a>6.<code>arguments</code> 对象</h2><p>JavaScript 中每个函数内都能访问一个特别变量 <code>arguments</code>。这个变量维护着所有传递到这个函数中的参数列表。</p>\n<p><code>arguments</code> 变量<strong>不是</strong>一个数组（<code>Array</code>）。 尽管在语法上它有数组相关的属性 <code>length</code>，但它不从 <code>Array.prototype</code>继承，实际上它是一个对象（<code>Object</code>）。</p>\n<p>因此，无法对 <code>arguments</code> 变量使用标准的数组方法，比如 <code>push</code>, <code>pop</code> 或者 <code>slice</code>。 虽然使用 <code>for</code> 循环遍历也是可以的，但是为了更好的使用数组方法，最好把它转化为一个真正的数组。</p>\n<h3 id=\"转化为数组\"><a href=\"#转化为数组\" class=\"headerlink\" title=\"转化为数组\"></a>转化为数组</h3><p>下面的代码将会创建一个新的数组，包含所有 <code>arguments</code> 对象中的元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.slice.call(arguments);</span><br></pre></td></tr></table></figure>\n<p><code>arguments</code> 对象为其内部属性以及函数形式参数创建 <em>getter</em> 和 <em>setter</em> 方法。</p>\n<p>因此，改变形参的值会影响到 <code>arguments</code> 对象的值，反之亦然。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    a; <span class=\"comment\">// 2                                                           </span></span><br><span class=\"line\"></span><br><span class=\"line\">    b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]; <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = c;</span><br><span class=\"line\">    d = <span class=\"number\">9</span>;</span><br><span class=\"line\">    c; <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>如下一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sidEffecting</span>(<span class=\"params\">ary</span>) </span>&#123; </span><br><span class=\"line\">  ary[<span class=\"number\">0</span>] = ary[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">a,b,c</span>) </span>&#123; </span><br><span class=\"line\">  c = <span class=\"number\">10</span></span><br><span class=\"line\">  sidEffecting(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>这里所有的更改都将生效，a和c的值都为10，a+b+c的值将为21。</p>\n<h2 id=\"7-类型相关\"><a href=\"#7-类型相关\" class=\"headerlink\" title=\"7.类型相关\"></a>7.类型相关</h2><h3 id=\"测试为定义变量\"><a href=\"#测试为定义变量\" class=\"headerlink\" title=\"测试为定义变量\"></a>测试为定义变量</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> foo !== <span class=\"string\">'undefined'</span></span><br></pre></td></tr></table></figure>\n<p>上面代码会检测 <code>foo</code> 是否已经定义；如果没有定义而直接使用会导致 <code>ReferenceError</code> 的异常。 这是 <code>typeof</code> 唯一有用的地方。当然也能判断出来基本类型。</p>\n<h3 id=\"Object-prototype-toString检测一个对象的类型\"><a href=\"#Object-prototype-toString检测一个对象的类型\" class=\"headerlink\" title=\"Object.prototype.toString检测一个对象的类型\"></a><code>Object.prototype.toString检测一个对象的类型</code></h3><p>为了检测一个对象的类型，强烈推荐使用 <code>Object.prototype.toString</code> 方法</p>\n<p>如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])    <span class=\"comment\">// \"[object Array]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;)    <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">2</span>)    <span class=\"comment\">// \"[object Number]\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>内置类型（比如 <code>Number</code> 和 <code>String</code>）的构造函数在被调用时，使用或者不使用 <code>new</code> 的结果完全不同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>) === <span class=\"number\">10</span>;     <span class=\"comment\">// False, 对象与数字的比较</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"number\">10</span>) === <span class=\"number\">10</span>;         <span class=\"comment\">// True, 数字与数字的比较</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>) + <span class=\"number\">0</span> === <span class=\"number\">10</span>; <span class=\"comment\">// True, 由于隐式的类型转换</span></span><br></pre></td></tr></table></figure>\n<p><strong>转换为字符串</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">''</span> + <span class=\"number\">10</span> === <span class=\"string\">'10'</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>将一个值加上空字符串可以轻松转换为字符串类型。</p>\n<p><strong>转换为数字</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"string\">'10'</span> === <span class=\"number\">10</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>使用<strong>一元</strong>的加号操作符，可以把字符串转换为数字。</p>\n<p><strong>转换为布尔型</strong></p>\n<p>通过使用 否 操作符两次，可以把一个值转换为布尔型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"string\">'foo'</span>;   <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"string\">''</span>;      <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"string\">'0'</span>;     <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"string\">'1'</span>;     <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"string\">'-1'</span>     <span class=\"comment\">// true</span></span><br><span class=\"line\">!!&#123;&#125;;      <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"literal\">true</span>;    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-为什么不要使用-eval\"><a href=\"#8-为什么不要使用-eval\" class=\"headerlink\" title=\"8.为什么不要使用 eval\"></a>8.为什么不要使用 <code>eval</code></h2><p><code>eval</code> 函数会在当前作用域中执行一段 JavaScript 代码字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'foo = 3'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>但是 <code>eval</code> 只在被<strong>直接</strong>调用并且调用函数就是 <code>eval</code> 本身时，才在当前作用域中执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"built_in\">eval</span>;</span><br><span class=\"line\">    bar(<span class=\"string\">'foo = 3'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码等价于在全局作用域中调用 <code>eval</code>，和下面两种写法效果一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一：直接调用全局作用域下的 foo 变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.foo = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二：使用 call 函数修改 eval 执行的上下文为全局作用域</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>.call(<span class=\"built_in\">window</span>, <span class=\"string\">'foo = 3'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>在<strong>任何情况下</strong>我们都应该避免使用 <code>eval</code> 函数。99.9% 使用 <code>eval</code> 的场景都有<strong>不使用</strong> <code>eval</code> 的解决方案。</p>\n<p><code>eval</code> 也存在安全问题，因为它会执行<strong>任意</strong>传给它的代码， 在代码字符串未知或者是来自一个不信任的源时，绝对不要使用 <code>eval</code> 函数。</p>\n<h2 id=\"9-定时器\"><a href=\"#9-定时器\" class=\"headerlink\" title=\"9.定时器\"></a>9.定时器</h2><h3 id=\"手工清空定时器\"><a href=\"#手工清空定时器\" class=\"headerlink\" title=\"手工清空定时器\"></a>手工清空定时器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = setTimeout(foo, <span class=\"number\">1000</span>);</span><br><span class=\"line\">clearTimeout(id);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除所有定时器\"><a href=\"#清除所有定时器\" class=\"headerlink\" title=\"清除所有定时器\"></a>清除所有定时器</h3><p>由于没有内置的清除所有定时器的方法，可以采用一种暴力的方式来达到这一目的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清空\"所有\"的定时器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    clearTimeout(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可能还有些定时器不会在上面代码中被清除（注<strong>：</strong>如果定时器调用时返回的 ID 值大于 1000）， 因此我们可以事先保存所有的定时器 ID，然后一把清除。</p>\n<p>建议<strong>不要</strong>在调用定时器函数时，为了向回调函数传递参数而使用字符串的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, c</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要这样做</span></span><br><span class=\"line\">setTimeout(<span class=\"string\">'foo(1,2, 3)'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以使用匿名函数完成相同功能</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>绝对不要</strong>使用字符串作为 <code>setTimeout</code> 或者 <code>setInterval</code> 的第一个参数， 这么写的代码明显质量很差。当需要向回调函数传递参数时，可以创建一个<em>匿名函数</em>，在函数内执行真实的回调函数。</p>\n<p>另外，应该避免使用 <code>setInterval</code>，因为它的定时执行不会被 JavaScript 阻塞。</p>\n<p> 后续逐渐添加</p>\n</blockquote>\n<h2 id=\"10，数组和字符串\"><a href=\"#10，数组和字符串\" class=\"headerlink\" title=\"10，数组和字符串\"></a>10，数组和字符串</h2><ul>\n<li>split() join() 的区别<ul>\n<li>前者是切割成数组的形式，后者是将数组转换成字符串</li>\n</ul>\n</li>\n<li>数组方法pop() push() unshift() shift()<ul>\n<li>Push( )尾部添加</li>\n<li>pop ( )尾部删除</li>\n<li>Unshift( )头部添加</li>\n<li>shift( )头部删除 并返回删除项</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-hasOwnProperty相关\"><a href=\"#1-hasOwnProperty相关\" class=\"headerlink\" title=\"1.hasOwnProperty相关\"></a>1.hasOwnProperty相关</h2><p>为了判断一个对象是否包含自定义属性而不是原型链上的属性，我们需要使用继承自 Object.prototype 的 hasOwnProperty方法。<br>hasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.bar = <span class=\"number\">1</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;<span class=\"attr\">goo</span>: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.bar; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"string\">'bar'</span> <span class=\"keyword\">in</span> foo; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'bar'</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'goo'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: 通过判断一个属性是否 undefined 是不够的。 因为一个属性可能确实存在，只不过它的值被设置为 undefined。</p>\n</blockquote>\n<h3 id=\"hasOwnProperty-作为属性\"><a href=\"#hasOwnProperty-作为属性\" class=\"headerlink\" title=\"hasOwnProperty 作为属性\"></a>hasOwnProperty 作为属性</h3><p>JavaScript 不会保护 hasOwnProperty 被非法占用，因此如果一个对象碰巧存在这个属性， 就需要使用外部的 hasOwnProperty 函数来获取正确的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    hasOwnProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bar: <span class=\"string\">'Here be dragons'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'bar'</span>); <span class=\"comment\">// 总是返回 false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用其它对象的 hasOwnProperty，并将其上下文设置为foo</span></span><br><span class=\"line\">(&#123;&#125;).hasOwnProperty.call(foo, <span class=\"string\">'bar'</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>当检查对象上某个属性是否存在时，hasOwnProperty 是唯一可用的方法。 同时在使用 for in loop遍历对象时，推荐总是使用 hasOwnProperty 方法， 这将会避免原型对象扩展带来的干扰。</p>\n<h3 id=\"for-in-循环\"><a href=\"#for-in-循环\" class=\"headerlink\" title=\"for in 循环\"></a>for in 循环</h3><p>和 in 操作符一样，for in 循环同样在查找对象属性时遍历原型链上的所有属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改 Object.prototype</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.bar = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;<span class=\"attr\">moo</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> foo) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 输出两个属性：bar 和 moo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意: 由于 for in 总是要遍历整个原型链，因此如果一个对象的继承层次太深的话会影响性能。</p>\n</blockquote>\n<p>由于不可能改变 for in 自身的行为，因此有必要过滤出那些不希望出现在循环体中的属性， 这可以通过 Object.prototype 原型上的 hasOwnProperty 函数来完成。</p>\n<h3 id=\"使用-hasOwnProperty-过滤\"><a href=\"#使用-hasOwnProperty-过滤\" class=\"headerlink\" title=\"使用 hasOwnProperty 过滤\"></a>使用 hasOwnProperty 过滤</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo 变量是上例中的</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> foo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (foo.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>推荐总是使用 hasOwnProperty。不要对代码运行的环境做任何假设，不要假设原生对象是否已经被扩展了。</p>\n</blockquote>\n<h2 id=\"2-命名函数的赋值表达式\"><a href=\"#2-命名函数的赋值表达式\" class=\"headerlink\" title=\"2.命名函数的赋值表达式\"></a>2.命名函数的赋值表达式</h2><p>另外一个特殊的情况是将命名函数赋值给一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    bar(); <span class=\"comment\">// 正常运行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(); <span class=\"comment\">// 出错：ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>bar 函数声明外是不可见的，这是因为我们已经把函数赋值给了 foo； 然而在 bar 内部依然可见。这是由于 JavaScript 的命名处理所致， 函数名在函数内总是可见的。</p>\n<blockquote>\n<p>注意:在IE8及IE8以下版本浏览器bar在外部也是可见的，是因为浏览器对命名函数赋值表达式进行了错误的解析， 解析成两个函数 foo 和 bar</p>\n</blockquote>\n<h2 id=\"3-方法的赋值表达式\"><a href=\"#3-方法的赋值表达式\" class=\"headerlink\" title=\"3.方法的赋值表达式\"></a>3.方法的赋值表达式</h2><p>另一个看起来奇怪的地方是函数别名，也就是将一个方法赋值给一个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = someObject.methodTest;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>上例中，test 就像一个普通的函数被调用；因此，函数内的 this 将不再被指向到 someObject 对象。而是指向了window。</p>\n<h2 id=\"4-循环中的闭包\"><a href=\"#4-循环中的闭包\" class=\"headerlink\" title=\"4.循环中的闭包\"></a>4.循环中的闭包</h2><p>一个常见的错误出现在循环中使用闭包，假设我们需要在每次循环中调用循环序号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i);  </span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码不会输出数字 <code>0</code>到 <code>9</code>，而是会输出数字<code>10</code> 十次。</p>\n<p>当 console.log 被调用的时候，匿名函数保持对外部变量<code>i</code>的引用，此时 <code>for</code>循环已经结束，<code>i</code>的值被修改成了<code>10</code>.</p>\n<p>为了得到想要的结果，需要在每次循环中创建变量 <code>i</code>的拷贝。</p>\n<p>为了避免引用错误，为了正确的获得循环序号，最好使用 匿名包装器（注：其实就是我们通常说的自执行匿名函数）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e);  </span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>外部的匿名函数会立即执行，并把 i 作为它的参数，此时函数内 e 变量就拥有了 i 的一个拷贝。</p>\n<p>当传递给 setTimeout 的匿名函数执行时，它就拥有了对 e 的引用，而这个值是不会被循环改变的。</p>\n<p>有另一个方法完成同样的工作，那就是从匿名包装器中返回一个函数。这和上面的代码效果一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)(i), <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-对象使用和属性\"><a href=\"#5-对象使用和属性\" class=\"headerlink\" title=\"5.对象使用和属性\"></a>5.对象使用和属性</h2><p>JavaScript 中所有变量都可以当作对象使用，除了两个例外 <code>null</code> 和 <code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span>.toString(); <span class=\"comment\">// 'false'</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].toString(); <span class=\"comment\">// '1,2,3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">Foo.bar = <span class=\"number\">1</span>;</span><br><span class=\"line\">Foo.bar; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>一个常见的误解是数字的字面值（literal）不能当作对象使用。这是因为 JavaScript 解析器的一个错误， 它试图将点操作符解析为浮点数字面值的一部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span>toString(); <span class=\"comment\">// 出错：SyntaxError</span></span><br></pre></td></tr></table></figure>\n<p>有很多变通方法可以让数字的字面值看起来像对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.</span>.toString(); <span class=\"comment\">// 第二个点号可以正常解析</span></span><br><span class=\"line\"><span class=\"number\">2</span> .toString(); <span class=\"comment\">// 注意点号前面的空格</span></span><br><span class=\"line\">(<span class=\"number\">2</span>).toString(); <span class=\"comment\">// 2先被计算</span></span><br></pre></td></tr></table></figure>\n<p>删除属性的唯一方法是使用 <code>delete</code> 操作符；设置属性为 <code>undefined</code> 或者 <code>null</code> 并不能真正的删除属性， 而<strong>仅仅</strong>是移除了属性和值的关联。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    bar: <span class=\"number\">1</span>,</span><br><span class=\"line\">    foo: <span class=\"number\">2</span>,</span><br><span class=\"line\">    baz: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.bar = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">obj.foo = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.baz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i, <span class=\"string\">''</span> + obj[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的输出结果有 <code>bar undefined</code> 和 <code>foo null</code> - 只有 <code>baz</code> 被真正的删除了，所以从输出结果中消失。</p>\n<h2 id=\"6-arguments-对象\"><a href=\"#6-arguments-对象\" class=\"headerlink\" title=\"6.arguments 对象\"></a>6.<code>arguments</code> 对象</h2><p>JavaScript 中每个函数内都能访问一个特别变量 <code>arguments</code>。这个变量维护着所有传递到这个函数中的参数列表。</p>\n<p><code>arguments</code> 变量<strong>不是</strong>一个数组（<code>Array</code>）。 尽管在语法上它有数组相关的属性 <code>length</code>，但它不从 <code>Array.prototype</code>继承，实际上它是一个对象（<code>Object</code>）。</p>\n<p>因此，无法对 <code>arguments</code> 变量使用标准的数组方法，比如 <code>push</code>, <code>pop</code> 或者 <code>slice</code>。 虽然使用 <code>for</code> 循环遍历也是可以的，但是为了更好的使用数组方法，最好把它转化为一个真正的数组。</p>\n<h3 id=\"转化为数组\"><a href=\"#转化为数组\" class=\"headerlink\" title=\"转化为数组\"></a>转化为数组</h3><p>下面的代码将会创建一个新的数组，包含所有 <code>arguments</code> 对象中的元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.slice.call(arguments);</span><br></pre></td></tr></table></figure>\n<p><code>arguments</code> 对象为其内部属性以及函数形式参数创建 <em>getter</em> 和 <em>setter</em> 方法。</p>\n<p>因此，改变形参的值会影响到 <code>arguments</code> 对象的值，反之亦然。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    a; <span class=\"comment\">// 2                                                           </span></span><br><span class=\"line\"></span><br><span class=\"line\">    b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]; <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = c;</span><br><span class=\"line\">    d = <span class=\"number\">9</span>;</span><br><span class=\"line\">    c; <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>如下一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sidEffecting</span>(<span class=\"params\">ary</span>) </span>&#123; </span><br><span class=\"line\">  ary[<span class=\"number\">0</span>] = ary[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">a,b,c</span>) </span>&#123; </span><br><span class=\"line\">  c = <span class=\"number\">10</span></span><br><span class=\"line\">  sidEffecting(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>这里所有的更改都将生效，a和c的值都为10，a+b+c的值将为21。</p>\n<h2 id=\"7-类型相关\"><a href=\"#7-类型相关\" class=\"headerlink\" title=\"7.类型相关\"></a>7.类型相关</h2><h3 id=\"测试为定义变量\"><a href=\"#测试为定义变量\" class=\"headerlink\" title=\"测试为定义变量\"></a>测试为定义变量</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> foo !== <span class=\"string\">'undefined'</span></span><br></pre></td></tr></table></figure>\n<p>上面代码会检测 <code>foo</code> 是否已经定义；如果没有定义而直接使用会导致 <code>ReferenceError</code> 的异常。 这是 <code>typeof</code> 唯一有用的地方。当然也能判断出来基本类型。</p>\n<h3 id=\"Object-prototype-toString检测一个对象的类型\"><a href=\"#Object-prototype-toString检测一个对象的类型\" class=\"headerlink\" title=\"Object.prototype.toString检测一个对象的类型\"></a><code>Object.prototype.toString检测一个对象的类型</code></h3><p>为了检测一个对象的类型，强烈推荐使用 <code>Object.prototype.toString</code> 方法</p>\n<p>如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])    <span class=\"comment\">// \"[object Array]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;)    <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">2</span>)    <span class=\"comment\">// \"[object Number]\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>内置类型（比如 <code>Number</code> 和 <code>String</code>）的构造函数在被调用时，使用或者不使用 <code>new</code> 的结果完全不同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>) === <span class=\"number\">10</span>;     <span class=\"comment\">// False, 对象与数字的比较</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"number\">10</span>) === <span class=\"number\">10</span>;         <span class=\"comment\">// True, 数字与数字的比较</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>) + <span class=\"number\">0</span> === <span class=\"number\">10</span>; <span class=\"comment\">// True, 由于隐式的类型转换</span></span><br></pre></td></tr></table></figure>\n<p><strong>转换为字符串</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">''</span> + <span class=\"number\">10</span> === <span class=\"string\">'10'</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>将一个值加上空字符串可以轻松转换为字符串类型。</p>\n<p><strong>转换为数字</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"string\">'10'</span> === <span class=\"number\">10</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>使用<strong>一元</strong>的加号操作符，可以把字符串转换为数字。</p>\n<p><strong>转换为布尔型</strong></p>\n<p>通过使用 否 操作符两次，可以把一个值转换为布尔型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"string\">'foo'</span>;   <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"string\">''</span>;      <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"string\">'0'</span>;     <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"string\">'1'</span>;     <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"string\">'-1'</span>     <span class=\"comment\">// true</span></span><br><span class=\"line\">!!&#123;&#125;;      <span class=\"comment\">// true</span></span><br><span class=\"line\">!!<span class=\"literal\">true</span>;    <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-为什么不要使用-eval\"><a href=\"#8-为什么不要使用-eval\" class=\"headerlink\" title=\"8.为什么不要使用 eval\"></a>8.为什么不要使用 <code>eval</code></h2><p><code>eval</code> 函数会在当前作用域中执行一段 JavaScript 代码字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>(<span class=\"string\">'foo = 3'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>但是 <code>eval</code> 只在被<strong>直接</strong>调用并且调用函数就是 <code>eval</code> 本身时，才在当前作用域中执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"built_in\">eval</span>;</span><br><span class=\"line\">    bar(<span class=\"string\">'foo = 3'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码等价于在全局作用域中调用 <code>eval</code>，和下面两种写法效果一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法一：直接调用全局作用域下的 foo 变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.foo = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二：使用 call 函数修改 eval 执行的上下文为全局作用域</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">eval</span>.call(<span class=\"built_in\">window</span>, <span class=\"string\">'foo = 3'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">foo; <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>在<strong>任何情况下</strong>我们都应该避免使用 <code>eval</code> 函数。99.9% 使用 <code>eval</code> 的场景都有<strong>不使用</strong> <code>eval</code> 的解决方案。</p>\n<p><code>eval</code> 也存在安全问题，因为它会执行<strong>任意</strong>传给它的代码， 在代码字符串未知或者是来自一个不信任的源时，绝对不要使用 <code>eval</code> 函数。</p>\n<h2 id=\"9-定时器\"><a href=\"#9-定时器\" class=\"headerlink\" title=\"9.定时器\"></a>9.定时器</h2><h3 id=\"手工清空定时器\"><a href=\"#手工清空定时器\" class=\"headerlink\" title=\"手工清空定时器\"></a>手工清空定时器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = setTimeout(foo, <span class=\"number\">1000</span>);</span><br><span class=\"line\">clearTimeout(id);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除所有定时器\"><a href=\"#清除所有定时器\" class=\"headerlink\" title=\"清除所有定时器\"></a>清除所有定时器</h3><p>由于没有内置的清除所有定时器的方法，可以采用一种暴力的方式来达到这一目的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清空\"所有\"的定时器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    clearTimeout(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可能还有些定时器不会在上面代码中被清除（注<strong>：</strong>如果定时器调用时返回的 ID 值大于 1000）， 因此我们可以事先保存所有的定时器 ID，然后一把清除。</p>\n<p>建议<strong>不要</strong>在调用定时器函数时，为了向回调函数传递参数而使用字符串的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b, c</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要这样做</span></span><br><span class=\"line\">setTimeout(<span class=\"string\">'foo(1,2, 3)'</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以使用匿名函数完成相同功能</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>绝对不要</strong>使用字符串作为 <code>setTimeout</code> 或者 <code>setInterval</code> 的第一个参数， 这么写的代码明显质量很差。当需要向回调函数传递参数时，可以创建一个<em>匿名函数</em>，在函数内执行真实的回调函数。</p>\n<p>另外，应该避免使用 <code>setInterval</code>，因为它的定时执行不会被 JavaScript 阻塞。</p>\n<p> 后续逐渐添加</p>\n</blockquote>\n<h2 id=\"10，数组和字符串\"><a href=\"#10，数组和字符串\" class=\"headerlink\" title=\"10，数组和字符串\"></a>10，数组和字符串</h2><ul>\n<li>split() join() 的区别<ul>\n<li>前者是切割成数组的形式，后者是将数组转换成字符串</li>\n</ul>\n</li>\n<li>数组方法pop() push() unshift() shift()<ul>\n<li>Push( )尾部添加</li>\n<li>pop ( )尾部删除</li>\n<li>Unshift( )头部添加</li>\n<li>shift( )头部删除 并返回删除项</li>\n</ul>\n</li>\n</ul>"},{"title":"Vue事件修饰符","date":"2017-10-15T10:25:00.000Z","summary_img":"http://p4z3kz4fz.bkt.clouddn.com/u=667735043,3872756134&fm=27&gp=0.jpg","_content":"## 事件修饰符：\n\n​\t在事件处理程序中调用 `event.preventDefault()` 或 `event.stopPropagation()`是非常常见的需求。尽管我们可以在methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。为了解决这个问题， Vue.js 为 `v-on` 提供了 事件修饰符。通过由点(.)表示的指令后缀来调用修饰符。\n\n<!--more-->\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n- `.once`\n\n```vue\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n \n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n \n<!-- 修饰符可以串联 -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n \n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n \n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n \n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n## 按键修饰符：\n\n​\t在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 `v-on` 在监听键盘事件时添加按键修饰符：\n\n```vue\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n```\n\n```vue\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n \n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n全部的按键别名：记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：\n\n- `.enter`\n- `.tab`\n- `.delete` (捕获 “删除” 和 “退格” 键)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n可以通过全局 `config.keyCodes` 对象[自定义按键修饰符别名](https://cn.vuejs.org/v2/api/#keyCodes)：\n\n```javascript\n// 可以使用 v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n\n同样的在v-model里面修饰符也有很多应用。","source":"_posts/vue阻止修饰符.md","raw":"---\ntitle: Vue事件修饰符\ndate: 2017-10-15 18:25\ntags: Vue\ncategories: 框架\nsummary_img: http://p4z3kz4fz.bkt.clouddn.com/u=667735043,3872756134&fm=27&gp=0.jpg\n---\n## 事件修饰符：\n\n​\t在事件处理程序中调用 `event.preventDefault()` 或 `event.stopPropagation()`是非常常见的需求。尽管我们可以在methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。为了解决这个问题， Vue.js 为 `v-on` 提供了 事件修饰符。通过由点(.)表示的指令后缀来调用修饰符。\n\n<!--more-->\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n- `.once`\n\n```vue\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n \n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n \n<!-- 修饰符可以串联 -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n \n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n \n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n \n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n## 按键修饰符：\n\n​\t在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 `v-on` 在监听键盘事件时添加按键修饰符：\n\n```vue\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n```\n\n```vue\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n \n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n全部的按键别名：记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：\n\n- `.enter`\n- `.tab`\n- `.delete` (捕获 “删除” 和 “退格” 键)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n可以通过全局 `config.keyCodes` 对象[自定义按键修饰符别名](https://cn.vuejs.org/v2/api/#keyCodes)：\n\n```javascript\n// 可以使用 v-on:keyup.f1\nVue.config.keyCodes.f1 = 112\n```\n\n同样的在v-model里面修饰符也有很多应用。","slug":"vue阻止修饰符","published":1,"updated":"2018-03-07T10:04:22.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc1s000sskrx9bvvfjbp","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h2><p>​    在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code>是非常常见的需求。尽管我们可以在methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。为了解决这个问题， Vue.js 为 <code>v-on</code> 提供了 事件修饰符。通过由点(.)表示的指令后缀来调用修饰符。</p>\n<a id=\"more\"></a>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 只有修饰符 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"按键修饰符：\"><a href=\"#按键修饰符：\" class=\"headerlink\" title=\"按键修饰符：\"></a>按键修饰符：</h2><p>​    在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 同上 --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 缩写语法 --&gt;</span><br><span class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>全部的按键别名：记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p>可以通过全局 <code>config.keyCodes</code> 对象<a href=\"https://cn.vuejs.org/v2/api/#keyCodes\" target=\"_blank\" rel=\"noopener\">自定义按键修饰符别名</a>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以使用 v-on:keyup.f1</span></span><br><span class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></span><br></pre></td></tr></table></figure>\n<p>同样的在v-model里面修饰符也有很多应用。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h2><p>​    在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code>是非常常见的需求。尽管我们可以在methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。为了解决这个问题， Vue.js 为 <code>v-on</code> 提供了 事件修饰符。通过由点(.)表示的指令后缀来调用修饰符。</p>","more":"<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class=\"line\">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 只有修饰符 --&gt;</span><br><span class=\"line\">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class=\"line\">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"按键修饰符：\"><a href=\"#按键修饰符：\" class=\"headerlink\" title=\"按键修饰符：\"></a>按键修饰符：</h2><p>​    在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 同上 --&gt;</span><br><span class=\"line\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 缩写语法 --&gt;</span><br><span class=\"line\">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>全部的按键别名：记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p>可以通过全局 <code>config.keyCodes</code> 对象<a href=\"https://cn.vuejs.org/v2/api/#keyCodes\" target=\"_blank\" rel=\"noopener\">自定义按键修饰符别名</a>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以使用 v-on:keyup.f1</span></span><br><span class=\"line\">Vue.config.keyCodes.f1 = <span class=\"number\">112</span></span><br></pre></td></tr></table></figure>\n<p>同样的在v-model里面修饰符也有很多应用。</p>"},{"title":"JavaScript高级","date":"2017-05-11T01:31:00.000Z","summary_img":"http://p57ao19ex.bkt.clouddn.com/snipaste_20180307_112738.png","_content":"## 课程介绍\n\n<!--more-->\n\n### 课程大纲\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2.png\" width=\"400\" alt=\"课程大纲\">\n\n### 目标\n\n- 理解面向对象开发思想\n- 掌握 JavaScript 面向对象开发相关模式\n- 掌握在 JavaScript 中使用正则表达式\n\n### 案例演示\n\n- [贪吃蛇](https://lipengzhou.github.io/new-snake/)\n\n------\n\n## 基本概念复习\n\n> 由于 JavaScript 高级还是针对 JavaScript 语言本身的一个进阶学习，所以在开始之前我们先对以前所学过的 JavaScript 相关知识点做一个快速复习总结。\n\n### 重新介绍 JavaScript\n\n#### JavaScript 是什么\n\n- 解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言\n- 语言特点：动态，头等函数 (First-class Function)\n  - 又称函数是 JavaScript 中的一等公民\n- 执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境\n  - 但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js\n- 编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格\n\n#### JavaScript 与浏览器的关系\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/browser-js.png\" alt=\"\">\n\n#### JavaScript 的组成\n\n| 组成部分       | 说明                |\n| ---------- | ----------------- |\n| ECMAScript | 描述了该语言的语法和基本对象    |\n| DOM        | 描述了处理网页内容的方法和接口   |\n| BOM        | 描述了与浏览器进行交互的方法和接口 |\n\n#### JavaScript 可以做什么\n\n> Any application that can be written in JavaScript, will eventually be written in JavaScript.  \n>\n> 凡是能够用JavaScript实现的应用，最终都必将用JavaScript实现。\n\n- [知乎 - JavaScript 能做什么，该做什么？](https://www.zhihu.com/question/20796866)\n- [最流行的编程语言 JavaScript 能做什么？](https://github.com/phodal/articles/issues/1)\n\n#### JavaScript 发展历史\n\n> [JavaScript 标准参考教程 - JavaScript 语言的历史](http://javascript.ruanyifeng.com/introduction/history.html)\n\n- JavaScript 的诞生\n- JavaScript 与 ECMAScript 的关系\n- JavaScript 与 Java 的关系\n- JavaScript 的版本\n- JavaScript 周边大事记\n\n#### 小结\n\n### 基本概念\n\n> 本小节快速过即可，主要是对学过的内容做知识点梳理。\n\n- 语法\n  - 区分大小写\n  - 标识符           标识符是指变量、函数、属性的名字，或者函数的参数\n  - 注释          \n  - 严格模式        \"use strict\";\n  - 语句 \n- 关键字和保留字\n- 变量\n- 数据类型\n  - typeof 操作符\n  - undefined\n  - null\n  - boolean\n  - number\n  - string\n  - object\n- 运算符（操作符）\n- 流程控制语句（if else else if switch  for   while  do...while  break  continue）\n- 函数  \n\n### JavaScript 中的数据类型\n\nJavaScript 有 5 种简单数据类型：`Undefined、Null、Boolean、Number、String` 和 1 种复杂数据类型 `object` 。\n\n#### 基本类型（值类型）\n\n- Undefined\n- Null\n- Boolean\n- Number\n- String\n\n#### 复杂类型（引用类型）\n\n- Object\n- Array\n- Date\n- RegExp\n- Function\n- 基本包装类型\n  - Boolean\n  - Number\n  - String\n- 单体内置对象\n  - Global\n    - 1)所有在全局作用域内定义的属性和方法，都是Global对象的属性。  \n    - 2)Global对象不能直接使用，也不能用new运算符创建。  \n    - 3)Global对象在JavaScript引擎被初始化时创建，并初始化其方法和属性。  \n    - 4)浏览器把Global对象作为window对象的一部分实现了，因此，所有的全局属性和函数都是window对象的属性和方法。\n  - Math\n\n#### 类型检测\n\n- `typeof`\n- `instanceof`\n- `Object.prototype.toString.call()`\n\n#### 值类型和引用类型在内存中的存储方式（画图说明）\n\n- 值类型按值存储\n- 引用类型按引用存储\n\n#### 值类型复制和引用类型复制（画图说明）\n\n- 值类型按值复制\n- 引用类型按引用复制\n\n#### 值类型和引用类型参数传递（画图说明）\n\n- 值类型按值传递\n- 引用类型按引用传递\n\n#### 值类型与引用类型的差别\n\n- 基本类型在内存中占据固定大小的空间，因此被保存在栈内存中\n- 从一个变量向另一个变量复制基本类型的值，复制的是值的副本\n- 引用类型的值是对象，保存在堆内存\n- 包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针\n- 从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象\n\n#### 小结\n\n- 类型检测方式\n- 值类型和引用类型的存储方式\n- 值类型复制和引用类型复制\n- 方法参数中 值类型数据传递 和 引用类型数据传递\n\n### JavaScript 执行过程\n\nJavaScript 运行分为两个阶段：\n\n- 预解析\n  - 全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）\n  - 函数内部预解析（所有的变量、函数和形参都会参与预解析）\n    - 函数\n    - 形参\n    - 普通变量\n- 执行\n\n先预解析全局作用域，然后执行全局作用域中的代码，\n在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。\n\n------\n\n## JavaScript 面向对象编程\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/mxdxkf.png\" width=\"400\" alt=\"\">\n\n### 面向对象介绍\n\n#### 什么是对象\n\n> Everything is object （万物皆对象）\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/20160823024542444.jpg\" alt=\"\">\n\n对象到底是什么，我们可以从两次层次来理解。\n\n**(1) 对象是单个事物的抽象。**\n\n一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。\n\n**(2) 对象是一个容器，封装了属性（property）和方法（method）。**\n\n属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。\n\n在实际开发中，对象是一个抽象的概念，可以将其简单理解为：**数据集或功能集**。\n\nECMAScript-262 把对象定义为：**无序属性的集合，其属性可以包含基本值、对象或者函数**。\n严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都\n映射到一个值。\n\n<p class=\"tip\">\n  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。\n</p>\n\n#### 什么是面向对象\n\n> 面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/664ba37eeee9f4623c06c066867f1d38_r.jpg\" width=\"400\" alt=\"\">\n\n面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。\n它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。\n\n在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。\n因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。\n\n面向对象与面向过程：\n\n- 面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊\n- 面向对象就是找一个对象，指挥得结果\n- 面向对象将执行者转变成指挥者\n- 面向对象不是面向过程的替代，而是面向过程的封装\n\n面向对象的特性：\n\n- 封装性\n- 继承性\n- [多态性]\n\n扩展阅读：\n\n- [维基百科 - 面向对象程序设计](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)\n- [知乎：如何用一句话说明什么是面向对象思想？](https://www.zhihu.com/question/19854505)\n- [知乎：什么是面向对象编程思想？](https://www.zhihu.com/question/31021366)\n\n#### 程序中面向对象的基本体现\n\n在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。\n自定义的对象数据类型就是面向对象中的类（ Class ）的概念。\n\n我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。\n\n假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：\n\n```javascript\nvar std1 = { name: 'Michael', score: 98 }\nvar std2 = { name: 'Bob', score: 81 }\n```\n\n而处理学生成绩可以通过函数实现，比如打印学生的成绩：\n\n```javascript\nfunction printScore (student) {\n  console.log('姓名：' + student.name + '  ' + '成绩：' + student.score)\n}\n```\n\n如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，\n而是 `Student` 这种数据类型应该被视为一个对象，这个对象拥有 `name` 和 `score` 这两个属性（Property）。\n如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 `printScore` 消息，让对象自己把自己的数据打印出来。\n\n抽象数据行为模板（Class）：\n\n```javascript\nfunction Student (name, score) {\n  this.name = name\n  this.score = score\n}\n\nStudent.prototype.printScore = function () {\n  console.log('姓名：' + this.name + '  ' + '成绩：' + this.score)\n}\n```\n\n根据模板创建具体实例对象（Instance）：\n\n```javascript\nvar std1 = new Student('Michael', 98)\nvar std2 = new Student('Bob', 81)\n```\n\n实例对象具有自己的具体行为（给对象发消息）：\n\n```javascript\nstd1.printScore() // => 姓名：Michael  成绩：98\nstd2.printScore() // => 姓名：Bob  成绩 81\n```\n\n面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。\nClass 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，\n而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。\n\n所以，面向对象的设计思想是：\n\n- 抽象出 Class\n- 根据 Class 创建 Instance\n- 指挥 Instance 得结果\n\n面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。\n\n### 创建对象\n\n#### 简单方式\n\n我们可以直接通过 `new Object()` 创建：\n\n```javascript\nvar person = new Object()\nperson.name = 'Jack'\nperson.age = 18\n\nperson.sayName = function () {\n  console.log(this.name)\n}\n```\n\n每次创建通过 `new Object()` 比较麻烦，所以可以通过它的简写形式对象字面量来创建：\n\n```javascript\nvar person = {\n  name: 'Jack',\n  age: 18,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n```\n\n对于上面的写法固然没有问题，但是假如我们要生成两个 `person` 实例对象呢？\n\n```javascript\nvar person1 = {\n  name: 'Jack',\n  age: 18,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n\nvar person2 = {\n  name: 'Mike',\n  age: 16,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n```\n\n通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。\n\n#### 简单方式的改进：工厂函数\n\n我们可以写一个函数，解决代码重复问题：\n\n```javascript\nfunction createPerson (name, age) {\n  return {\n    name: name,\n    age: age,\n    sayName: function () {\n      console.log(this.name)\n    }\n  }\n}\n```\n\n然后生成实例对象：\n\n```javascript\nvar p1 = createPerson('Jack', 18)\nvar p2 = createPerson('Mike', 18)\n```\n\n这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，\n但却没有解决对象识别的问题（即怎样知道一个对象的类型）。\n\n### 构造函数\n\n内容引导：\n\n- 构造函数语法\n- 分析构造函数\n- 构造函数和实例对象的关系\n  - 实例的 constructor 属性\n  - instanceof 操作符\n- 普通函数调用和构造函数调用的区别\n- 构造函数的返回值\n- 构造函数的静态成员和实例成员\n  - 函数也是对象\n  - 实例成员\n  - 静态成员\n- 构造函数的问题\n\n#### 更优雅的工厂函数：构造函数\n\n一种更优雅的工厂函数就是下面这样，构造函数：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n}\n\nvar p1 = new Person('Jack', 18)\np1.sayName() // => Jack\n\nvar p2 = new Person('Mike', 23)\np2.sayName() // => Mike\n```\n\n#### 解析构造函数代码的执行\n\n在上面的示例中，`Person()` 函数取代了 `createPerson()` 函数，但是实现效果是一样的。\n这是为什么呢？\n\n我们注意到，`Person()` 中的代码与 `createPerson()` 有以下几点不同之处：\n\n- 没有显示的创建对象\n- 直接将属性和方法赋给了 `this` 对象\n- 没有 `return` 语句\n- 函数名使用的是大写的 `Person`\n\n而要创建 `Person` 实例，则必须使用 `new` 操作符。\n以这种方式调用构造函数会经历以下 4 个步骤：\n\n1. 创建一个新对象   看不到\n2. 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）  看不到\n3. 执行构造函数中的代码\n4. 返回新对象\n\n下面是具体的伪代码：\n\n```javascript\nfunction Person (name, age) {\n  // 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象\n  // var instance = {}\n  // 然后让内部的 this 指向 instance 对象\n  // this = instance\n  // 接下来所有针对 this 的操作实际上操作的就是 instance\n\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n\n  // 在函数的结尾处会将 this 返回，也就是 instance\n  // return this\n}\n```\n\n#### 构造函数和实例对象的关系\n\n使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。\n在每一个实例对象中同时有一个 `constructor` 属性，该属性指向创建该实例的构造函数：\n\n```javascript\nconsole.log(p1.constructor === Person) // => true\nconsole.log(p2.constructor === Person) // => true\nconsole.log(p1.constructor === p2.constructor) // => true\n```\n\n对象的 `constructor` 属性最初是用来标识对象类型的，\n但是，如果要检测对象的类型，还是使用 `instanceof` 操作符更可靠一些：\n\n```javascript\nconsole.log(p1 instanceof Person) // => true\nconsole.log(p2 instanceof Person) // => true\n```\n\n总结：\n\n- 构造函数是根据具体的事物抽象出来的抽象模板\n- 实例对象是根据抽象的构造函数模板得到的具体实例对象\n- 每一个实例对象都具有一个 `constructor` 属性，指向创建该实例的构造函数\n  - 注意： `constructor` 是实例的属性的说法不严谨，具体后面的原型会讲到\n- 可以通过实例的 `constructor` 属性判断实例和构造函数之间的关系\n  - 注意：这种方式不严谨，推荐使用 `instanceof` 操作符，后面学原型会解释为什么\n\n#### 构造函数的问题\n\n使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = function () {\n    console.log('hello ' + this.name)\n  }\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n```\n\n在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。\n那就是对于每一个实例对象，`type` 和 `sayHello` 都是一模一样的内容，\n每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。\n\n```javascript\nconsole.log(p1.sayHello === p2.sayHello) // => false\n```\n\n对于这种问题我们可以把需要共享的函数定义到构造函数外部：\n\n```javascript\nfunction sayHello = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = sayHello\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n\nconsole.log(p1.sayHello === p2.sayHello) // => true\n```\n\n这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。\n\n你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：\n\n```javascript\nvar fns = {\n  sayHello: function () {\n    console.log('hello ' + this.name)\n  },\n  sayAge: function () {\n    console.log(this.age)\n  }\n}\n\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = fns.sayHello\n  this.sayAge = fns.sayAge\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n\nconsole.log(p1.sayHello === p2.sayHello) // => true\nconsole.log(p1.sayAge === p2.sayAge) // => true\n```\n\n至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。\n但是代码看起来还是那么的格格不入，那有没有更好的方式呢？\n\n#### 小结\n\n- 构造函数语法\n- 分析构造函数\n- 构造函数和实例对象的关系\n  - 实例的 constructor 属性\n  - instanceof 操作符\n- 构造函数的问题\n\n### 原型\n\n内容引导：\n\n- 使用 prototype 原型对象解决构造函数的问题\n- 分析 构造函数、prototype 原型对象、实例对象 三者之间的关系\n- 属性成员搜索原则：原型链\n- 实例对象读写原型对象中的成员\n- 原型对象的简写形式\n- 原生对象的原型\n  - Object\n  - Array\n  - String\n  - ...\n- 原型对象的问题\n- 构造的函数和原型对象使用建议\n\n#### 更好的解决方案： `prototype`\n\nJavascript 规定，每一个构造函数都有一个 `prototype` 属性，指向另一个对象。\n这个对象的所有属性和方法，都会被构造函数的实例继承。\n\n这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 `prototype` 对象上。\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nconsole.log(Person.prototype)\n\nPerson.prototype.type = 'human'\n\nPerson.prototype.sayName = function () {\n  console.log(this.name)\n}\n\nvar p1 = new Person(...)\nvar p2 = new Person(...)\n\nconsole.log(p1.sayName === p2.sayName) // => true\n```\n\n这时所有实例的 `type` 属性和 `sayName()` 方法，\n其实都是同一个内存地址，指向 `prototype` 对象，因此就提高了运行效率。\n\n#### 构造函数、实例、原型三者之间的关系\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png\" alt=\"\">\n\n任何函数都具有一个 `prototype` 属性，该属性是一个对象。\n\n```javascript\nfunction F () {}\nconsole.log(F.prototype) // => object\n\nF.prototype.sayHi = function () {\n  console.log('hi!')\n}\n```\n\n构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数。\n\n```javascript\nconsole.log(F.constructor === F) // => true\n```\n\n通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 `__proto__`。\n\n```javascript\nvar instance = new F()\nconsole.log(instance.__proto__ === F.prototype) // => true\n```\n\n<p class=\"tip\">\n  `__proto__` 是非标准属性。(现在是标准的属性)\n</p>\n\n实例对象可以直接访问原型对象成员。\n\n```javascript\ninstance.sayHi() // => hi!\n```\n\n总结：\n\n- 任何函数都具有一个 `prototype` 属性，该属性是一个对象\n- 构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数\n- 通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 `__proto__`\n- 所有实例都直接或间接继承了原型对象的成员\n\n#### 属性成员的搜索原则：原型链\n\n了解了 **构造函数-实例-原型对象** 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。\n\n每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性\n\n- 搜索首先从对象实例本身开始\n- 如果在实例中找到了具有给定名字的属性，则返回该属性的值\n- 如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性\n- 如果在原型对象中找到了这个属性，则返回该属性的值\n\n也就是说，在我们调用 `person1.sayName()` 的时候，会先后执行两次搜索：\n\n- 首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。\n- ”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。\n- ”于是，它就读取那个保存在原型对象中的函数。\n- 当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。\n\n而这正是多个对象实例共享原型所保存的属性和方法的基本原理。\n\n总结：\n\n- 先在自己身上找，找到即返回\n- 自己身上找不到，则沿着原型链向上查找，找到即返回\n- 如果一直到原型链的末端还没有找到，则返回 `undefined`\n\n#### 实例对象读写原型对象成员\n\n读取：\n\n- 先在自己身上找，找到即返回\n- 自己身上找不到，则沿着原型链向上查找，找到即返回\n- 如果一直到原型链的末端还没有找到，则返回 `undefined`\n\n值类型成员写入（`实例对象.值类型成员 = xx`）：\n\n- 当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上\n- 也就是说该行为实际上会屏蔽掉对原型对象成员的访问\n\n引用类型成员写入（`实例对象.引用类型成员 = xx`）：\n\n- 同上\n\n复杂类型修改（`实例对象.成员.xx = xx`）：\n\n- 同样会先在自己身上找该成员，如果自己身上找到则直接修改\n- 如果自己身上找不到，则沿着原型链继续查找，如果找到则修改\n- 如果一直到原型链的末端还没有找到该成员，则报错（`实例对象.undefined.xx = xx`）\n\n#### 更简单的原型语法\n\n我们注意到，前面例子中每添加一个属性和方法就要敲一遍 `Person.prototype` 。\n为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype = {\n  type: 'human',\n  sayHello: function () {\n    console.log('我叫' + this.name + '，我今年' + this.age + '岁了')\n  }\n}\n```\n\n在该示例中，我们将 `Person.prototype` 重置到了一个新的对象。\n这样做的好处就是为 `Person.prototype` 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 `constructor` 成员。\n\n所以，我们为了保持 `constructor` 的指向正确，建议的写法是：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype = {\n  constructor: Person, // => 手动将 constructor 指向正确的构造函数\n  type: 'human',\n  sayHello: function () {\n    console.log('我叫' + this.name + '，我今年' + this.age + '岁了')\n  }\n}\n```\n\n#### 原生对象的原型\n\n<p class=\"tip\">\n  所有函数都有 prototype 属性对象。\n</p>\n\n- Object.prototype\n- Function.prototype\n- Array.prototype\n- String.prototype\n- Number.prototype\n- Date.prototype\n- ...\n\n练习：为数组对象和字符串对象扩展原型方法。\n\n#### 原型对象的问题\n\n- 共享数组\n- 共享对象\n\n如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。\n\n一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。\n\n#### 原型对象使用建议\n\n- 私有成员（一般就是非函数成员）放到构造函数中\n- 共享成员（一般就是函数）放到原型对象中\n- 如果重置了 `prototype` 记得修正 `constructor` 的指向\n\n### 案例：随机方块\n\n------\n\n## 面向对象游戏案例：贪吃蛇\n\n案例相关源码以上传到 GitHub ：https://github.com/lipengzhou/new-snake\n\n### 案例介绍\n\n#### 游戏演示\n\n在线演示地址：[贪吃蛇](https://lipengzhou.github.io/new-snake/)\n\n#### 案例目标\n\n游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。\n\n### 功能实现\n\n#### 搭建页面\n\n放一个容器盛放游戏场景 div#map，设置样式\n\n```css\n#map {\n  width: 800px;\n  height: 600px;\n  background-color: #ccc;\n  position: relative;\n}\n```\n\n#### 分析对象\n\n- 游戏对象\n- 蛇对象\n- 食物对象\n\n#### 创建食物对象\n\n- Food\n  - 属性\n    - x       \n    - y\n    - width\n    - height\n    - color       \n  - 方法\n    - render       随机创建一个食物对象，并输出到map上\n- 创建Food的构造函数，并设置属性\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Food(x, y, width, height, color) {\n  this.x = x || 0;\n  this.y = y || 0;\n  // 食物的宽度和高度(像素)\n  this.width = width || 20;\n  this.height = height || 20;\n  // 食物的颜色\n  this.color = color || 'green';\n}\n```\n\n- 通过原型设置render方法，实现随机产生食物对象，并渲染到map上\n\n```js\nFood.prototype.render = function (map) {\n  // 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度\n  this.x = parseInt(Math.random() * map.offsetWidth / this.width) * this.width;\n  this.y = parseInt(Math.random() * map.offsetHeight / this.height) * this.height;\n\n  // 动态创建食物对应的div\n  var div = document.createElement('div');\n  map.appendChild(div);\n  div.style.position = position;\n  div.style.left = this.x + 'px';\n  div.style.top = this.y + 'px';\n  div.style.width = this.width + 'px';\n  div.style.height = this.height + 'px';\n  div.style.backgroundColor = this.color;\n  elements.push(div);\n}\n```\n\n- 通过自调用函数，进行封装，通过window暴露Food对象\n\n```js\nwindow.Food = Food;\n```\n\n#### 创建蛇对象\n\n- Snake\n- 属性\n  - width    蛇节的宽度 默认20\n  - height   蛇节的高度 默认20\n  - body     数组，蛇的头部和身体，第一个位置是蛇头\n  - direction    蛇运动的方向  默认right  可以是 left  top bottom\n- 方法\n  - render  把蛇渲染到map上\n- Snake构造函数\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Snake(width, height, direction) {\n  // 设置每一个蛇节的宽度\n  this.width = width || 20;\n  this.height = height || 20;\n  // 蛇的每一部分, 第一部分是蛇头\n  this.body = [\n    {x: 3, y: 2, color: 'red'},\n    {x: 2, y: 2, color: 'red'},\n    {x: 1, y: 2, color: 'red'}\n  ];\n  this.direction = direction || 'right';\n}\n```\n\n- render方法\n\n```js\nSnake.prototype.render = function(map) {\n  for(var i = 0; i < this.body.length; i++) {\n    var obj = this.body[i];\n    var div = document.createElement('div');\n    map.appendChild(div);\n    div.style.left = obj.x * this.width + 'px';\n    div.style.top = obj.y * this.height + 'px';\n    div.style.position = position;\n    div.style.backgroundColor = obj.color;\n    div.style.width = this.width + 'px';\n    div.style.height = this.height + 'px';\n  }\n}\n```\n\n- 在自调用函数中暴露Snake对象\n\n```js\nwindow.Snake = Snake;\n```\n\n#### 创建游戏对象\n\n游戏对象，用来管理游戏中的所有对象和开始游戏\n\n- Game\n  - 属性\n    - food\n    - snake\n    - map\n  - 方法\n    - start            开始游戏（绘制所有游戏对象）\n\n\n- 构造函数\n\n```js\nfunction Game(map) {\n  this.food = new Food();\n  this.snake = new Snake();\n  this.map = map;\n}\n```\n\n- 开始游戏，渲染食物对象和蛇对象\n\n```js\nGame.prototype.start = function () {\n  this.food.render(this.map);\n  this.snake.render(this.map);\n}\n```\n\n### 游戏的逻辑\n\n#### 写蛇的move方法\n\n- 在蛇对象(snake.js)中，在Snake的原型上新增move方法\n\n1. 让蛇移动起来，把蛇身体的每一部分往前移动一下\n2. 蛇头部分根据不同的方向决定 往哪里移动\n\n```js\nSnake.prototype.move = function (food, map) {\n  // 让蛇身体的每一部分往前移动一下\n  var i = this.body.length - 1;\n  for(; i > 0; i--) {\n    this.body[i].x = this.body[i - 1].x;\n    this.body[i].y = this.body[i - 1].y;\n  }\n  // 根据移动的方向，决定蛇头如何处理\n  switch(this.direction) {\n    case 'left': \n      this.body[0].x -= 1;\n      break;\n    case 'right':\n      this.body[0].x += 1;\n      break;\n    case 'top':\n      this.body[0].y -= 1;\n      break;\n    case 'bottom':\n      this.body[0].y += 1;\n      break;\n  }\n}\n```\n\n- 在game中测试\n\n```js\nthis.snake.move(this.food, this.map);\nthis.snake.render(this.map);\n```\n\n#### 让蛇自己动起来\n\n- 私有方法\n\n  ```\n  什么是私有方法？\n    不能被外部访问的方法\n  如何创建私有方法？\n    使用自调用函数包裹\n  ```\n\n- 在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来\n\n- 判断蛇是否撞墙\n\n```js\nfunction runSnake() {\n  var timerId = setInterval(function() {\n    this.snake.move(this.food, this.map);\n    // 在渲染前，删除之前的蛇\n    this.snake.render(this.map);\n\n    // 判断蛇是否撞墙\n    var maxX = this.map.offsetWidth / this.snake.width;\n    var maxY = this.map.offsetHeight / this.snake.height;\n    var headX = this.snake.body[0].x;\n    var headY = this.snake.body[0].y;\n    if (headX < 0 || headX >= maxX) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n    if (headY < 0 || headY >= maxY) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n  }.bind(that), 150);\n}\n```\n\n- 在snake中添加删除蛇的私有方法，在render中调用\n\n```js\nfunction remove() {\n  // 删除渲染的蛇\n  var i = elements.length - 1;\n  for(; i >= 0; i--) {\n    // 删除页面上渲染的蛇\n    elements[i].parentNode.removeChild(elements[i]);\n    // 删除elements数组中的元素\n    elements.splice(i, 1);\n  }\n}\n```\n\n- 在game中通过键盘控制蛇的移动方向\n\n```js\nfunction bindKey() {\n  document.addEventListener('keydown', function(e) {\n    switch (e.keyCode) {\n      case 37:\n        // left\n        this.snake.direction = 'left';\n        break;\n      case 38:\n        // top\n        this.snake.direction = 'top';\n        break;\n      case 39:\n        // right\n        this.snake.direction = 'right';\n        break;\n      case 40:\n        // bottom\n        this.snake.direction = 'bottom';\n        break;\n    }\n  }.bind(that), false);\n}\n```\n\n- 在start方法中调用\n\n```js\nbindKey();\n```\n\n#### 判断蛇是否吃到食物\n\n```js\n// 在Snake的move方法中\n\n// 在移动的过程中判断蛇是否吃到食物\n// 如果蛇头和食物的位置重合代表吃到食物\n// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换\nvar headX = this.body[0].x * this.width;\nvar headY = this.body[0].y * this.height;\nif (headX === food.x && headY === food.y) {\n  // 吃到食物，往蛇节的最后加一节\n  var last = this.body[this.body.length - 1];\n  this.body.push({\n    x: last.x,\n    y: last.y,\n    color: last.color\n  })\n  // 把现在的食物对象删除，并重新随机渲染一个食物对象\n  food.render(map);\n}\n```\n\n### 其它处理\n\n#### 把html中的js代码放到index.js中\n\n避免html中出现js代码\n\n#### 自调用函数的参数\n\n```js\n(function (window, undefined) {\n  var document = window.document;\n\n}(window, undefined))\n```\n\n- 传入window对象\n\n将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)\n\n- 传入undefined\n\n在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)\n因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值\n\n#### 整理代码\n\n现在的代码结构清晰，谁出问题就找到对应的js文件即可。\n通过自调用函数，已经防止了变量命名污染的问题\n\n但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)\n将来通过工具把js文件合并并压缩。现在手工合并js文件演示\n\n- 问题1\n\n```js\n// 如果存在多个自调用函数要用分号分割，否则语法错误\n// 下面代码会报错\n(function () {\n}())\n\n(function () {\n}())\n// 所以代码规范中会建议在自调用函数之前加上分号\n// 下面代码没有问题\n;(function () {\n}())\n\n;(function () {\n}())\n```\n\n- 问题2 \n\n```js\n// 当自调用函数 前面有函数声明时，会把自调用函数作为参数\n// 所以建议自调用函数前，加上;\nvar a = function () {\n  alert('11');\n}\n    \n(function () {\n  alert('22');\n}())\n```\n\n------\n\n## 继承\n\n### 什么是继承\n\n- 现实生活中的继承\n- 程序中的继承\n\n### 构造函数的属性继承：借用构造函数\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nfunction Student (name, age) {\n  // 借用构造函数继承属性成员\n  Person.call(this, name, age)\n}\n\nvar s1 = Student('张三', 18)\nconsole.log(s1.type, s1.name, s1.age) // => human 张三 18\n```\n\n### 构造函数的原型方法继承：拷贝继承（for-in）\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Student (name, age) {\n  Person.call(this, name, age)\n}\n\n// 原型对象拷贝继承原型对象成员\nfor(var key in Person.prototype) {\n  Student.prototype[key] = Person.prototype[key]\n}\n\nvar s1 = Student('张三', 18)\n\ns1.sayName() // => hello 张三\n```\n\n### 另一种继承方式：原型继承\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Student (name, age) {\n  Person.call(this, name, age)\n}\n\n// 利用原型的特性实现继承\nStudent.prototype = new Person()\n\nvar s1 = Student('张三', 18)\n\nconsole.log(s1.type) // => human\n\ns1.sayName() // => hello 张三\n```\n\n------\n\n## 函数进阶\n\n### 函数的定义方式\n\n- 函数声明\n- 函数表达式\n- `new Function`\n\n#### 函数声明\n\n```javascript\nfunction foo () {\n\n}\n```\n\n#### 函数表达式\n\n```javascript\nvar foo = function () {\n\n}\n```\n\n#### 函数声明与函数表达式的区别\n\n- 函数声明必须有名字\n- 函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用\n- 函数表达式类似于变量赋值\n- 函数表达式可以没有名字，例如匿名函数\n- 函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用\n\n下面是一个根据条件定义函数的例子：\n\n```javascript\nif (true) {\n  function f () {\n    console.log(1)\n  }\n} else {\n  function f () {\n    console.log(2)\n  }\n}\n```\n\n以上代码执行结果在不同浏览器中结果不一致。\n\n不过我们可以使用函数表达式解决上面的问题：\n\n```javascript\nvar f\n\nif (true) {\n  f = function () {\n    console.log(1)\n  }\n} else {\n  f = function () {\n    console.log(2)\n  }\n}\n```\n\n### 函数的调用方式\n\n- 普通函数\n- 构造函数\n- 对象方法\n\n### 函数内 `this` 指向的不同场景\n\n函数的调用方式决定了 `this` 指向的不同：\n\n| 调用方式   | 非严格模式   | 备注                |\n| ------ | ------- | ----------------- |\n| 普通函数调用 | window  | 严格模式下是 undefined  |\n| 构造函数调用 | 实例对象    | 原型方法中 this 也是实例对象 |\n| 对象方法调用 | 该方法所属对象 | 紧挨着的对象            |\n| 事件绑定方法 | 绑定事件对象  |                   |\n| 定时器函数  | window  |                   |\n\n这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。\n\n### 函数也是对象\n\n- 所有函数都是 `Function` 的实例\n\n### call、apply、bind\n\n那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，\n这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。\n然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。\n这就是接下来我们要学习的 call、apply、bind 三个函数方法。\n\n#### call\n\n`call()` 方法调用一个函数, 其具有一个指定的 `this` 值和分别地提供的参数(参数的列表)。\n\n<p class=\"danger\">\n  注意：该方法的作用和 `apply()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。\n</p>\n\n语法：\n\n```javascript\nfun.call(thisArg[, arg1[, arg2[, ...]]])\n```\n\n参数：\n\n- `thisArg`\n  - 在 fun 函数运行时指定的 this 值\n  - 如果指定了 null 或者 undefined 则内部 this 指向 window\n- `arg1, arg2, ...`\n  - 指定的参数列表\n\n#### apply\n\n`apply()` 方法调用一个函数, 其具有一个指定的 `this` 值，以及作为一个数组（或类似数组的对象）提供的参数。\n\n<p class=\"danger\">\n  注意：该方法的作用和 `call()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。\n</p>\n\n语法：\n\n```javascript\nfun.apply(thisArg, [argsArray])\n```\n\n参数：\n\n- `thisArg`\n- `argsArray`\n\n`apply()` 与 `call()` 非常相似，不同之处在于提供参数的方式。\n`apply()` 使用参数数组而不是一组参数列表。例如：\n\n```javascript\nfun.apply(this, ['eat', 'bananas'])\n```\n\n#### bind\n\nbind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。\n当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。\n一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。\n\n语法：\n\n```javascript\nfun.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\n参数：\n\n- thisArg\n  - 当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。\n- arg1, arg2, ...\n  - 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。\n\n返回值：\n\n返回由指定的this值和初始化参数改造的原函数拷贝。\n\n示例1：\n\n```javascript\nthis.x = 9; \nvar module = {\n  x: 81,\n  getX: function() { return this.x; }\n};\n\nmodule.getX(); // 返回 81\n\nvar retrieveX = module.getX;\nretrieveX(); // 返回 9, 在这种情况下，\"this\"指向全局作用域\n\n// 创建一个新函数，将\"this\"绑定到module对象\n// 新手可能会被全局的x变量和module里的属性x所迷惑\nvar boundGetX = retrieveX.bind(module);\nboundGetX(); // 返回 81\n```\n\n示例2：\n\n```javascript\nfunction LateBloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n// Declare bloom after a delay of 1 second\nLateBloomer.prototype.bloom = function() {\n  window.setTimeout(this.declare.bind(this), 1000);\n};\n\nLateBloomer.prototype.declare = function() {\n  console.log('I am a beautiful flower with ' +\n    this.petalCount + ' petals!');\n};\n\nvar flower = new LateBloomer();\nflower.bloom();  // 一秒钟后, 调用'declare'方法\n```\n\n#### 小结\n\n- call 和 apply 特性一样\n  - 都是用来调用函数，而且是立即调用\n  - 但是可以在调用函数的同时，通过第一个参数指定函数内部 `this` 的指向\n  - call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可\n  - apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递\n  - 如果第一个参数指定了 `null` 或者 `undefined` 则内部 this 指向 window\n- bind\n  - 可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数\n  - 它和 call、apply 最大的区别是：bind 不会调用\n  - bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递\n    - 1. 在 bind 的同时，以参数列表的形式进行传递\n    - 1. 在调用的时候，以参数列表的形式进行传递\n    - 那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准\n    - 两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部\n\n### 函数的其它成员\n\n- arguments\n  - 实参集合\n- caller\n  - 函数的调用者\n- length\n  - 形参的个数\n- name\n  - 函数的名称\n\n```javascript\nfunction fn(x, y, z) {\n  console.log(fn.length) // => 形参的个数\n  console.log(arguments) // 伪数组实参参数集合\n  console.log(arguments.callee === fn) // 函数本身\n  console.log(fn.caller) // 函数的调用者\n  console.log(fn.name) // => 函数的名字\n}\n\nfunction f() {\n  fn(10, 20, 30)\n}\n\nf()\n```\n\n### 高阶函数\n\n- 函数可以作为参数\n- 函数可以作为返回值\n\n#### 作为参数\n\n```javascript\nfunction eat (callback) {\n  setTimeout(function () {\n    console.log('吃完了')\n    callback()\n  }, 1000)\n}\n\neat(function () {\n  console.log('去唱歌')\n})\n```\n\n#### 作为返回值\n\n```javascript\nfunction genFun (type) {\n  return function (obj) {\n    return Object.prototype.toString.call(obj) === type\n  }\n}\n\nvar isArray = genFun('[object Array]')\nvar isObject = genFun('[object Object]')\n\nconsole.log(isArray([])) // => true\nconsole.log(isArray({})) // => true\n```\n\n### 函数闭包\n\n```javascript\nfunction fn () {\n  var count = 0\n  return {\n    getCount: function () {\n      console.log(count)\n    },\n    setCount: function () {\n      count++\n    }\n  }\n}\n\nvar fns = fn()\n\nfns.getCount() // => 0\nfns.setCount()\nfns.getCount() // => 1\n```\n\n#### 作用域、作用域链、预解析\n\n- 全局作用域\n- 函数作用域\n- **没有块级作用域**\n\n```javascript\n{\n  var foo = 'bar'\n}\n\nconsole.log(foo)\n\nif (true) {\n  var a = 123\n}\nconsole.log(a)\n```\n\n作用域链示例代码：\n\n```javascript\nvar a = 10\n\nfunction fn () {\n  var b = 20\n\n  function fn1 () {\n    var c = 30\n    console.log(a + b + c)\n  }\n\n  function fn2 () {\n    var d = 40\n    console.log(c + d)\n  }\n\n  fn1()\n  fn2()\n}\n```\n\n- 内层作用域可以访问外层作用域，反之不行\n\n#### 什么是闭包\n\n闭包就是能够读取其他函数内部变量的函数，\n由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，\n因此可以把闭包简单理解成 “定义在一个函数内部的函数”。\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n闭包的用途：\n\n- 可以在函数外部读取函数内部成员\n- 让函数内成员始终存活在内存中\n\n#### 一些关于闭包的例子\n\n示例1：\n\n```javascript\nvar arr = [10, 20, 30]\nfor(var i = 0; i < arr.length; i++) {\n  arr[i] = function () {\n    console.log(i)\n  }\n}\n```\n\n示例2：\n\n```javascript\nconsole.log(111)\n\nfor(var i = 0; i < 3; i++) {\n  setTimeout(function () {\n    console.log(i)\n  }, 0)\n}\nconsole.log(222)\n```\n\n示例3：投票\n\n示例4：判断类型\n\n示例5：沙箱模式\n\n#### 闭包的思考题\n\n思考题 1：\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function () {\n    return function () {\n      return this.name;\n    };\n  }\n};\n\nconsole.log(object.getNameFunc()())\n```\n\n思考题 2：\n\n```javascript\nvar name = \"The Window\";　　\nvar object = {　　　　\n  name: \"My Object\",\n  getNameFunc: function () {\n    var that = this;\n    return function () {\n      return that.name;\n    };\n  }\n};\nconsole.log(object.getNameFunc()())\n```\n\n#### 小结\n\n### 函数递归\n\n#### 递归执行模型\n\n```javascript\nfunction fn1 () {\n  console.log(111)\n  fn2()\n  console.log('fn1')\n}\n\nfunction fn2 () {\n  console.log(222)\n  fn3()\n  console.log('fn2')\n}\n\nfunction fn3 () {\n  console.log(333)\n  fn4()\n  console.log('fn3')\n}\n\nfunction fn4 () {\n  console.log(444)\n  console.log('fn4')\n}\n\nfn1()\n```\n\n#### 举个栗子：计算阶乘的递归函数\n\n```javascript\nfunction factorial (num) {\n  if (num <= 1) {\n    return 1\n  } else {\n    return num * factorial(num - 1)\n  }\n}\n```\n\n#### 递归应用场景\n\n- 深拷贝\n- 菜单树\n- 遍历 DOM 树\n\n------\n\n## 正则表达式\n\n- 了解正则表达式基本语法\n- 能够使用JavaScript的正则对象\n\n### 正则表达式简介\n\n#### 什么是正则表达式\n\n正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。\n正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。\n\n#### 正则表达式的作用\n\n1. 给定的字符串是否符合正则表达式的过滤逻辑(匹配)\n2. 可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)\n3. 强大的字符串替换能力(替换)\n\n#### 正则表达式的特点\n\n1. 灵活性、逻辑性和功能性非常的强\n2. 可以迅速地用极简单的方式达到字符串的复杂控制\n3. 对于刚接触的人来说，比较晦涩难懂\n\n### 正则表达式的测试\n\n- [在线测试正则](https://c.runoob.com/front-end/854)\n- 工具中使用正则表达式\n  - sublime/vscode/word\n  - 演示替换所有的数字\n\n### 正则表达式的组成\n\n- 普通字符\n- 特殊字符(元字符)：正则表达式中有特殊意义的字符\n\n示例演示：\n\n- `\\d` 匹配数字\n- `ab\\d` 匹配 ab1、ab2\n\n### 元字符串\n\n通过测试工具演示下面元字符的使用\n\n#### 常用元字符串\n\n| 元字符  | 说明              |\n| ---- | --------------- |\n| \\d   | 匹配数字            |\n| \\D   | 匹配任意非数字的字符      |\n| \\w   | 匹配字母或数字或下划线     |\n| \\W   | 匹配任意不是字母，数字，下划线 |\n| \\s   | 匹配任意的空白符        |\n| \\S   | 匹配任意不是空白符的字符    |\n| .    | 匹配除换行符以外的任意单个字符 |\n| ^    | 表示匹配行首的文本(以谁开始) |\n| $    | 表示匹配行尾的文本(以谁结束) |\n\n#### 限定符\n\n| 限定符   | 说明       |\n| ----- | -------- |\n| *     | 重复零次或更多次 |\n| +     | 重复一次或更多次 |\n| ?     | 重复零次或一次  |\n| {n}   | 重复n次     |\n| {n,}  | 重复n次或更多次 |\n| {n,m} | 重复n到m次   |\n\n#### 其它\n\n```\n[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思\n[^]  匹配除中括号以内的内容\n\\ 转义符\n| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱\n() 从两个直接量中选择一个，分组\n   eg：gr(a|e)y匹配gray和grey\n[\\u4e00-\\u9fa5]  匹配汉字\n```\n\n### 案例\n\n验证手机号：\n\n```javascript\n^\\d{11}$\n```\n\n验证邮编：\n\n```javascript\n^\\d{6}$\n```\n\n验证日期 2012-5-01\n\n```javascript\n^\\d{4}-\\d{1,2}-\\d{1,2}$\n```\n\n验证邮箱 xxx@itcast.cn：\n\n```javascript\n^\\w+@\\w+\\.\\w+$\n```\n\n验证IP地址 192.168.1.10\n\n```javascript\n^\\d{1,3}\\(.\\d{1,3}){3}$\n```\n\n## JavaScript 中使用正则表达式\n\n### 创建正则对象\n\n方式1：\n\n```javascript\nvar reg = new Regex('\\d', 'i');\nvar reg = new Regex('\\d', 'gi');\n```\n\n方式2：\n\n```javascript\nvar reg = /\\d/i;\nvar reg = /\\d/gi;\n```\n\n#### 参数\n\n| 标志   | 说明         |\n| ---- | ---------- |\n| i    | 忽略大小写      |\n| g    | 全局匹配       |\n| gi   | 全局匹配+忽略大小写 |\n\n### 正则匹配\n\n```javascript\n// 匹配日期\nvar dateStr = '2015-10-10';\nvar reg = /^\\d{4}-\\d{1,2}-\\d{1,2}$/\nconsole.log(reg.test(dateStr));\n```\n\n### 正则提取\n\n```javascript\n// 1. 提取工资\nvar str = \"张三：1000，李四：5000，王五：8000。\";\nvar array = str.match(/\\d+/g);\nconsole.log(array);\n\n// 2. 提取email地址\nvar str = \"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com...\";\nvar array = str.match(/\\w+@\\w+\\.\\w+(\\.\\w+)?/g);\nconsole.log(array);\n\n// 3. 分组提取  \n// 3. 提取日期中的年部分  2015-5-10\nvar dateStr = '2016-1-5';\n// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取\nvar reg = /(\\d{4})-\\d{1,2}-\\d{1,2}/;\nif (reg.test(dateStr)) {\n  console.log(RegExp.$1);\n}\n\n// 4. 提取邮件中的每一部分\nvar reg = /(\\w+)@(\\w+)\\.(\\w+)(\\.\\w+)?/;\nvar str = \"123123@xx.com\";\nif (reg.test(str)) {\n  console.log(RegExp.$1);\n  console.log(RegExp.$2);\n  console.log(RegExp.$3);\n}\n```\n\n### 正则替换\n\n```javascript\n// 1. 替换所有空白\nvar str = \"   123AD  asadf   asadfasf  adf \";\nstr = str.replace(/\\s/g,\"xx\");\nconsole.log(str);\n\n// 2. 替换所有,|，\nvar str = \"abc,efg,123，abc,123，a\";\nstr = str.replace(/,|，/g, \".\");\nconsole.log(str);\n```\n\n### 案例：表单验证\n\n```html\nQQ号：<input type=\"text\" id=\"txtQQ\"><span></span><br>\n邮箱：<input type=\"text\" id=\"txtEMail\"><span></span><br>\n手机：<input type=\"text\" id=\"txtPhone\"><span></span><br>\n生日：<input type=\"text\" id=\"txtBirthday\"><span></span><br>\n姓名：<input type=\"text\" id=\"txtName\"><span></span><br>\n```\n\n```javascript\n//获取文本框\nvar txtQQ = document.getElementById(\"txtQQ\");\nvar txtEMail = document.getElementById(\"txtEMail\");\nvar txtPhone = document.getElementById(\"txtPhone\");\nvar txtBirthday = document.getElementById(\"txtBirthday\");\nvar txtName = document.getElementById(\"txtName\");\n\n//\ntxtQQ.onblur = function () {\n  //获取当前文本框对应的span\n  var span = this.nextElementSibling;\n  var reg = /^\\d{5,12}$/;\n  //判断验证是否成功\n  if(!reg.test(this.value) ){\n    //验证不成功\n    span.innerText = \"请输入正确的QQ号\";\n    span.style.color = \"red\";\n  }else{\n    //验证成功\n    span.innerText = \"\";\n    span.style.color = \"\";\n  }\n};\n\n//txtEMail\ntxtEMail.onblur = function () {\n  //获取当前文本框对应的span\n  var span = this.nextElementSibling;\n  var reg = /^\\w+@\\w+\\.\\w+(\\.\\w+)?$/;\n  //判断验证是否成功\n  if(!reg.test(this.value) ){\n    //验证不成功\n    span.innerText = \"请输入正确的EMail地址\";\n    span.style.color = \"red\";\n  }else{\n    //验证成功\n    span.innerText = \"\";\n    span.style.color = \"\";\n  }\n};\n```\n\n表单验证部分，封装成函数：\n\n```javascript\nvar regBirthday = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;\naddCheck(txtBirthday, regBirthday, \"请输入正确的出生日期\");\n//给文本框添加验证\nfunction addCheck(element, reg, tip) {\n  element.onblur = function () {\n    //获取当前文本框对应的span\n    var span = this.nextElementSibling;\n    //判断验证是否成功\n    if(!reg.test(this.value) ){\n      //验证不成功\n      span.innerText = tip;\n      span.style.color = \"red\";\n    }else{\n      //验证成功\n      span.innerText = \"\";\n      span.style.color = \"\";\n    }\n  };\n}\n```\n\n通过给元素增加自定义验证属性对表单进行验证：\n\n```html\n<form id=\"frm\">\n  QQ号：<input type=\"text\" name=\"txtQQ\" data-rule=\"qq\"><span></span><br>\n  邮箱：<input type=\"text\" name=\"txtEMail\" data-rule=\"email\"><span></span><br>\n  手机：<input type=\"text\" name=\"txtPhone\" data-rule=\"phone\"><span></span><br>\n  生日：<input type=\"text\" name=\"txtBirthday\" data-rule=\"date\"><span></span><br>\n  姓名：<input type=\"text\" name=\"txtName\" data-rule=\"cn\"><span></span><br>\n</form>\n```\n\n```javascript\n// 所有的验证规则\nvar rules = [\n  {\n    name: 'qq',\n    reg: /^\\d{5,12}$/,\n    tip: \"请输入正确的QQ\"\n  },\n  {\n    name: 'email',\n    reg: /^\\w+@\\w+\\.\\w+(\\.\\w+)?$/,\n    tip: \"请输入正确的邮箱地址\"\n  },\n  {\n    name: 'phone',\n    reg: /^\\d{11}$/,\n    tip: \"请输入正确的手机号码\"\n  },\n  {\n    name: 'date',\n    reg: /^\\d{4}-\\d{1,2}-\\d{1,2}$/,\n    tip: \"请输入正确的出生日期\"\n  },\n  {\n    name: 'cn',\n    reg: /^[\\u4e00-\\u9fa5]{2,4}$/,\n    tip: \"请输入正确的姓名\"\n  }];\n\naddCheck('frm');\n\n\n//给文本框添加验证\nfunction addCheck(formId) {\n  var i = 0,\n      len = 0,\n      frm =document.getElementById(formId);\n  len = frm.children.length;\n  for (; i < len; i++) {\n    var element = frm.children[i];\n    // 表单元素中有name属性的元素添加验证\n    if (element.name) {\n      element.onblur = function () {\n        // 使用dataset获取data-自定义属性的值\n        var ruleName = this.dataset.rule;\n        var rule =getRuleByRuleName(rules, ruleName);\n\n        var span = this.nextElementSibling;\n        //判断验证是否成功\n        if(!rule.reg.test(this.value) ){\n          //验证不成功\n          span.innerText = rule.tip;\n          span.style.color = \"red\";\n        }else{\n          //验证成功\n          span.innerText = \"\";\n          span.style.color = \"\";\n        }\n      }\n    }\n  }\n}\n\n// 根据规则的名称获取规则对象\nfunction getRuleByRuleName(rules, ruleName) {\n  var i = 0,\n      len = rules.length;\n  var rule = null;\n  for (; i < len; i++) {\n    if (rules[i].name == ruleName) {\n      rule = rules[i];\n      break;\n    }\n  }\n  return rule;\n}\n```\n\n## 补充\n\n### 伪数组和数组\n\n在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。\n\n#### 对象与数组的关系\n\n在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。\n所有 JavaScript 的内置构造函数都是继承自 `Object.prototype` 。\n在这个前提下，可以理解为使用 `new Array()` 或 `[]` 创建出来的数组对象，都会拥有 `Object.prototype` 的属性值。\n\n```javascript\nvar obj = {};// 拥有 Object.prototype 的属性值\nvar arr = [];\n//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，\n//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值\n```\n\n可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。\n\n#### 什么是数组\n\n数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：\n\n```javascript\nvar obj = {};\nvar arr = [];\n \nobj[2] = 'a';\narr[2] = 'a';\n \nconsole.log(obj[2]); // => a\nconsole.log(arr[2]); // => a\nconsole.log(obj.length); // => undefined\nconsole.log(arr.length); // => 3\n```\n\n- obj[2]输出'a'，是因为对象就是普通的键值对存取数据\n- 而arr[2]输出'a' 则不同，数组是通过索引来存取数据，arr[2]之所以输出'a'，是因为数组arr索引2的位置已经存储了数据\n- obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined\n- 而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值\n- 为什么arr.length输出3，而不是1\n  - 在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数\n\n#### 什么是伪数组\n\n1. 拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)\n2. 不具有数组所具有的方法\n\n伪数组，就是像数组一样有 `length` 属性，也有 `0、1、2、3` 等属性的对象，看起来就像数组一样，但不是数组，比如:\n\n```javascript\nvar fakeArray = {\n  \"0\": \"first\",\n  \"1\": \"second\",\n  \"2\": \"third\",\n  length: 3\n};\n \nfor (var i = 0; i < fakeArray.length; i++) {\n  console.log(fakeArray[i]);\n}\n \nArray.prototype.join.call(fakeArray,'+');\n```\n\n常见的伪数组有：\n\n- 函数内部的 `arguments`\n- DOM 对象列表（比如通过 `document.getElementsByTags` 得到的列表）\n- jQuery 对象（比如 `$(\"div\")` ）\n\n伪数组是一个 Object，而真实的数组是一个 Array。\n\n伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：\n\n```javascript\nvar arr = Array.prototype.slice.call(arguments);\n \nArray.prototype.forEach.call(arguments, function(v) {\n  // 循环arguments对象\n});\n\n// push\n// some\n// every\n// filter\n// map\n// ...\n```\n\n以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：\n\n```javascript\nvar obj = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  length: 3\n}\n\n;[].push.call(obj, 'd')\n\nconsole.log([].slice.call(obj))\n\n;[].forEach.call(obj, function (num, index) {\n  console.log(num)\n})\n```\n\n#### 小结\n\n- 对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array\n- 数组是基于索引的实现， length 会自动更新，而对象是键值对\n- 使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法\n\n### JavaScript 垃圾回收机制\n\n### JavaScript 运行机制：Event Loop\n\n### Object\n\n#### 静态成员\n\n- Object.assign()\n- Object.create()\n- Object.keys()\n- Object.defineProperty()\n\n#### 实例成员\n\n- constructor\n- hasOwnProperty()\n- isPrototypeOf\n- propertyIsEnumerable()\n- toString()\n- valueOf()\n\n------\n\n## 附录\n\n### A 代码规范\n\n#### 代码风格\n\n- [JavaScript Standard Style ](https://github.com/feross/standard)\n- [Airbnb JavaScript Style Guide() {](https://github.com/airbnb/javascript)\n\n#### 校验工具\n\n- [JSLint](https://github.com/douglascrockford/JSLint)\n- [JSHint](https://github.com/jshint/jshint)\n- [ESLint](https://github.com/eslint/eslint)\n\n### B Chrome 开发者工具\n\n### C 文档相关工具\n\n- 电子文档制作工具: [docute](https://github.com/egoist/docute)\n- 流程图工具：[DiagramDesigner](http://logicnet.dk/DiagramDesigner/)","source":"_posts/javascript高级.md","raw":"---\ntitle: JavaScript高级\ndate: 2017-5-11 9:31\ntags: js\ncategories: 前端\nsummary_img: http://p57ao19ex.bkt.clouddn.com/snipaste_20180307_112738.png\n---\n## 课程介绍\n\n<!--more-->\n\n### 课程大纲\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2.png\" width=\"400\" alt=\"课程大纲\">\n\n### 目标\n\n- 理解面向对象开发思想\n- 掌握 JavaScript 面向对象开发相关模式\n- 掌握在 JavaScript 中使用正则表达式\n\n### 案例演示\n\n- [贪吃蛇](https://lipengzhou.github.io/new-snake/)\n\n------\n\n## 基本概念复习\n\n> 由于 JavaScript 高级还是针对 JavaScript 语言本身的一个进阶学习，所以在开始之前我们先对以前所学过的 JavaScript 相关知识点做一个快速复习总结。\n\n### 重新介绍 JavaScript\n\n#### JavaScript 是什么\n\n- 解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言\n- 语言特点：动态，头等函数 (First-class Function)\n  - 又称函数是 JavaScript 中的一等公民\n- 执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境\n  - 但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js\n- 编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格\n\n#### JavaScript 与浏览器的关系\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/browser-js.png\" alt=\"\">\n\n#### JavaScript 的组成\n\n| 组成部分       | 说明                |\n| ---------- | ----------------- |\n| ECMAScript | 描述了该语言的语法和基本对象    |\n| DOM        | 描述了处理网页内容的方法和接口   |\n| BOM        | 描述了与浏览器进行交互的方法和接口 |\n\n#### JavaScript 可以做什么\n\n> Any application that can be written in JavaScript, will eventually be written in JavaScript.  \n>\n> 凡是能够用JavaScript实现的应用，最终都必将用JavaScript实现。\n\n- [知乎 - JavaScript 能做什么，该做什么？](https://www.zhihu.com/question/20796866)\n- [最流行的编程语言 JavaScript 能做什么？](https://github.com/phodal/articles/issues/1)\n\n#### JavaScript 发展历史\n\n> [JavaScript 标准参考教程 - JavaScript 语言的历史](http://javascript.ruanyifeng.com/introduction/history.html)\n\n- JavaScript 的诞生\n- JavaScript 与 ECMAScript 的关系\n- JavaScript 与 Java 的关系\n- JavaScript 的版本\n- JavaScript 周边大事记\n\n#### 小结\n\n### 基本概念\n\n> 本小节快速过即可，主要是对学过的内容做知识点梳理。\n\n- 语法\n  - 区分大小写\n  - 标识符           标识符是指变量、函数、属性的名字，或者函数的参数\n  - 注释          \n  - 严格模式        \"use strict\";\n  - 语句 \n- 关键字和保留字\n- 变量\n- 数据类型\n  - typeof 操作符\n  - undefined\n  - null\n  - boolean\n  - number\n  - string\n  - object\n- 运算符（操作符）\n- 流程控制语句（if else else if switch  for   while  do...while  break  continue）\n- 函数  \n\n### JavaScript 中的数据类型\n\nJavaScript 有 5 种简单数据类型：`Undefined、Null、Boolean、Number、String` 和 1 种复杂数据类型 `object` 。\n\n#### 基本类型（值类型）\n\n- Undefined\n- Null\n- Boolean\n- Number\n- String\n\n#### 复杂类型（引用类型）\n\n- Object\n- Array\n- Date\n- RegExp\n- Function\n- 基本包装类型\n  - Boolean\n  - Number\n  - String\n- 单体内置对象\n  - Global\n    - 1)所有在全局作用域内定义的属性和方法，都是Global对象的属性。  \n    - 2)Global对象不能直接使用，也不能用new运算符创建。  \n    - 3)Global对象在JavaScript引擎被初始化时创建，并初始化其方法和属性。  \n    - 4)浏览器把Global对象作为window对象的一部分实现了，因此，所有的全局属性和函数都是window对象的属性和方法。\n  - Math\n\n#### 类型检测\n\n- `typeof`\n- `instanceof`\n- `Object.prototype.toString.call()`\n\n#### 值类型和引用类型在内存中的存储方式（画图说明）\n\n- 值类型按值存储\n- 引用类型按引用存储\n\n#### 值类型复制和引用类型复制（画图说明）\n\n- 值类型按值复制\n- 引用类型按引用复制\n\n#### 值类型和引用类型参数传递（画图说明）\n\n- 值类型按值传递\n- 引用类型按引用传递\n\n#### 值类型与引用类型的差别\n\n- 基本类型在内存中占据固定大小的空间，因此被保存在栈内存中\n- 从一个变量向另一个变量复制基本类型的值，复制的是值的副本\n- 引用类型的值是对象，保存在堆内存\n- 包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针\n- 从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象\n\n#### 小结\n\n- 类型检测方式\n- 值类型和引用类型的存储方式\n- 值类型复制和引用类型复制\n- 方法参数中 值类型数据传递 和 引用类型数据传递\n\n### JavaScript 执行过程\n\nJavaScript 运行分为两个阶段：\n\n- 预解析\n  - 全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）\n  - 函数内部预解析（所有的变量、函数和形参都会参与预解析）\n    - 函数\n    - 形参\n    - 普通变量\n- 执行\n\n先预解析全局作用域，然后执行全局作用域中的代码，\n在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。\n\n------\n\n## JavaScript 面向对象编程\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/mxdxkf.png\" width=\"400\" alt=\"\">\n\n### 面向对象介绍\n\n#### 什么是对象\n\n> Everything is object （万物皆对象）\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/20160823024542444.jpg\" alt=\"\">\n\n对象到底是什么，我们可以从两次层次来理解。\n\n**(1) 对象是单个事物的抽象。**\n\n一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。\n\n**(2) 对象是一个容器，封装了属性（property）和方法（method）。**\n\n属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。\n\n在实际开发中，对象是一个抽象的概念，可以将其简单理解为：**数据集或功能集**。\n\nECMAScript-262 把对象定义为：**无序属性的集合，其属性可以包含基本值、对象或者函数**。\n严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都\n映射到一个值。\n\n<p class=\"tip\">\n  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。\n</p>\n\n#### 什么是面向对象\n\n> 面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/664ba37eeee9f4623c06c066867f1d38_r.jpg\" width=\"400\" alt=\"\">\n\n面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。\n它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。\n\n在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。\n因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。\n\n面向对象与面向过程：\n\n- 面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊\n- 面向对象就是找一个对象，指挥得结果\n- 面向对象将执行者转变成指挥者\n- 面向对象不是面向过程的替代，而是面向过程的封装\n\n面向对象的特性：\n\n- 封装性\n- 继承性\n- [多态性]\n\n扩展阅读：\n\n- [维基百科 - 面向对象程序设计](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)\n- [知乎：如何用一句话说明什么是面向对象思想？](https://www.zhihu.com/question/19854505)\n- [知乎：什么是面向对象编程思想？](https://www.zhihu.com/question/31021366)\n\n#### 程序中面向对象的基本体现\n\n在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。\n自定义的对象数据类型就是面向对象中的类（ Class ）的概念。\n\n我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。\n\n假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：\n\n```javascript\nvar std1 = { name: 'Michael', score: 98 }\nvar std2 = { name: 'Bob', score: 81 }\n```\n\n而处理学生成绩可以通过函数实现，比如打印学生的成绩：\n\n```javascript\nfunction printScore (student) {\n  console.log('姓名：' + student.name + '  ' + '成绩：' + student.score)\n}\n```\n\n如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，\n而是 `Student` 这种数据类型应该被视为一个对象，这个对象拥有 `name` 和 `score` 这两个属性（Property）。\n如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 `printScore` 消息，让对象自己把自己的数据打印出来。\n\n抽象数据行为模板（Class）：\n\n```javascript\nfunction Student (name, score) {\n  this.name = name\n  this.score = score\n}\n\nStudent.prototype.printScore = function () {\n  console.log('姓名：' + this.name + '  ' + '成绩：' + this.score)\n}\n```\n\n根据模板创建具体实例对象（Instance）：\n\n```javascript\nvar std1 = new Student('Michael', 98)\nvar std2 = new Student('Bob', 81)\n```\n\n实例对象具有自己的具体行为（给对象发消息）：\n\n```javascript\nstd1.printScore() // => 姓名：Michael  成绩：98\nstd2.printScore() // => 姓名：Bob  成绩 81\n```\n\n面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。\nClass 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，\n而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。\n\n所以，面向对象的设计思想是：\n\n- 抽象出 Class\n- 根据 Class 创建 Instance\n- 指挥 Instance 得结果\n\n面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。\n\n### 创建对象\n\n#### 简单方式\n\n我们可以直接通过 `new Object()` 创建：\n\n```javascript\nvar person = new Object()\nperson.name = 'Jack'\nperson.age = 18\n\nperson.sayName = function () {\n  console.log(this.name)\n}\n```\n\n每次创建通过 `new Object()` 比较麻烦，所以可以通过它的简写形式对象字面量来创建：\n\n```javascript\nvar person = {\n  name: 'Jack',\n  age: 18,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n```\n\n对于上面的写法固然没有问题，但是假如我们要生成两个 `person` 实例对象呢？\n\n```javascript\nvar person1 = {\n  name: 'Jack',\n  age: 18,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n\nvar person2 = {\n  name: 'Mike',\n  age: 16,\n  sayName: function () {\n    console.log(this.name)\n  }\n}\n```\n\n通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。\n\n#### 简单方式的改进：工厂函数\n\n我们可以写一个函数，解决代码重复问题：\n\n```javascript\nfunction createPerson (name, age) {\n  return {\n    name: name,\n    age: age,\n    sayName: function () {\n      console.log(this.name)\n    }\n  }\n}\n```\n\n然后生成实例对象：\n\n```javascript\nvar p1 = createPerson('Jack', 18)\nvar p2 = createPerson('Mike', 18)\n```\n\n这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，\n但却没有解决对象识别的问题（即怎样知道一个对象的类型）。\n\n### 构造函数\n\n内容引导：\n\n- 构造函数语法\n- 分析构造函数\n- 构造函数和实例对象的关系\n  - 实例的 constructor 属性\n  - instanceof 操作符\n- 普通函数调用和构造函数调用的区别\n- 构造函数的返回值\n- 构造函数的静态成员和实例成员\n  - 函数也是对象\n  - 实例成员\n  - 静态成员\n- 构造函数的问题\n\n#### 更优雅的工厂函数：构造函数\n\n一种更优雅的工厂函数就是下面这样，构造函数：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n}\n\nvar p1 = new Person('Jack', 18)\np1.sayName() // => Jack\n\nvar p2 = new Person('Mike', 23)\np2.sayName() // => Mike\n```\n\n#### 解析构造函数代码的执行\n\n在上面的示例中，`Person()` 函数取代了 `createPerson()` 函数，但是实现效果是一样的。\n这是为什么呢？\n\n我们注意到，`Person()` 中的代码与 `createPerson()` 有以下几点不同之处：\n\n- 没有显示的创建对象\n- 直接将属性和方法赋给了 `this` 对象\n- 没有 `return` 语句\n- 函数名使用的是大写的 `Person`\n\n而要创建 `Person` 实例，则必须使用 `new` 操作符。\n以这种方式调用构造函数会经历以下 4 个步骤：\n\n1. 创建一个新对象   看不到\n2. 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）  看不到\n3. 执行构造函数中的代码\n4. 返回新对象\n\n下面是具体的伪代码：\n\n```javascript\nfunction Person (name, age) {\n  // 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象\n  // var instance = {}\n  // 然后让内部的 this 指向 instance 对象\n  // this = instance\n  // 接下来所有针对 this 的操作实际上操作的就是 instance\n\n  this.name = name\n  this.age = age\n  this.sayName = function () {\n    console.log(this.name)\n  }\n\n  // 在函数的结尾处会将 this 返回，也就是 instance\n  // return this\n}\n```\n\n#### 构造函数和实例对象的关系\n\n使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。\n在每一个实例对象中同时有一个 `constructor` 属性，该属性指向创建该实例的构造函数：\n\n```javascript\nconsole.log(p1.constructor === Person) // => true\nconsole.log(p2.constructor === Person) // => true\nconsole.log(p1.constructor === p2.constructor) // => true\n```\n\n对象的 `constructor` 属性最初是用来标识对象类型的，\n但是，如果要检测对象的类型，还是使用 `instanceof` 操作符更可靠一些：\n\n```javascript\nconsole.log(p1 instanceof Person) // => true\nconsole.log(p2 instanceof Person) // => true\n```\n\n总结：\n\n- 构造函数是根据具体的事物抽象出来的抽象模板\n- 实例对象是根据抽象的构造函数模板得到的具体实例对象\n- 每一个实例对象都具有一个 `constructor` 属性，指向创建该实例的构造函数\n  - 注意： `constructor` 是实例的属性的说法不严谨，具体后面的原型会讲到\n- 可以通过实例的 `constructor` 属性判断实例和构造函数之间的关系\n  - 注意：这种方式不严谨，推荐使用 `instanceof` 操作符，后面学原型会解释为什么\n\n#### 构造函数的问题\n\n使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = function () {\n    console.log('hello ' + this.name)\n  }\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n```\n\n在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。\n那就是对于每一个实例对象，`type` 和 `sayHello` 都是一模一样的内容，\n每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。\n\n```javascript\nconsole.log(p1.sayHello === p2.sayHello) // => false\n```\n\n对于这种问题我们可以把需要共享的函数定义到构造函数外部：\n\n```javascript\nfunction sayHello = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = sayHello\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n\nconsole.log(p1.sayHello === p2.sayHello) // => true\n```\n\n这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。\n\n你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：\n\n```javascript\nvar fns = {\n  sayHello: function () {\n    console.log('hello ' + this.name)\n  },\n  sayAge: function () {\n    console.log(this.age)\n  }\n}\n\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n  this.type = 'human'\n  this.sayHello = fns.sayHello\n  this.sayAge = fns.sayAge\n}\n\nvar p1 = new Person('lpz', 18)\nvar p2 = new Person('Jack', 16)\n\nconsole.log(p1.sayHello === p2.sayHello) // => true\nconsole.log(p1.sayAge === p2.sayAge) // => true\n```\n\n至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。\n但是代码看起来还是那么的格格不入，那有没有更好的方式呢？\n\n#### 小结\n\n- 构造函数语法\n- 分析构造函数\n- 构造函数和实例对象的关系\n  - 实例的 constructor 属性\n  - instanceof 操作符\n- 构造函数的问题\n\n### 原型\n\n内容引导：\n\n- 使用 prototype 原型对象解决构造函数的问题\n- 分析 构造函数、prototype 原型对象、实例对象 三者之间的关系\n- 属性成员搜索原则：原型链\n- 实例对象读写原型对象中的成员\n- 原型对象的简写形式\n- 原生对象的原型\n  - Object\n  - Array\n  - String\n  - ...\n- 原型对象的问题\n- 构造的函数和原型对象使用建议\n\n#### 更好的解决方案： `prototype`\n\nJavascript 规定，每一个构造函数都有一个 `prototype` 属性，指向另一个对象。\n这个对象的所有属性和方法，都会被构造函数的实例继承。\n\n这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 `prototype` 对象上。\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nconsole.log(Person.prototype)\n\nPerson.prototype.type = 'human'\n\nPerson.prototype.sayName = function () {\n  console.log(this.name)\n}\n\nvar p1 = new Person(...)\nvar p2 = new Person(...)\n\nconsole.log(p1.sayName === p2.sayName) // => true\n```\n\n这时所有实例的 `type` 属性和 `sayName()` 方法，\n其实都是同一个内存地址，指向 `prototype` 对象，因此就提高了运行效率。\n\n#### 构造函数、实例、原型三者之间的关系\n\n<img src=\"http://p57ao19ex.bkt.clouddn.com/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png\" alt=\"\">\n\n任何函数都具有一个 `prototype` 属性，该属性是一个对象。\n\n```javascript\nfunction F () {}\nconsole.log(F.prototype) // => object\n\nF.prototype.sayHi = function () {\n  console.log('hi!')\n}\n```\n\n构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数。\n\n```javascript\nconsole.log(F.constructor === F) // => true\n```\n\n通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 `__proto__`。\n\n```javascript\nvar instance = new F()\nconsole.log(instance.__proto__ === F.prototype) // => true\n```\n\n<p class=\"tip\">\n  `__proto__` 是非标准属性。(现在是标准的属性)\n</p>\n\n实例对象可以直接访问原型对象成员。\n\n```javascript\ninstance.sayHi() // => hi!\n```\n\n总结：\n\n- 任何函数都具有一个 `prototype` 属性，该属性是一个对象\n- 构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数\n- 通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 `__proto__`\n- 所有实例都直接或间接继承了原型对象的成员\n\n#### 属性成员的搜索原则：原型链\n\n了解了 **构造函数-实例-原型对象** 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。\n\n每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性\n\n- 搜索首先从对象实例本身开始\n- 如果在实例中找到了具有给定名字的属性，则返回该属性的值\n- 如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性\n- 如果在原型对象中找到了这个属性，则返回该属性的值\n\n也就是说，在我们调用 `person1.sayName()` 的时候，会先后执行两次搜索：\n\n- 首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。\n- ”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。\n- ”于是，它就读取那个保存在原型对象中的函数。\n- 当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。\n\n而这正是多个对象实例共享原型所保存的属性和方法的基本原理。\n\n总结：\n\n- 先在自己身上找，找到即返回\n- 自己身上找不到，则沿着原型链向上查找，找到即返回\n- 如果一直到原型链的末端还没有找到，则返回 `undefined`\n\n#### 实例对象读写原型对象成员\n\n读取：\n\n- 先在自己身上找，找到即返回\n- 自己身上找不到，则沿着原型链向上查找，找到即返回\n- 如果一直到原型链的末端还没有找到，则返回 `undefined`\n\n值类型成员写入（`实例对象.值类型成员 = xx`）：\n\n- 当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上\n- 也就是说该行为实际上会屏蔽掉对原型对象成员的访问\n\n引用类型成员写入（`实例对象.引用类型成员 = xx`）：\n\n- 同上\n\n复杂类型修改（`实例对象.成员.xx = xx`）：\n\n- 同样会先在自己身上找该成员，如果自己身上找到则直接修改\n- 如果自己身上找不到，则沿着原型链继续查找，如果找到则修改\n- 如果一直到原型链的末端还没有找到该成员，则报错（`实例对象.undefined.xx = xx`）\n\n#### 更简单的原型语法\n\n我们注意到，前面例子中每添加一个属性和方法就要敲一遍 `Person.prototype` 。\n为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype = {\n  type: 'human',\n  sayHello: function () {\n    console.log('我叫' + this.name + '，我今年' + this.age + '岁了')\n  }\n}\n```\n\n在该示例中，我们将 `Person.prototype` 重置到了一个新的对象。\n这样做的好处就是为 `Person.prototype` 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 `constructor` 成员。\n\n所以，我们为了保持 `constructor` 的指向正确，建议的写法是：\n\n```javascript\nfunction Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype = {\n  constructor: Person, // => 手动将 constructor 指向正确的构造函数\n  type: 'human',\n  sayHello: function () {\n    console.log('我叫' + this.name + '，我今年' + this.age + '岁了')\n  }\n}\n```\n\n#### 原生对象的原型\n\n<p class=\"tip\">\n  所有函数都有 prototype 属性对象。\n</p>\n\n- Object.prototype\n- Function.prototype\n- Array.prototype\n- String.prototype\n- Number.prototype\n- Date.prototype\n- ...\n\n练习：为数组对象和字符串对象扩展原型方法。\n\n#### 原型对象的问题\n\n- 共享数组\n- 共享对象\n\n如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。\n\n一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。\n\n#### 原型对象使用建议\n\n- 私有成员（一般就是非函数成员）放到构造函数中\n- 共享成员（一般就是函数）放到原型对象中\n- 如果重置了 `prototype` 记得修正 `constructor` 的指向\n\n### 案例：随机方块\n\n------\n\n## 面向对象游戏案例：贪吃蛇\n\n案例相关源码以上传到 GitHub ：https://github.com/lipengzhou/new-snake\n\n### 案例介绍\n\n#### 游戏演示\n\n在线演示地址：[贪吃蛇](https://lipengzhou.github.io/new-snake/)\n\n#### 案例目标\n\n游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。\n\n### 功能实现\n\n#### 搭建页面\n\n放一个容器盛放游戏场景 div#map，设置样式\n\n```css\n#map {\n  width: 800px;\n  height: 600px;\n  background-color: #ccc;\n  position: relative;\n}\n```\n\n#### 分析对象\n\n- 游戏对象\n- 蛇对象\n- 食物对象\n\n#### 创建食物对象\n\n- Food\n  - 属性\n    - x       \n    - y\n    - width\n    - height\n    - color       \n  - 方法\n    - render       随机创建一个食物对象，并输出到map上\n- 创建Food的构造函数，并设置属性\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Food(x, y, width, height, color) {\n  this.x = x || 0;\n  this.y = y || 0;\n  // 食物的宽度和高度(像素)\n  this.width = width || 20;\n  this.height = height || 20;\n  // 食物的颜色\n  this.color = color || 'green';\n}\n```\n\n- 通过原型设置render方法，实现随机产生食物对象，并渲染到map上\n\n```js\nFood.prototype.render = function (map) {\n  // 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度\n  this.x = parseInt(Math.random() * map.offsetWidth / this.width) * this.width;\n  this.y = parseInt(Math.random() * map.offsetHeight / this.height) * this.height;\n\n  // 动态创建食物对应的div\n  var div = document.createElement('div');\n  map.appendChild(div);\n  div.style.position = position;\n  div.style.left = this.x + 'px';\n  div.style.top = this.y + 'px';\n  div.style.width = this.width + 'px';\n  div.style.height = this.height + 'px';\n  div.style.backgroundColor = this.color;\n  elements.push(div);\n}\n```\n\n- 通过自调用函数，进行封装，通过window暴露Food对象\n\n```js\nwindow.Food = Food;\n```\n\n#### 创建蛇对象\n\n- Snake\n- 属性\n  - width    蛇节的宽度 默认20\n  - height   蛇节的高度 默认20\n  - body     数组，蛇的头部和身体，第一个位置是蛇头\n  - direction    蛇运动的方向  默认right  可以是 left  top bottom\n- 方法\n  - render  把蛇渲染到map上\n- Snake构造函数\n\n```js\nvar position = 'absolute';\nvar elements = [];\nfunction Snake(width, height, direction) {\n  // 设置每一个蛇节的宽度\n  this.width = width || 20;\n  this.height = height || 20;\n  // 蛇的每一部分, 第一部分是蛇头\n  this.body = [\n    {x: 3, y: 2, color: 'red'},\n    {x: 2, y: 2, color: 'red'},\n    {x: 1, y: 2, color: 'red'}\n  ];\n  this.direction = direction || 'right';\n}\n```\n\n- render方法\n\n```js\nSnake.prototype.render = function(map) {\n  for(var i = 0; i < this.body.length; i++) {\n    var obj = this.body[i];\n    var div = document.createElement('div');\n    map.appendChild(div);\n    div.style.left = obj.x * this.width + 'px';\n    div.style.top = obj.y * this.height + 'px';\n    div.style.position = position;\n    div.style.backgroundColor = obj.color;\n    div.style.width = this.width + 'px';\n    div.style.height = this.height + 'px';\n  }\n}\n```\n\n- 在自调用函数中暴露Snake对象\n\n```js\nwindow.Snake = Snake;\n```\n\n#### 创建游戏对象\n\n游戏对象，用来管理游戏中的所有对象和开始游戏\n\n- Game\n  - 属性\n    - food\n    - snake\n    - map\n  - 方法\n    - start            开始游戏（绘制所有游戏对象）\n\n\n- 构造函数\n\n```js\nfunction Game(map) {\n  this.food = new Food();\n  this.snake = new Snake();\n  this.map = map;\n}\n```\n\n- 开始游戏，渲染食物对象和蛇对象\n\n```js\nGame.prototype.start = function () {\n  this.food.render(this.map);\n  this.snake.render(this.map);\n}\n```\n\n### 游戏的逻辑\n\n#### 写蛇的move方法\n\n- 在蛇对象(snake.js)中，在Snake的原型上新增move方法\n\n1. 让蛇移动起来，把蛇身体的每一部分往前移动一下\n2. 蛇头部分根据不同的方向决定 往哪里移动\n\n```js\nSnake.prototype.move = function (food, map) {\n  // 让蛇身体的每一部分往前移动一下\n  var i = this.body.length - 1;\n  for(; i > 0; i--) {\n    this.body[i].x = this.body[i - 1].x;\n    this.body[i].y = this.body[i - 1].y;\n  }\n  // 根据移动的方向，决定蛇头如何处理\n  switch(this.direction) {\n    case 'left': \n      this.body[0].x -= 1;\n      break;\n    case 'right':\n      this.body[0].x += 1;\n      break;\n    case 'top':\n      this.body[0].y -= 1;\n      break;\n    case 'bottom':\n      this.body[0].y += 1;\n      break;\n  }\n}\n```\n\n- 在game中测试\n\n```js\nthis.snake.move(this.food, this.map);\nthis.snake.render(this.map);\n```\n\n#### 让蛇自己动起来\n\n- 私有方法\n\n  ```\n  什么是私有方法？\n    不能被外部访问的方法\n  如何创建私有方法？\n    使用自调用函数包裹\n  ```\n\n- 在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来\n\n- 判断蛇是否撞墙\n\n```js\nfunction runSnake() {\n  var timerId = setInterval(function() {\n    this.snake.move(this.food, this.map);\n    // 在渲染前，删除之前的蛇\n    this.snake.render(this.map);\n\n    // 判断蛇是否撞墙\n    var maxX = this.map.offsetWidth / this.snake.width;\n    var maxY = this.map.offsetHeight / this.snake.height;\n    var headX = this.snake.body[0].x;\n    var headY = this.snake.body[0].y;\n    if (headX < 0 || headX >= maxX) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n    if (headY < 0 || headY >= maxY) {\n      clearInterval(timerId);\n      alert('Game Over');\n    }\n\n  }.bind(that), 150);\n}\n```\n\n- 在snake中添加删除蛇的私有方法，在render中调用\n\n```js\nfunction remove() {\n  // 删除渲染的蛇\n  var i = elements.length - 1;\n  for(; i >= 0; i--) {\n    // 删除页面上渲染的蛇\n    elements[i].parentNode.removeChild(elements[i]);\n    // 删除elements数组中的元素\n    elements.splice(i, 1);\n  }\n}\n```\n\n- 在game中通过键盘控制蛇的移动方向\n\n```js\nfunction bindKey() {\n  document.addEventListener('keydown', function(e) {\n    switch (e.keyCode) {\n      case 37:\n        // left\n        this.snake.direction = 'left';\n        break;\n      case 38:\n        // top\n        this.snake.direction = 'top';\n        break;\n      case 39:\n        // right\n        this.snake.direction = 'right';\n        break;\n      case 40:\n        // bottom\n        this.snake.direction = 'bottom';\n        break;\n    }\n  }.bind(that), false);\n}\n```\n\n- 在start方法中调用\n\n```js\nbindKey();\n```\n\n#### 判断蛇是否吃到食物\n\n```js\n// 在Snake的move方法中\n\n// 在移动的过程中判断蛇是否吃到食物\n// 如果蛇头和食物的位置重合代表吃到食物\n// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换\nvar headX = this.body[0].x * this.width;\nvar headY = this.body[0].y * this.height;\nif (headX === food.x && headY === food.y) {\n  // 吃到食物，往蛇节的最后加一节\n  var last = this.body[this.body.length - 1];\n  this.body.push({\n    x: last.x,\n    y: last.y,\n    color: last.color\n  })\n  // 把现在的食物对象删除，并重新随机渲染一个食物对象\n  food.render(map);\n}\n```\n\n### 其它处理\n\n#### 把html中的js代码放到index.js中\n\n避免html中出现js代码\n\n#### 自调用函数的参数\n\n```js\n(function (window, undefined) {\n  var document = window.document;\n\n}(window, undefined))\n```\n\n- 传入window对象\n\n将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)\n\n- 传入undefined\n\n在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)\n因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值\n\n#### 整理代码\n\n现在的代码结构清晰，谁出问题就找到对应的js文件即可。\n通过自调用函数，已经防止了变量命名污染的问题\n\n但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)\n将来通过工具把js文件合并并压缩。现在手工合并js文件演示\n\n- 问题1\n\n```js\n// 如果存在多个自调用函数要用分号分割，否则语法错误\n// 下面代码会报错\n(function () {\n}())\n\n(function () {\n}())\n// 所以代码规范中会建议在自调用函数之前加上分号\n// 下面代码没有问题\n;(function () {\n}())\n\n;(function () {\n}())\n```\n\n- 问题2 \n\n```js\n// 当自调用函数 前面有函数声明时，会把自调用函数作为参数\n// 所以建议自调用函数前，加上;\nvar a = function () {\n  alert('11');\n}\n    \n(function () {\n  alert('22');\n}())\n```\n\n------\n\n## 继承\n\n### 什么是继承\n\n- 现实生活中的继承\n- 程序中的继承\n\n### 构造函数的属性继承：借用构造函数\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nfunction Student (name, age) {\n  // 借用构造函数继承属性成员\n  Person.call(this, name, age)\n}\n\nvar s1 = Student('张三', 18)\nconsole.log(s1.type, s1.name, s1.age) // => human 张三 18\n```\n\n### 构造函数的原型方法继承：拷贝继承（for-in）\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Student (name, age) {\n  Person.call(this, name, age)\n}\n\n// 原型对象拷贝继承原型对象成员\nfor(var key in Person.prototype) {\n  Student.prototype[key] = Person.prototype[key]\n}\n\nvar s1 = Student('张三', 18)\n\ns1.sayName() // => hello 张三\n```\n\n### 另一种继承方式：原型继承\n\n```javascript\nfunction Person (name, age) {\n  this.type = 'human'\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.sayName = function () {\n  console.log('hello ' + this.name)\n}\n\nfunction Student (name, age) {\n  Person.call(this, name, age)\n}\n\n// 利用原型的特性实现继承\nStudent.prototype = new Person()\n\nvar s1 = Student('张三', 18)\n\nconsole.log(s1.type) // => human\n\ns1.sayName() // => hello 张三\n```\n\n------\n\n## 函数进阶\n\n### 函数的定义方式\n\n- 函数声明\n- 函数表达式\n- `new Function`\n\n#### 函数声明\n\n```javascript\nfunction foo () {\n\n}\n```\n\n#### 函数表达式\n\n```javascript\nvar foo = function () {\n\n}\n```\n\n#### 函数声明与函数表达式的区别\n\n- 函数声明必须有名字\n- 函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用\n- 函数表达式类似于变量赋值\n- 函数表达式可以没有名字，例如匿名函数\n- 函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用\n\n下面是一个根据条件定义函数的例子：\n\n```javascript\nif (true) {\n  function f () {\n    console.log(1)\n  }\n} else {\n  function f () {\n    console.log(2)\n  }\n}\n```\n\n以上代码执行结果在不同浏览器中结果不一致。\n\n不过我们可以使用函数表达式解决上面的问题：\n\n```javascript\nvar f\n\nif (true) {\n  f = function () {\n    console.log(1)\n  }\n} else {\n  f = function () {\n    console.log(2)\n  }\n}\n```\n\n### 函数的调用方式\n\n- 普通函数\n- 构造函数\n- 对象方法\n\n### 函数内 `this` 指向的不同场景\n\n函数的调用方式决定了 `this` 指向的不同：\n\n| 调用方式   | 非严格模式   | 备注                |\n| ------ | ------- | ----------------- |\n| 普通函数调用 | window  | 严格模式下是 undefined  |\n| 构造函数调用 | 实例对象    | 原型方法中 this 也是实例对象 |\n| 对象方法调用 | 该方法所属对象 | 紧挨着的对象            |\n| 事件绑定方法 | 绑定事件对象  |                   |\n| 定时器函数  | window  |                   |\n\n这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。\n\n### 函数也是对象\n\n- 所有函数都是 `Function` 的实例\n\n### call、apply、bind\n\n那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，\n这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。\n然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。\n这就是接下来我们要学习的 call、apply、bind 三个函数方法。\n\n#### call\n\n`call()` 方法调用一个函数, 其具有一个指定的 `this` 值和分别地提供的参数(参数的列表)。\n\n<p class=\"danger\">\n  注意：该方法的作用和 `apply()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。\n</p>\n\n语法：\n\n```javascript\nfun.call(thisArg[, arg1[, arg2[, ...]]])\n```\n\n参数：\n\n- `thisArg`\n  - 在 fun 函数运行时指定的 this 值\n  - 如果指定了 null 或者 undefined 则内部 this 指向 window\n- `arg1, arg2, ...`\n  - 指定的参数列表\n\n#### apply\n\n`apply()` 方法调用一个函数, 其具有一个指定的 `this` 值，以及作为一个数组（或类似数组的对象）提供的参数。\n\n<p class=\"danger\">\n  注意：该方法的作用和 `call()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。\n</p>\n\n语法：\n\n```javascript\nfun.apply(thisArg, [argsArray])\n```\n\n参数：\n\n- `thisArg`\n- `argsArray`\n\n`apply()` 与 `call()` 非常相似，不同之处在于提供参数的方式。\n`apply()` 使用参数数组而不是一组参数列表。例如：\n\n```javascript\nfun.apply(this, ['eat', 'bananas'])\n```\n\n#### bind\n\nbind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。\n当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。\n一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。\n\n语法：\n\n```javascript\nfun.bind(thisArg[, arg1[, arg2[, ...]]])\n```\n\n参数：\n\n- thisArg\n  - 当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。\n- arg1, arg2, ...\n  - 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。\n\n返回值：\n\n返回由指定的this值和初始化参数改造的原函数拷贝。\n\n示例1：\n\n```javascript\nthis.x = 9; \nvar module = {\n  x: 81,\n  getX: function() { return this.x; }\n};\n\nmodule.getX(); // 返回 81\n\nvar retrieveX = module.getX;\nretrieveX(); // 返回 9, 在这种情况下，\"this\"指向全局作用域\n\n// 创建一个新函数，将\"this\"绑定到module对象\n// 新手可能会被全局的x变量和module里的属性x所迷惑\nvar boundGetX = retrieveX.bind(module);\nboundGetX(); // 返回 81\n```\n\n示例2：\n\n```javascript\nfunction LateBloomer() {\n  this.petalCount = Math.ceil(Math.random() * 12) + 1;\n}\n\n// Declare bloom after a delay of 1 second\nLateBloomer.prototype.bloom = function() {\n  window.setTimeout(this.declare.bind(this), 1000);\n};\n\nLateBloomer.prototype.declare = function() {\n  console.log('I am a beautiful flower with ' +\n    this.petalCount + ' petals!');\n};\n\nvar flower = new LateBloomer();\nflower.bloom();  // 一秒钟后, 调用'declare'方法\n```\n\n#### 小结\n\n- call 和 apply 特性一样\n  - 都是用来调用函数，而且是立即调用\n  - 但是可以在调用函数的同时，通过第一个参数指定函数内部 `this` 的指向\n  - call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可\n  - apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递\n  - 如果第一个参数指定了 `null` 或者 `undefined` 则内部 this 指向 window\n- bind\n  - 可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数\n  - 它和 call、apply 最大的区别是：bind 不会调用\n  - bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递\n    - 1. 在 bind 的同时，以参数列表的形式进行传递\n    - 1. 在调用的时候，以参数列表的形式进行传递\n    - 那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准\n    - 两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部\n\n### 函数的其它成员\n\n- arguments\n  - 实参集合\n- caller\n  - 函数的调用者\n- length\n  - 形参的个数\n- name\n  - 函数的名称\n\n```javascript\nfunction fn(x, y, z) {\n  console.log(fn.length) // => 形参的个数\n  console.log(arguments) // 伪数组实参参数集合\n  console.log(arguments.callee === fn) // 函数本身\n  console.log(fn.caller) // 函数的调用者\n  console.log(fn.name) // => 函数的名字\n}\n\nfunction f() {\n  fn(10, 20, 30)\n}\n\nf()\n```\n\n### 高阶函数\n\n- 函数可以作为参数\n- 函数可以作为返回值\n\n#### 作为参数\n\n```javascript\nfunction eat (callback) {\n  setTimeout(function () {\n    console.log('吃完了')\n    callback()\n  }, 1000)\n}\n\neat(function () {\n  console.log('去唱歌')\n})\n```\n\n#### 作为返回值\n\n```javascript\nfunction genFun (type) {\n  return function (obj) {\n    return Object.prototype.toString.call(obj) === type\n  }\n}\n\nvar isArray = genFun('[object Array]')\nvar isObject = genFun('[object Object]')\n\nconsole.log(isArray([])) // => true\nconsole.log(isArray({})) // => true\n```\n\n### 函数闭包\n\n```javascript\nfunction fn () {\n  var count = 0\n  return {\n    getCount: function () {\n      console.log(count)\n    },\n    setCount: function () {\n      count++\n    }\n  }\n}\n\nvar fns = fn()\n\nfns.getCount() // => 0\nfns.setCount()\nfns.getCount() // => 1\n```\n\n#### 作用域、作用域链、预解析\n\n- 全局作用域\n- 函数作用域\n- **没有块级作用域**\n\n```javascript\n{\n  var foo = 'bar'\n}\n\nconsole.log(foo)\n\nif (true) {\n  var a = 123\n}\nconsole.log(a)\n```\n\n作用域链示例代码：\n\n```javascript\nvar a = 10\n\nfunction fn () {\n  var b = 20\n\n  function fn1 () {\n    var c = 30\n    console.log(a + b + c)\n  }\n\n  function fn2 () {\n    var d = 40\n    console.log(c + d)\n  }\n\n  fn1()\n  fn2()\n}\n```\n\n- 内层作用域可以访问外层作用域，反之不行\n\n#### 什么是闭包\n\n闭包就是能够读取其他函数内部变量的函数，\n由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，\n因此可以把闭包简单理解成 “定义在一个函数内部的函数”。\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n闭包的用途：\n\n- 可以在函数外部读取函数内部成员\n- 让函数内成员始终存活在内存中\n\n#### 一些关于闭包的例子\n\n示例1：\n\n```javascript\nvar arr = [10, 20, 30]\nfor(var i = 0; i < arr.length; i++) {\n  arr[i] = function () {\n    console.log(i)\n  }\n}\n```\n\n示例2：\n\n```javascript\nconsole.log(111)\n\nfor(var i = 0; i < 3; i++) {\n  setTimeout(function () {\n    console.log(i)\n  }, 0)\n}\nconsole.log(222)\n```\n\n示例3：投票\n\n示例4：判断类型\n\n示例5：沙箱模式\n\n#### 闭包的思考题\n\n思考题 1：\n\n```javascript\nvar name = \"The Window\";\nvar object = {\n  name: \"My Object\",\n  getNameFunc: function () {\n    return function () {\n      return this.name;\n    };\n  }\n};\n\nconsole.log(object.getNameFunc()())\n```\n\n思考题 2：\n\n```javascript\nvar name = \"The Window\";　　\nvar object = {　　　　\n  name: \"My Object\",\n  getNameFunc: function () {\n    var that = this;\n    return function () {\n      return that.name;\n    };\n  }\n};\nconsole.log(object.getNameFunc()())\n```\n\n#### 小结\n\n### 函数递归\n\n#### 递归执行模型\n\n```javascript\nfunction fn1 () {\n  console.log(111)\n  fn2()\n  console.log('fn1')\n}\n\nfunction fn2 () {\n  console.log(222)\n  fn3()\n  console.log('fn2')\n}\n\nfunction fn3 () {\n  console.log(333)\n  fn4()\n  console.log('fn3')\n}\n\nfunction fn4 () {\n  console.log(444)\n  console.log('fn4')\n}\n\nfn1()\n```\n\n#### 举个栗子：计算阶乘的递归函数\n\n```javascript\nfunction factorial (num) {\n  if (num <= 1) {\n    return 1\n  } else {\n    return num * factorial(num - 1)\n  }\n}\n```\n\n#### 递归应用场景\n\n- 深拷贝\n- 菜单树\n- 遍历 DOM 树\n\n------\n\n## 正则表达式\n\n- 了解正则表达式基本语法\n- 能够使用JavaScript的正则对象\n\n### 正则表达式简介\n\n#### 什么是正则表达式\n\n正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。\n正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。\n\n#### 正则表达式的作用\n\n1. 给定的字符串是否符合正则表达式的过滤逻辑(匹配)\n2. 可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)\n3. 强大的字符串替换能力(替换)\n\n#### 正则表达式的特点\n\n1. 灵活性、逻辑性和功能性非常的强\n2. 可以迅速地用极简单的方式达到字符串的复杂控制\n3. 对于刚接触的人来说，比较晦涩难懂\n\n### 正则表达式的测试\n\n- [在线测试正则](https://c.runoob.com/front-end/854)\n- 工具中使用正则表达式\n  - sublime/vscode/word\n  - 演示替换所有的数字\n\n### 正则表达式的组成\n\n- 普通字符\n- 特殊字符(元字符)：正则表达式中有特殊意义的字符\n\n示例演示：\n\n- `\\d` 匹配数字\n- `ab\\d` 匹配 ab1、ab2\n\n### 元字符串\n\n通过测试工具演示下面元字符的使用\n\n#### 常用元字符串\n\n| 元字符  | 说明              |\n| ---- | --------------- |\n| \\d   | 匹配数字            |\n| \\D   | 匹配任意非数字的字符      |\n| \\w   | 匹配字母或数字或下划线     |\n| \\W   | 匹配任意不是字母，数字，下划线 |\n| \\s   | 匹配任意的空白符        |\n| \\S   | 匹配任意不是空白符的字符    |\n| .    | 匹配除换行符以外的任意单个字符 |\n| ^    | 表示匹配行首的文本(以谁开始) |\n| $    | 表示匹配行尾的文本(以谁结束) |\n\n#### 限定符\n\n| 限定符   | 说明       |\n| ----- | -------- |\n| *     | 重复零次或更多次 |\n| +     | 重复一次或更多次 |\n| ?     | 重复零次或一次  |\n| {n}   | 重复n次     |\n| {n,}  | 重复n次或更多次 |\n| {n,m} | 重复n到m次   |\n\n#### 其它\n\n```\n[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思\n[^]  匹配除中括号以内的内容\n\\ 转义符\n| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱\n() 从两个直接量中选择一个，分组\n   eg：gr(a|e)y匹配gray和grey\n[\\u4e00-\\u9fa5]  匹配汉字\n```\n\n### 案例\n\n验证手机号：\n\n```javascript\n^\\d{11}$\n```\n\n验证邮编：\n\n```javascript\n^\\d{6}$\n```\n\n验证日期 2012-5-01\n\n```javascript\n^\\d{4}-\\d{1,2}-\\d{1,2}$\n```\n\n验证邮箱 xxx@itcast.cn：\n\n```javascript\n^\\w+@\\w+\\.\\w+$\n```\n\n验证IP地址 192.168.1.10\n\n```javascript\n^\\d{1,3}\\(.\\d{1,3}){3}$\n```\n\n## JavaScript 中使用正则表达式\n\n### 创建正则对象\n\n方式1：\n\n```javascript\nvar reg = new Regex('\\d', 'i');\nvar reg = new Regex('\\d', 'gi');\n```\n\n方式2：\n\n```javascript\nvar reg = /\\d/i;\nvar reg = /\\d/gi;\n```\n\n#### 参数\n\n| 标志   | 说明         |\n| ---- | ---------- |\n| i    | 忽略大小写      |\n| g    | 全局匹配       |\n| gi   | 全局匹配+忽略大小写 |\n\n### 正则匹配\n\n```javascript\n// 匹配日期\nvar dateStr = '2015-10-10';\nvar reg = /^\\d{4}-\\d{1,2}-\\d{1,2}$/\nconsole.log(reg.test(dateStr));\n```\n\n### 正则提取\n\n```javascript\n// 1. 提取工资\nvar str = \"张三：1000，李四：5000，王五：8000。\";\nvar array = str.match(/\\d+/g);\nconsole.log(array);\n\n// 2. 提取email地址\nvar str = \"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com...\";\nvar array = str.match(/\\w+@\\w+\\.\\w+(\\.\\w+)?/g);\nconsole.log(array);\n\n// 3. 分组提取  \n// 3. 提取日期中的年部分  2015-5-10\nvar dateStr = '2016-1-5';\n// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取\nvar reg = /(\\d{4})-\\d{1,2}-\\d{1,2}/;\nif (reg.test(dateStr)) {\n  console.log(RegExp.$1);\n}\n\n// 4. 提取邮件中的每一部分\nvar reg = /(\\w+)@(\\w+)\\.(\\w+)(\\.\\w+)?/;\nvar str = \"123123@xx.com\";\nif (reg.test(str)) {\n  console.log(RegExp.$1);\n  console.log(RegExp.$2);\n  console.log(RegExp.$3);\n}\n```\n\n### 正则替换\n\n```javascript\n// 1. 替换所有空白\nvar str = \"   123AD  asadf   asadfasf  adf \";\nstr = str.replace(/\\s/g,\"xx\");\nconsole.log(str);\n\n// 2. 替换所有,|，\nvar str = \"abc,efg,123，abc,123，a\";\nstr = str.replace(/,|，/g, \".\");\nconsole.log(str);\n```\n\n### 案例：表单验证\n\n```html\nQQ号：<input type=\"text\" id=\"txtQQ\"><span></span><br>\n邮箱：<input type=\"text\" id=\"txtEMail\"><span></span><br>\n手机：<input type=\"text\" id=\"txtPhone\"><span></span><br>\n生日：<input type=\"text\" id=\"txtBirthday\"><span></span><br>\n姓名：<input type=\"text\" id=\"txtName\"><span></span><br>\n```\n\n```javascript\n//获取文本框\nvar txtQQ = document.getElementById(\"txtQQ\");\nvar txtEMail = document.getElementById(\"txtEMail\");\nvar txtPhone = document.getElementById(\"txtPhone\");\nvar txtBirthday = document.getElementById(\"txtBirthday\");\nvar txtName = document.getElementById(\"txtName\");\n\n//\ntxtQQ.onblur = function () {\n  //获取当前文本框对应的span\n  var span = this.nextElementSibling;\n  var reg = /^\\d{5,12}$/;\n  //判断验证是否成功\n  if(!reg.test(this.value) ){\n    //验证不成功\n    span.innerText = \"请输入正确的QQ号\";\n    span.style.color = \"red\";\n  }else{\n    //验证成功\n    span.innerText = \"\";\n    span.style.color = \"\";\n  }\n};\n\n//txtEMail\ntxtEMail.onblur = function () {\n  //获取当前文本框对应的span\n  var span = this.nextElementSibling;\n  var reg = /^\\w+@\\w+\\.\\w+(\\.\\w+)?$/;\n  //判断验证是否成功\n  if(!reg.test(this.value) ){\n    //验证不成功\n    span.innerText = \"请输入正确的EMail地址\";\n    span.style.color = \"red\";\n  }else{\n    //验证成功\n    span.innerText = \"\";\n    span.style.color = \"\";\n  }\n};\n```\n\n表单验证部分，封装成函数：\n\n```javascript\nvar regBirthday = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;\naddCheck(txtBirthday, regBirthday, \"请输入正确的出生日期\");\n//给文本框添加验证\nfunction addCheck(element, reg, tip) {\n  element.onblur = function () {\n    //获取当前文本框对应的span\n    var span = this.nextElementSibling;\n    //判断验证是否成功\n    if(!reg.test(this.value) ){\n      //验证不成功\n      span.innerText = tip;\n      span.style.color = \"red\";\n    }else{\n      //验证成功\n      span.innerText = \"\";\n      span.style.color = \"\";\n    }\n  };\n}\n```\n\n通过给元素增加自定义验证属性对表单进行验证：\n\n```html\n<form id=\"frm\">\n  QQ号：<input type=\"text\" name=\"txtQQ\" data-rule=\"qq\"><span></span><br>\n  邮箱：<input type=\"text\" name=\"txtEMail\" data-rule=\"email\"><span></span><br>\n  手机：<input type=\"text\" name=\"txtPhone\" data-rule=\"phone\"><span></span><br>\n  生日：<input type=\"text\" name=\"txtBirthday\" data-rule=\"date\"><span></span><br>\n  姓名：<input type=\"text\" name=\"txtName\" data-rule=\"cn\"><span></span><br>\n</form>\n```\n\n```javascript\n// 所有的验证规则\nvar rules = [\n  {\n    name: 'qq',\n    reg: /^\\d{5,12}$/,\n    tip: \"请输入正确的QQ\"\n  },\n  {\n    name: 'email',\n    reg: /^\\w+@\\w+\\.\\w+(\\.\\w+)?$/,\n    tip: \"请输入正确的邮箱地址\"\n  },\n  {\n    name: 'phone',\n    reg: /^\\d{11}$/,\n    tip: \"请输入正确的手机号码\"\n  },\n  {\n    name: 'date',\n    reg: /^\\d{4}-\\d{1,2}-\\d{1,2}$/,\n    tip: \"请输入正确的出生日期\"\n  },\n  {\n    name: 'cn',\n    reg: /^[\\u4e00-\\u9fa5]{2,4}$/,\n    tip: \"请输入正确的姓名\"\n  }];\n\naddCheck('frm');\n\n\n//给文本框添加验证\nfunction addCheck(formId) {\n  var i = 0,\n      len = 0,\n      frm =document.getElementById(formId);\n  len = frm.children.length;\n  for (; i < len; i++) {\n    var element = frm.children[i];\n    // 表单元素中有name属性的元素添加验证\n    if (element.name) {\n      element.onblur = function () {\n        // 使用dataset获取data-自定义属性的值\n        var ruleName = this.dataset.rule;\n        var rule =getRuleByRuleName(rules, ruleName);\n\n        var span = this.nextElementSibling;\n        //判断验证是否成功\n        if(!rule.reg.test(this.value) ){\n          //验证不成功\n          span.innerText = rule.tip;\n          span.style.color = \"red\";\n        }else{\n          //验证成功\n          span.innerText = \"\";\n          span.style.color = \"\";\n        }\n      }\n    }\n  }\n}\n\n// 根据规则的名称获取规则对象\nfunction getRuleByRuleName(rules, ruleName) {\n  var i = 0,\n      len = rules.length;\n  var rule = null;\n  for (; i < len; i++) {\n    if (rules[i].name == ruleName) {\n      rule = rules[i];\n      break;\n    }\n  }\n  return rule;\n}\n```\n\n## 补充\n\n### 伪数组和数组\n\n在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。\n\n#### 对象与数组的关系\n\n在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。\n所有 JavaScript 的内置构造函数都是继承自 `Object.prototype` 。\n在这个前提下，可以理解为使用 `new Array()` 或 `[]` 创建出来的数组对象，都会拥有 `Object.prototype` 的属性值。\n\n```javascript\nvar obj = {};// 拥有 Object.prototype 的属性值\nvar arr = [];\n//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，\n//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值\n```\n\n可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。\n\n#### 什么是数组\n\n数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：\n\n```javascript\nvar obj = {};\nvar arr = [];\n \nobj[2] = 'a';\narr[2] = 'a';\n \nconsole.log(obj[2]); // => a\nconsole.log(arr[2]); // => a\nconsole.log(obj.length); // => undefined\nconsole.log(arr.length); // => 3\n```\n\n- obj[2]输出'a'，是因为对象就是普通的键值对存取数据\n- 而arr[2]输出'a' 则不同，数组是通过索引来存取数据，arr[2]之所以输出'a'，是因为数组arr索引2的位置已经存储了数据\n- obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined\n- 而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值\n- 为什么arr.length输出3，而不是1\n  - 在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数\n\n#### 什么是伪数组\n\n1. 拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)\n2. 不具有数组所具有的方法\n\n伪数组，就是像数组一样有 `length` 属性，也有 `0、1、2、3` 等属性的对象，看起来就像数组一样，但不是数组，比如:\n\n```javascript\nvar fakeArray = {\n  \"0\": \"first\",\n  \"1\": \"second\",\n  \"2\": \"third\",\n  length: 3\n};\n \nfor (var i = 0; i < fakeArray.length; i++) {\n  console.log(fakeArray[i]);\n}\n \nArray.prototype.join.call(fakeArray,'+');\n```\n\n常见的伪数组有：\n\n- 函数内部的 `arguments`\n- DOM 对象列表（比如通过 `document.getElementsByTags` 得到的列表）\n- jQuery 对象（比如 `$(\"div\")` ）\n\n伪数组是一个 Object，而真实的数组是一个 Array。\n\n伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：\n\n```javascript\nvar arr = Array.prototype.slice.call(arguments);\n \nArray.prototype.forEach.call(arguments, function(v) {\n  // 循环arguments对象\n});\n\n// push\n// some\n// every\n// filter\n// map\n// ...\n```\n\n以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：\n\n```javascript\nvar obj = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  length: 3\n}\n\n;[].push.call(obj, 'd')\n\nconsole.log([].slice.call(obj))\n\n;[].forEach.call(obj, function (num, index) {\n  console.log(num)\n})\n```\n\n#### 小结\n\n- 对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array\n- 数组是基于索引的实现， length 会自动更新，而对象是键值对\n- 使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法\n\n### JavaScript 垃圾回收机制\n\n### JavaScript 运行机制：Event Loop\n\n### Object\n\n#### 静态成员\n\n- Object.assign()\n- Object.create()\n- Object.keys()\n- Object.defineProperty()\n\n#### 实例成员\n\n- constructor\n- hasOwnProperty()\n- isPrototypeOf\n- propertyIsEnumerable()\n- toString()\n- valueOf()\n\n------\n\n## 附录\n\n### A 代码规范\n\n#### 代码风格\n\n- [JavaScript Standard Style ](https://github.com/feross/standard)\n- [Airbnb JavaScript Style Guide() {](https://github.com/airbnb/javascript)\n\n#### 校验工具\n\n- [JSLint](https://github.com/douglascrockford/JSLint)\n- [JSHint](https://github.com/jshint/jshint)\n- [ESLint](https://github.com/eslint/eslint)\n\n### B Chrome 开发者工具\n\n### C 文档相关工具\n\n- 电子文档制作工具: [docute](https://github.com/egoist/docute)\n- 流程图工具：[DiagramDesigner](http://logicnet.dk/DiagramDesigner/)","slug":"javascript高级","published":1,"updated":"2018-03-07T03:28:50.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc1w000uskrxcfnr4pp1","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><a id=\"more\"></a>\n<h3 id=\"课程大纲\"><a href=\"#课程大纲\" class=\"headerlink\" title=\"课程大纲\"></a>课程大纲</h3><p><img src=\"http://p57ao19ex.bkt.clouddn.com/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2.png\" width=\"400\" alt=\"课程大纲\"></p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><ul>\n<li>理解面向对象开发思想</li>\n<li>掌握 JavaScript 面向对象开发相关模式</li>\n<li>掌握在 JavaScript 中使用正则表达式</li>\n</ul>\n<h3 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><ul>\n<li><a href=\"https://lipengzhou.github.io/new-snake/\" target=\"_blank\" rel=\"noopener\">贪吃蛇</a></li>\n</ul>\n<hr>\n<h2 id=\"基本概念复习\"><a href=\"#基本概念复习\" class=\"headerlink\" title=\"基本概念复习\"></a>基本概念复习</h2><blockquote>\n<p>由于 JavaScript 高级还是针对 JavaScript 语言本身的一个进阶学习，所以在开始之前我们先对以前所学过的 JavaScript 相关知识点做一个快速复习总结。</p>\n</blockquote>\n<h3 id=\"重新介绍-JavaScript\"><a href=\"#重新介绍-JavaScript\" class=\"headerlink\" title=\"重新介绍 JavaScript\"></a>重新介绍 JavaScript</h3><h4 id=\"JavaScript-是什么\"><a href=\"#JavaScript-是什么\" class=\"headerlink\" title=\"JavaScript 是什么\"></a>JavaScript 是什么</h4><ul>\n<li>解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言</li>\n<li>语言特点：动态，头等函数 (First-class Function)<ul>\n<li>又称函数是 JavaScript 中的一等公民</li>\n</ul>\n</li>\n<li>执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境<ul>\n<li>但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js</li>\n</ul>\n</li>\n<li>编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格</li>\n</ul>\n<h4 id=\"JavaScript-与浏览器的关系\"><a href=\"#JavaScript-与浏览器的关系\" class=\"headerlink\" title=\"JavaScript 与浏览器的关系\"></a>JavaScript 与浏览器的关系</h4><p><img src=\"http://p57ao19ex.bkt.clouddn.com/browser-js.png\" alt=\"\"></p>\n<h4 id=\"JavaScript-的组成\"><a href=\"#JavaScript-的组成\" class=\"headerlink\" title=\"JavaScript 的组成\"></a>JavaScript 的组成</h4><table>\n<thead>\n<tr>\n<th>组成部分</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ECMAScript</td>\n<td>描述了该语言的语法和基本对象</td>\n</tr>\n<tr>\n<td>DOM</td>\n<td>描述了处理网页内容的方法和接口</td>\n</tr>\n<tr>\n<td>BOM</td>\n<td>描述了与浏览器进行交互的方法和接口</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"JavaScript-可以做什么\"><a href=\"#JavaScript-可以做什么\" class=\"headerlink\" title=\"JavaScript 可以做什么\"></a>JavaScript 可以做什么</h4><blockquote>\n<p>Any application that can be written in JavaScript, will eventually be written in JavaScript.  </p>\n<p>凡是能够用JavaScript实现的应用，最终都必将用JavaScript实现。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/20796866\" target=\"_blank\" rel=\"noopener\">知乎 - JavaScript 能做什么，该做什么？</a></li>\n<li><a href=\"https://github.com/phodal/articles/issues/1\" target=\"_blank\" rel=\"noopener\">最流行的编程语言 JavaScript 能做什么？</a></li>\n</ul>\n<h4 id=\"JavaScript-发展历史\"><a href=\"#JavaScript-发展历史\" class=\"headerlink\" title=\"JavaScript 发展历史\"></a>JavaScript 发展历史</h4><blockquote>\n<p><a href=\"http://javascript.ruanyifeng.com/introduction/history.html\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程 - JavaScript 语言的历史</a></p>\n</blockquote>\n<ul>\n<li>JavaScript 的诞生</li>\n<li>JavaScript 与 ECMAScript 的关系</li>\n<li>JavaScript 与 Java 的关系</li>\n<li>JavaScript 的版本</li>\n<li>JavaScript 周边大事记</li>\n</ul>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><blockquote>\n<p>本小节快速过即可，主要是对学过的内容做知识点梳理。</p>\n</blockquote>\n<ul>\n<li>语法<ul>\n<li>区分大小写</li>\n<li>标识符           标识符是指变量、函数、属性的名字，或者函数的参数</li>\n<li>注释          </li>\n<li>严格模式        “use strict”;</li>\n<li>语句 </li>\n</ul>\n</li>\n<li>关键字和保留字</li>\n<li>变量</li>\n<li>数据类型<ul>\n<li>typeof 操作符</li>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>object</li>\n</ul>\n</li>\n<li>运算符（操作符）</li>\n<li>流程控制语句（if else else if switch  for   while  do…while  break  continue）</li>\n<li>函数  </li>\n</ul>\n<h3 id=\"JavaScript-中的数据类型\"><a href=\"#JavaScript-中的数据类型\" class=\"headerlink\" title=\"JavaScript 中的数据类型\"></a>JavaScript 中的数据类型</h3><p>JavaScript 有 5 种简单数据类型：<code>Undefined、Null、Boolean、Number、String</code> 和 1 种复杂数据类型 <code>object</code> 。</p>\n<h4 id=\"基本类型（值类型）\"><a href=\"#基本类型（值类型）\" class=\"headerlink\" title=\"基本类型（值类型）\"></a>基本类型（值类型）</h4><ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n<h4 id=\"复杂类型（引用类型）\"><a href=\"#复杂类型（引用类型）\" class=\"headerlink\" title=\"复杂类型（引用类型）\"></a>复杂类型（引用类型）</h4><ul>\n<li>Object</li>\n<li>Array</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Function</li>\n<li>基本包装类型<ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n</li>\n<li>单体内置对象<ul>\n<li>Global<ul>\n<li>1)所有在全局作用域内定义的属性和方法，都是Global对象的属性。  </li>\n<li>2)Global对象不能直接使用，也不能用new运算符创建。  </li>\n<li>3)Global对象在JavaScript引擎被初始化时创建，并初始化其方法和属性。  </li>\n<li>4)浏览器把Global对象作为window对象的一部分实现了，因此，所有的全局属性和函数都是window对象的属性和方法。</li>\n</ul>\n</li>\n<li>Math</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h4><ul>\n<li><code>typeof</code></li>\n<li><code>instanceof</code></li>\n<li><code>Object.prototype.toString.call()</code></li>\n</ul>\n<h4 id=\"值类型和引用类型在内存中的存储方式（画图说明）\"><a href=\"#值类型和引用类型在内存中的存储方式（画图说明）\" class=\"headerlink\" title=\"值类型和引用类型在内存中的存储方式（画图说明）\"></a>值类型和引用类型在内存中的存储方式（画图说明）</h4><ul>\n<li>值类型按值存储</li>\n<li>引用类型按引用存储</li>\n</ul>\n<h4 id=\"值类型复制和引用类型复制（画图说明）\"><a href=\"#值类型复制和引用类型复制（画图说明）\" class=\"headerlink\" title=\"值类型复制和引用类型复制（画图说明）\"></a>值类型复制和引用类型复制（画图说明）</h4><ul>\n<li>值类型按值复制</li>\n<li>引用类型按引用复制</li>\n</ul>\n<h4 id=\"值类型和引用类型参数传递（画图说明）\"><a href=\"#值类型和引用类型参数传递（画图说明）\" class=\"headerlink\" title=\"值类型和引用类型参数传递（画图说明）\"></a>值类型和引用类型参数传递（画图说明）</h4><ul>\n<li>值类型按值传递</li>\n<li>引用类型按引用传递</li>\n</ul>\n<h4 id=\"值类型与引用类型的差别\"><a href=\"#值类型与引用类型的差别\" class=\"headerlink\" title=\"值类型与引用类型的差别\"></a>值类型与引用类型的差别</h4><ul>\n<li>基本类型在内存中占据固定大小的空间，因此被保存在栈内存中</li>\n<li>从一个变量向另一个变量复制基本类型的值，复制的是值的副本</li>\n<li>引用类型的值是对象，保存在堆内存</li>\n<li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li>\n<li>从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象</li>\n</ul>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>类型检测方式</li>\n<li>值类型和引用类型的存储方式</li>\n<li>值类型复制和引用类型复制</li>\n<li>方法参数中 值类型数据传递 和 引用类型数据传递</li>\n</ul>\n<h3 id=\"JavaScript-执行过程\"><a href=\"#JavaScript-执行过程\" class=\"headerlink\" title=\"JavaScript 执行过程\"></a>JavaScript 执行过程</h3><p>JavaScript 运行分为两个阶段：</p>\n<ul>\n<li>预解析<ul>\n<li>全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）</li>\n<li>函数内部预解析（所有的变量、函数和形参都会参与预解析）<ul>\n<li>函数</li>\n<li>形参</li>\n<li>普通变量</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>执行</li>\n</ul>\n<p>先预解析全局作用域，然后执行全局作用域中的代码，<br>在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。</p>\n<hr>\n<h2 id=\"JavaScript-面向对象编程\"><a href=\"#JavaScript-面向对象编程\" class=\"headerlink\" title=\"JavaScript 面向对象编程\"></a>JavaScript 面向对象编程</h2><p><img src=\"http://p57ao19ex.bkt.clouddn.com/mxdxkf.png\" width=\"400\" alt=\"\"></p>\n<h3 id=\"面向对象介绍\"><a href=\"#面向对象介绍\" class=\"headerlink\" title=\"面向对象介绍\"></a>面向对象介绍</h3><h4 id=\"什么是对象\"><a href=\"#什么是对象\" class=\"headerlink\" title=\"什么是对象\"></a>什么是对象</h4><blockquote>\n<p>Everything is object （万物皆对象）</p>\n</blockquote>\n<p><img src=\"http://p57ao19ex.bkt.clouddn.com/20160823024542444.jpg\" alt=\"\"></p>\n<p>对象到底是什么，我们可以从两次层次来理解。</p>\n<p><strong>(1) 对象是单个事物的抽象。</strong></p>\n<p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p>\n<p><strong>(2) 对象是一个容器，封装了属性（property）和方法（method）。</strong></p>\n<p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p>\n<p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</p>\n<p>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都<br>映射到一个值。</p>\n<p class=\"tip\"><br>  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。<br></p>\n\n<h4 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h4><blockquote>\n<p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p>\n</blockquote>\n<p><img src=\"http://p57ao19ex.bkt.clouddn.com/664ba37eeee9f4623c06c066867f1d38_r.jpg\" width=\"400\" alt=\"\"></p>\n<p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。<br>它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>\n<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。<br>因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p>\n<p>面向对象与面向过程：</p>\n<ul>\n<li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li>\n<li>面向对象就是找一个对象，指挥得结果</li>\n<li>面向对象将执行者转变成指挥者</li>\n<li>面向对象不是面向过程的替代，而是面向过程的封装</li>\n</ul>\n<p>面向对象的特性：</p>\n<ul>\n<li>封装性</li>\n<li>继承性</li>\n<li>[多态性]</li>\n</ul>\n<p>扩展阅读：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">维基百科 - 面向对象程序设计</a></li>\n<li><a href=\"https://www.zhihu.com/question/19854505\" target=\"_blank\" rel=\"noopener\">知乎：如何用一句话说明什么是面向对象思想？</a></li>\n<li><a href=\"https://www.zhihu.com/question/31021366\" target=\"_blank\" rel=\"noopener\">知乎：什么是面向对象编程思想？</a></li>\n</ul>\n<h4 id=\"程序中面向对象的基本体现\"><a href=\"#程序中面向对象的基本体现\" class=\"headerlink\" title=\"程序中面向对象的基本体现\"></a>程序中面向对象的基本体现</h4><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。<br>自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p>\n<p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p>\n<p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> std1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">score</span>: <span class=\"number\">98</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> std2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Bob'</span>, <span class=\"attr\">score</span>: <span class=\"number\">81</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printScore</span> (<span class=\"params\">student</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'姓名：'</span> + student.name + <span class=\"string\">'  '</span> + <span class=\"string\">'成绩：'</span> + student.score)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，<br>而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。<br>如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p>\n<p>抽象数据行为模板（Class）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, score</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.score = score</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.printScore = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'姓名：'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'  '</span> + <span class=\"string\">'成绩：'</span> + <span class=\"keyword\">this</span>.score)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据模板创建具体实例对象（Instance）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> std1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'Michael'</span>, <span class=\"number\">98</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> std2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'Bob'</span>, <span class=\"number\">81</span>)</span><br></pre></td></tr></table></figure>\n<p>实例对象具有自己的具体行为（给对象发消息）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std1.printScore() <span class=\"comment\">// =&gt; 姓名：Michael  成绩：98</span></span><br><span class=\"line\">std2.printScore() <span class=\"comment\">// =&gt; 姓名：Bob  成绩 81</span></span><br></pre></td></tr></table></figure>\n<p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。<br>Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，<br>而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p>\n<p>所以，面向对象的设计思想是：</p>\n<ul>\n<li>抽象出 Class</li>\n<li>根据 Class 创建 Instance</li>\n<li>指挥 Instance 得结果</li>\n</ul>\n<p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><h4 id=\"简单方式\"><a href=\"#简单方式\" class=\"headerlink\" title=\"简单方式\"></a>简单方式</h4><p>我们可以直接通过 <code>new Object()</code> 创建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">person.name = <span class=\"string\">'Jack'</span></span><br><span class=\"line\">person.age = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于上面的写法固然没有问题，但是假如我们要生成两个 <code>person</code> 实例对象呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person1 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Mike'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">16</span>,</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p>\n<h4 id=\"简单方式的改进：工厂函数\"><a href=\"#简单方式的改进：工厂函数\" class=\"headerlink\" title=\"简单方式的改进：工厂函数\"></a>简单方式的改进：工厂函数</h4><p>我们可以写一个函数，解决代码重复问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    age: age,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后生成实例对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">'Jack'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = createPerson(<span class=\"string\">'Mike'</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n<p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>内容引导：</p>\n<ul>\n<li>构造函数语法</li>\n<li>分析构造函数</li>\n<li>构造函数和实例对象的关系<ul>\n<li>实例的 constructor 属性</li>\n<li>instanceof 操作符</li>\n</ul>\n</li>\n<li>普通函数调用和构造函数调用的区别</li>\n<li>构造函数的返回值</li>\n<li>构造函数的静态成员和实例成员<ul>\n<li>函数也是对象</li>\n<li>实例成员</li>\n<li>静态成员</li>\n</ul>\n</li>\n<li>构造函数的问题</li>\n</ul>\n<h4 id=\"更优雅的工厂函数：构造函数\"><a href=\"#更优雅的工厂函数：构造函数\" class=\"headerlink\" title=\"更优雅的工厂函数：构造函数\"></a>更优雅的工厂函数：构造函数</h4><p>一种更优雅的工厂函数就是下面这样，构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\">p1.sayName() <span class=\"comment\">// =&gt; Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Mike'</span>, <span class=\"number\">23</span>)</span><br><span class=\"line\">p2.sayName() <span class=\"comment\">// =&gt; Mike</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"解析构造函数代码的执行\"><a href=\"#解析构造函数代码的执行\" class=\"headerlink\" title=\"解析构造函数代码的执行\"></a>解析构造函数代码的执行</h4><p>在上面的示例中，<code>Person()</code> 函数取代了 <code>createPerson()</code> 函数，但是实现效果是一样的。<br>这是为什么呢？</p>\n<p>我们注意到，<code>Person()</code> 中的代码与 <code>createPerson()</code> 有以下几点不同之处：</p>\n<ul>\n<li>没有显示的创建对象</li>\n<li>直接将属性和方法赋给了 <code>this</code> 对象</li>\n<li>没有 <code>return</code> 语句</li>\n<li>函数名使用的是大写的 <code>Person</code></li>\n</ul>\n<p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。<br>以这种方式调用构造函数会经历以下 4 个步骤：</p>\n<ol>\n<li>创建一个新对象   看不到</li>\n<li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）  看不到</li>\n<li>执行构造函数中的代码</li>\n<li>返回新对象</li>\n</ol>\n<p>下面是具体的伪代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class=\"line\">  <span class=\"comment\">// var instance = &#123;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 然后让内部的 this 指向 instance 对象</span></span><br><span class=\"line\">  <span class=\"comment\">// this = instance</span></span><br><span class=\"line\">  <span class=\"comment\">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class=\"line\">  <span class=\"comment\">// return this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数和实例对象的关系\"><a href=\"#构造函数和实例对象的关系\" class=\"headerlink\" title=\"构造函数和实例对象的关系\"></a>构造函数和实例对象的关系</h4><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。<br>在每一个实例对象中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.constructor === Person) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p2.constructor === Person) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.constructor === p2.constructor) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的，<br>但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> Person) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p2 <span class=\"keyword\">instanceof</span> Person) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li>构造函数是根据具体的事物抽象出来的抽象模板</li>\n<li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li>\n<li>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数<ul>\n<li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li>\n</ul>\n</li>\n<li>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<ul>\n<li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符，后面学原型会解释为什么</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"构造函数的问题\"><a href=\"#构造函数的问题\" class=\"headerlink\" title=\"构造函数的问题\"></a>构造函数的问题</h4><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lpz'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n<p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。<br>那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容，<br>每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayHello === p2.sayHello) <span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>对于这种问题我们可以把需要共享的函数定义到构造函数外部：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span> = <span class=\"title\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = sayHello</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lpz'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayHello === p2.sayHello) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。</p>\n<p>你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fns = &#123;</span><br><span class=\"line\">  sayHello: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sayAge: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = fns.sayHello</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayAge = fns.sayAge</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lpz'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayHello === p2.sayHello) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayAge === p2.sayAge) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。<br>但是代码看起来还是那么的格格不入，那有没有更好的方式呢？</p>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>构造函数语法</li>\n<li>分析构造函数</li>\n<li>构造函数和实例对象的关系<ul>\n<li>实例的 constructor 属性</li>\n<li>instanceof 操作符</li>\n</ul>\n</li>\n<li>构造函数的问题</li>\n</ul>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>内容引导：</p>\n<ul>\n<li>使用 prototype 原型对象解决构造函数的问题</li>\n<li>分析 构造函数、prototype 原型对象、实例对象 三者之间的关系</li>\n<li>属性成员搜索原则：原型链</li>\n<li>实例对象读写原型对象中的成员</li>\n<li>原型对象的简写形式</li>\n<li>原生对象的原型<ul>\n<li>Object</li>\n<li>Array</li>\n<li>String</li>\n<li>…</li>\n</ul>\n</li>\n<li>原型对象的问题</li>\n<li>构造的函数和原型对象使用建议</li>\n</ul>\n<h4 id=\"更好的解决方案：-prototype\"><a href=\"#更好的解决方案：-prototype\" class=\"headerlink\" title=\"更好的解决方案： prototype\"></a>更好的解决方案： <code>prototype</code></h4><p>Javascript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。<br>这个对象的所有属性和方法，都会被构造函数的实例继承。</p>\n<p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype)</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.type = <span class=\"string\">'human'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(...)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayName === p2.sayName) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法，<br>其实都是同一个内存地址，指向 <code>prototype</code> 对象，因此就提高了运行效率。</p>\n<h4 id=\"构造函数、实例、原型三者之间的关系\"><a href=\"#构造函数、实例、原型三者之间的关系\" class=\"headerlink\" title=\"构造函数、实例、原型三者之间的关系\"></a>构造函数、实例、原型三者之间的关系</h4><p><img src=\"http://p57ao19ex.bkt.clouddn.com/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png\" alt=\"\"></p>\n<p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(F.prototype) <span class=\"comment\">// =&gt; object</span></span><br><span class=\"line\"></span><br><span class=\"line\">F.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi!'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(F.constructor === F) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> F()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(instance.__proto__ === F.prototype) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\"><br>  <code>__proto__</code> 是非标准属性。(现在是标准的属性)<br></p>\n\n<p>实例对象可以直接访问原型对象成员。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instance.sayHi() <span class=\"comment\">// =&gt; hi!</span></span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li>\n<li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li>\n<li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li>\n<li>所有实例都直接或间接继承了原型对象的成员</li>\n</ul>\n<h4 id=\"属性成员的搜索原则：原型链\"><a href=\"#属性成员的搜索原则：原型链\" class=\"headerlink\" title=\"属性成员的搜索原则：原型链\"></a>属性成员的搜索原则：原型链</h4><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p>\n<p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p>\n<ul>\n<li>搜索首先从对象实例本身开始</li>\n<li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li>\n<li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li>\n<li>如果在原型对象中找到了这个属性，则返回该属性的值</li>\n</ul>\n<p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p>\n<ul>\n<li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li>\n<li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li>\n<li>”于是，它就读取那个保存在原型对象中的函数。</li>\n<li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li>\n</ul>\n<p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p>\n<p>总结：</p>\n<ul>\n<li>先在自己身上找，找到即返回</li>\n<li>自己身上找不到，则沿着原型链向上查找，找到即返回</li>\n<li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li>\n</ul>\n<h4 id=\"实例对象读写原型对象成员\"><a href=\"#实例对象读写原型对象成员\" class=\"headerlink\" title=\"实例对象读写原型对象成员\"></a>实例对象读写原型对象成员</h4><p>读取：</p>\n<ul>\n<li>先在自己身上找，找到即返回</li>\n<li>自己身上找不到，则沿着原型链向上查找，找到即返回</li>\n<li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li>\n</ul>\n<p>值类型成员写入（<code>实例对象.值类型成员 = xx</code>）：</p>\n<ul>\n<li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li>\n<li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li>\n</ul>\n<p>引用类型成员写入（<code>实例对象.引用类型成员 = xx</code>）：</p>\n<ul>\n<li>同上</li>\n</ul>\n<p>复杂类型修改（<code>实例对象.成员.xx = xx</code>）：</p>\n<ul>\n<li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li>\n<li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li>\n<li>如果一直到原型链的末端还没有找到该成员，则报错（<code>实例对象.undefined.xx = xx</code>）</li>\n</ul>\n<h4 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h4><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'human'</span>,</span><br><span class=\"line\">  sayHello: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'，我今年'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁了'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。<br>这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p>\n<p>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person, // =&gt; 手动将 <span class=\"keyword\">constructor</span> 指向正确的构造函数</span><br><span class=\"line\">  type: 'human',</span><br><span class=\"line\">  sayHello: function () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'，我今年'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁了'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h4><p class=\"tip\"><br>  所有函数都有 prototype 属性对象。<br></p>\n\n<ul>\n<li>Object.prototype</li>\n<li>Function.prototype</li>\n<li>Array.prototype</li>\n<li>String.prototype</li>\n<li>Number.prototype</li>\n<li>Date.prototype</li>\n<li>…</li>\n</ul>\n<p>练习：为数组对象和字符串对象扩展原型方法。</p>\n<h4 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h4><ul>\n<li>共享数组</li>\n<li>共享对象</li>\n</ul>\n<p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。</p>\n<p>一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。</p>\n<h4 id=\"原型对象使用建议\"><a href=\"#原型对象使用建议\" class=\"headerlink\" title=\"原型对象使用建议\"></a>原型对象使用建议</h4><ul>\n<li>私有成员（一般就是非函数成员）放到构造函数中</li>\n<li>共享成员（一般就是函数）放到原型对象中</li>\n<li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li>\n</ul>\n<h3 id=\"案例：随机方块\"><a href=\"#案例：随机方块\" class=\"headerlink\" title=\"案例：随机方块\"></a>案例：随机方块</h3><hr>\n<h2 id=\"面向对象游戏案例：贪吃蛇\"><a href=\"#面向对象游戏案例：贪吃蛇\" class=\"headerlink\" title=\"面向对象游戏案例：贪吃蛇\"></a>面向对象游戏案例：贪吃蛇</h2><p>案例相关源码以上传到 GitHub ：<a href=\"https://github.com/lipengzhou/new-snake\" target=\"_blank\" rel=\"noopener\">https://github.com/lipengzhou/new-snake</a></p>\n<h3 id=\"案例介绍\"><a href=\"#案例介绍\" class=\"headerlink\" title=\"案例介绍\"></a>案例介绍</h3><h4 id=\"游戏演示\"><a href=\"#游戏演示\" class=\"headerlink\" title=\"游戏演示\"></a>游戏演示</h4><p>在线演示地址：<a href=\"https://lipengzhou.github.io/new-snake/\" target=\"_blank\" rel=\"noopener\">贪吃蛇</a></p>\n<h4 id=\"案例目标\"><a href=\"#案例目标\" class=\"headerlink\" title=\"案例目标\"></a>案例目标</h4><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。</p>\n<h3 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h3><h4 id=\"搭建页面\"><a href=\"#搭建页面\" class=\"headerlink\" title=\"搭建页面\"></a>搭建页面</h4><p>放一个容器盛放游戏场景 div#map，设置样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#map</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析对象\"><a href=\"#分析对象\" class=\"headerlink\" title=\"分析对象\"></a>分析对象</h4><ul>\n<li>游戏对象</li>\n<li>蛇对象</li>\n<li>食物对象</li>\n</ul>\n<h4 id=\"创建食物对象\"><a href=\"#创建食物对象\" class=\"headerlink\" title=\"创建食物对象\"></a>创建食物对象</h4><ul>\n<li>Food<ul>\n<li>属性<ul>\n<li>x       </li>\n<li>y</li>\n<li>width</li>\n<li>height</li>\n<li>color       </li>\n</ul>\n</li>\n<li>方法<ul>\n<li>render       随机创建一个食物对象，并输出到map上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建Food的构造函数，并设置属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> position = <span class=\"string\">'absolute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> elements = [];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Food</span>(<span class=\"params\">x, y, width, height, color</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x || <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y || <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 食物的宽度和高度(像素)</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = width || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = height || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 食物的颜色</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color || <span class=\"string\">'green'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Food.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * map.offsetWidth / <span class=\"keyword\">this</span>.width) * <span class=\"keyword\">this</span>.width;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * map.offsetHeight / <span class=\"keyword\">this</span>.height) * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 动态创建食物对应的div</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  map.appendChild(div);</span><br><span class=\"line\">  div.style.position = position;</span><br><span class=\"line\">  div.style.left = <span class=\"keyword\">this</span>.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.top = <span class=\"keyword\">this</span>.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.width = <span class=\"keyword\">this</span>.width + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.height = <span class=\"keyword\">this</span>.height + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.backgroundColor = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">  elements.push(div);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过自调用函数，进行封装，通过window暴露Food对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Food = Food;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建蛇对象\"><a href=\"#创建蛇对象\" class=\"headerlink\" title=\"创建蛇对象\"></a>创建蛇对象</h4><ul>\n<li>Snake</li>\n<li>属性<ul>\n<li>width    蛇节的宽度 默认20</li>\n<li>height   蛇节的高度 默认20</li>\n<li>body     数组，蛇的头部和身体，第一个位置是蛇头</li>\n<li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>render  把蛇渲染到map上</li>\n</ul>\n</li>\n<li>Snake构造函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> position = <span class=\"string\">'absolute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> elements = [];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Snake</span>(<span class=\"params\">width, height, direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置每一个蛇节的宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = width || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = height || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 蛇的每一部分, 第一部分是蛇头</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.body = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.direction = direction || <span class=\"string\">'right'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>render方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snake.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.body.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"keyword\">this</span>.body[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    map.appendChild(div);</span><br><span class=\"line\">    div.style.left = obj.x * <span class=\"keyword\">this</span>.width + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    div.style.top = obj.y * <span class=\"keyword\">this</span>.height + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    div.style.position = position;</span><br><span class=\"line\">    div.style.backgroundColor = obj.color;</span><br><span class=\"line\">    div.style.width = <span class=\"keyword\">this</span>.width + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    div.style.height = <span class=\"keyword\">this</span>.height + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在自调用函数中暴露Snake对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Snake = Snake;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建游戏对象\"><a href=\"#创建游戏对象\" class=\"headerlink\" title=\"创建游戏对象\"></a>创建游戏对象</h4><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p>\n<ul>\n<li>Game<ul>\n<li>属性<ul>\n<li>food</li>\n<li>snake</li>\n<li>map</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>start            开始游戏（绘制所有游戏对象）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>构造函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Game</span>(<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.food = <span class=\"keyword\">new</span> Food();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.snake = <span class=\"keyword\">new</span> Snake();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map = map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>开始游戏，渲染食物对象和蛇对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Game.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.food.render(<span class=\"keyword\">this</span>.map);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.snake.render(<span class=\"keyword\">this</span>.map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"游戏的逻辑\"><a href=\"#游戏的逻辑\" class=\"headerlink\" title=\"游戏的逻辑\"></a>游戏的逻辑</h3><h4 id=\"写蛇的move方法\"><a href=\"#写蛇的move方法\" class=\"headerlink\" title=\"写蛇的move方法\"></a>写蛇的move方法</h4><ul>\n<li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li>\n</ul>\n<ol>\n<li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li>\n<li>蛇头部分根据不同的方向决定 往哪里移动</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snake.prototype.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">food, map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 让蛇身体的每一部分往前移动一下</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.body.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body[i].x = <span class=\"keyword\">this</span>.body[i - <span class=\"number\">1</span>].x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body[i].y = <span class=\"keyword\">this</span>.body[i - <span class=\"number\">1</span>].y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 根据移动的方向，决定蛇头如何处理</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(<span class=\"keyword\">this</span>.direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'left'</span>: </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].x -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'right'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].x += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'top'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].y -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'bottom'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].y += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在game中测试</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.snake.move(<span class=\"keyword\">this</span>.food, <span class=\"keyword\">this</span>.map);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.snake.render(<span class=\"keyword\">this</span>.map);</span><br></pre></td></tr></table></figure>\n<h4 id=\"让蛇自己动起来\"><a href=\"#让蛇自己动起来\" class=\"headerlink\" title=\"让蛇自己动起来\"></a>让蛇自己动起来</h4><ul>\n<li><p>私有方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是私有方法？</span><br><span class=\"line\">  不能被外部访问的方法</span><br><span class=\"line\">如何创建私有方法？</span><br><span class=\"line\">  使用自调用函数包裹</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p>\n</li>\n<li><p>判断蛇是否撞墙</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runSnake</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.snake.move(<span class=\"keyword\">this</span>.food, <span class=\"keyword\">this</span>.map);</span><br><span class=\"line\">    <span class=\"comment\">// 在渲染前，删除之前的蛇</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.snake.render(<span class=\"keyword\">this</span>.map);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断蛇是否撞墙</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxX = <span class=\"keyword\">this</span>.map.offsetWidth / <span class=\"keyword\">this</span>.snake.width;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxY = <span class=\"keyword\">this</span>.map.offsetHeight / <span class=\"keyword\">this</span>.snake.height;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> headX = <span class=\"keyword\">this</span>.snake.body[<span class=\"number\">0</span>].x;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> headY = <span class=\"keyword\">this</span>.snake.body[<span class=\"number\">0</span>].y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (headX &lt; <span class=\"number\">0</span> || headX &gt;= maxX) &#123;</span><br><span class=\"line\">      clearInterval(timerId);</span><br><span class=\"line\">      alert(<span class=\"string\">'Game Over'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (headY &lt; <span class=\"number\">0</span> || headY &gt;= maxY) &#123;</span><br><span class=\"line\">      clearInterval(timerId);</span><br><span class=\"line\">      alert(<span class=\"string\">'Game Over'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;.bind(that), <span class=\"number\">150</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在snake中添加删除蛇的私有方法，在render中调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 删除渲染的蛇</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = elements.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 删除页面上渲染的蛇</span></span><br><span class=\"line\">    elements[i].parentNode.removeChild(elements[i]);</span><br><span class=\"line\">    <span class=\"comment\">// 删除elements数组中的元素</span></span><br><span class=\"line\">    elements.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在game中通过键盘控制蛇的移动方向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindKey</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'keydown'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (e.keyCode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">37</span>:</span><br><span class=\"line\">        <span class=\"comment\">// left</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'left'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">38</span>:</span><br><span class=\"line\">        <span class=\"comment\">// top</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'top'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">39</span>:</span><br><span class=\"line\">        <span class=\"comment\">// right</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'right'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">40</span>:</span><br><span class=\"line\">        <span class=\"comment\">// bottom</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'bottom'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;.bind(that), <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在start方法中调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindKey();</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断蛇是否吃到食物\"><a href=\"#判断蛇是否吃到食物\" class=\"headerlink\" title=\"判断蛇是否吃到食物\"></a>判断蛇是否吃到食物</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在Snake的move方法中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在移动的过程中判断蛇是否吃到食物</span></span><br><span class=\"line\"><span class=\"comment\">// 如果蛇头和食物的位置重合代表吃到食物</span></span><br><span class=\"line\"><span class=\"comment\">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> headX = <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].x * <span class=\"keyword\">this</span>.width;</span><br><span class=\"line\"><span class=\"keyword\">var</span> headY = <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].y * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 吃到食物，往蛇节的最后加一节</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> last = <span class=\"keyword\">this</span>.body[<span class=\"keyword\">this</span>.body.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.body.push(&#123;</span><br><span class=\"line\">    x: last.x,</span><br><span class=\"line\">    y: last.y,</span><br><span class=\"line\">    color: last.color</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></span><br><span class=\"line\">  food.render(map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它处理\"><a href=\"#其它处理\" class=\"headerlink\" title=\"其它处理\"></a>其它处理</h3><h4 id=\"把html中的js代码放到index-js中\"><a href=\"#把html中的js代码放到index-js中\" class=\"headerlink\" title=\"把html中的js代码放到index.js中\"></a>把html中的js代码放到index.js中</h4><p>避免html中出现js代码</p>\n<h4 id=\"自调用函数的参数\"><a href=\"#自调用函数的参数\" class=\"headerlink\" title=\"自调用函数的参数\"></a>自调用函数的参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">window, undefined</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = <span class=\"built_in\">window</span>.document;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(<span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>传入window对象</li>\n</ul>\n<p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p>\n<ul>\n<li>传入undefined</li>\n</ul>\n<p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p>\n<h4 id=\"整理代码\"><a href=\"#整理代码\" class=\"headerlink\" title=\"整理代码\"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p>\n<p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p>\n<ul>\n<li>问题1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></span><br><span class=\"line\"><span class=\"comment\">// 下面代码会报错</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"><span class=\"comment\">// 所以代码规范中会建议在自调用函数之前加上分号</span></span><br><span class=\"line\"><span class=\"comment\">// 下面代码没有问题</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>问题2 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></span><br><span class=\"line\"><span class=\"comment\">// 所以建议自调用函数前，加上;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'11'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'22'</span>);</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承\"></a>什么是继承</h3><ul>\n<li>现实生活中的继承</li>\n<li>程序中的继承</li>\n</ul>\n<h3 id=\"构造函数的属性继承：借用构造函数\"><a href=\"#构造函数的属性继承：借用构造函数\" class=\"headerlink\" title=\"构造函数的属性继承：借用构造函数\"></a>构造函数的属性继承：借用构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 借用构造函数继承属性成员</span></span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>, name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = Student(<span class=\"string\">'张三'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.type, s1.name, s1.age) <span class=\"comment\">// =&gt; human 张三 18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数的原型方法继承：拷贝继承（for-in）\"><a href=\"#构造函数的原型方法继承：拷贝继承（for-in）\" class=\"headerlink\" title=\"构造函数的原型方法继承：拷贝继承（for-in）\"></a>构造函数的原型方法继承：拷贝继承（for-in）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>, name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型对象拷贝继承原型对象成员</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> Person.prototype) &#123;</span><br><span class=\"line\">  Student.prototype[key] = Person.prototype[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = Student(<span class=\"string\">'张三'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s1.sayName() <span class=\"comment\">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"另一种继承方式：原型继承\"><a href=\"#另一种继承方式：原型继承\" class=\"headerlink\" title=\"另一种继承方式：原型继承\"></a>另一种继承方式：原型继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>, name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用原型的特性实现继承</span></span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = Student(<span class=\"string\">'张三'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.type) <span class=\"comment\">// =&gt; human</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.sayName() <span class=\"comment\">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"函数进阶\"><a href=\"#函数进阶\" class=\"headerlink\" title=\"函数进阶\"></a>函数进阶</h2><h3 id=\"函数的定义方式\"><a href=\"#函数的定义方式\" class=\"headerlink\" title=\"函数的定义方式\"></a>函数的定义方式</h3><ul>\n<li>函数声明</li>\n<li>函数表达式</li>\n<li><code>new Function</code></li>\n</ul>\n<h4 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数声明与函数表达式的区别\"><a href=\"#函数声明与函数表达式的区别\" class=\"headerlink\" title=\"函数声明与函数表达式的区别\"></a>函数声明与函数表达式的区别</h4><ul>\n<li>函数声明必须有名字</li>\n<li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li>\n<li>函数表达式类似于变量赋值</li>\n<li>函数表达式可以没有名字，例如匿名函数</li>\n<li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li>\n</ul>\n<p>下面是一个根据条件定义函数的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码执行结果在不同浏览器中结果不一致。</p>\n<p>不过我们可以使用函数表达式解决上面的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数的调用方式\"><a href=\"#函数的调用方式\" class=\"headerlink\" title=\"函数的调用方式\"></a>函数的调用方式</h3><ul>\n<li>普通函数</li>\n<li>构造函数</li>\n<li>对象方法</li>\n</ul>\n<h3 id=\"函数内-this-指向的不同场景\"><a href=\"#函数内-this-指向的不同场景\" class=\"headerlink\" title=\"函数内 this 指向的不同场景\"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p>\n<table>\n<thead>\n<tr>\n<th>调用方式</th>\n<th>非严格模式</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>普通函数调用</td>\n<td>window</td>\n<td>严格模式下是 undefined</td>\n</tr>\n<tr>\n<td>构造函数调用</td>\n<td>实例对象</td>\n<td>原型方法中 this 也是实例对象</td>\n</tr>\n<tr>\n<td>对象方法调用</td>\n<td>该方法所属对象</td>\n<td>紧挨着的对象</td>\n</tr>\n<tr>\n<td>事件绑定方法</td>\n<td>绑定事件对象</td>\n<td></td>\n</tr>\n<tr>\n<td>定时器函数</td>\n<td>window</td>\n</tr>\n</tbody>\n</table>\n<p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p>\n<h3 id=\"函数也是对象\"><a href=\"#函数也是对象\" class=\"headerlink\" title=\"函数也是对象\"></a>函数也是对象</h3><ul>\n<li>所有函数都是 <code>Function</code> 的实例</li>\n</ul>\n<h3 id=\"call、apply、bind\"><a href=\"#call、apply、bind\" class=\"headerlink\" title=\"call、apply、bind\"></a>call、apply、bind</h3><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p>\n<p class=\"danger\"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p>\n\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li><code>thisArg</code><ul>\n<li>在 fun 函数运行时指定的 this 值</li>\n<li>如果指定了 null 或者 undefined 则内部 this 指向 window</li>\n</ul>\n</li>\n<li><code>arg1, arg2, ...</code><ul>\n<li>指定的参数列表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p>\n<p class=\"danger\"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p>\n\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li><code>thisArg</code></li>\n<li><code>argsArray</code></li>\n</ul>\n<p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.apply(<span class=\"keyword\">this</span>, [<span class=\"string\">'eat'</span>, <span class=\"string\">'bananas'</span>])</span><br></pre></td></tr></table></figure>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li>thisArg<ul>\n<li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li>\n</ul>\n</li>\n<li>arg1, arg2, …<ul>\n<li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li>\n</ul>\n</li>\n</ul>\n<p>返回值：</p>\n<p>返回由指定的this值和初始化参数改造的原函数拷贝。</p>\n<p>示例1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.x = <span class=\"number\">9</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">81</span>,</span><br><span class=\"line\">  getX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.getX(); <span class=\"comment\">// 返回 81</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> retrieveX = <span class=\"built_in\">module</span>.getX;</span><br><span class=\"line\">retrieveX(); <span class=\"comment\">// 返回 9, 在这种情况下，\"this\"指向全局作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个新函数，将\"this\"绑定到module对象</span></span><br><span class=\"line\"><span class=\"comment\">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boundGetX = retrieveX.bind(<span class=\"built_in\">module</span>);</span><br><span class=\"line\">boundGetX(); <span class=\"comment\">// 返回 81</span></span><br></pre></td></tr></table></figure>\n<p>示例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LateBloomer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.petalCount = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">12</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare bloom after a delay of 1 second</span></span><br><span class=\"line\">LateBloomer.prototype.bloom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"keyword\">this</span>.declare.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">LateBloomer.prototype.declare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a beautiful flower with '</span> +</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.petalCount + <span class=\"string\">' petals!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> flower = <span class=\"keyword\">new</span> LateBloomer();</span><br><span class=\"line\">flower.bloom();  <span class=\"comment\">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>call 和 apply 特性一样<ul>\n<li>都是用来调用函数，而且是立即调用</li>\n<li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li>\n<li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li>\n<li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li>\n<li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li>\n</ul>\n</li>\n<li>bind<ul>\n<li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li>\n<li>它和 call、apply 最大的区别是：bind 不会调用</li>\n<li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul>\n<li><ol>\n<li>在 bind 的同时，以参数列表的形式进行传递</li>\n</ol>\n</li>\n<li><ol>\n<li>在调用的时候，以参数列表的形式进行传递</li>\n</ol>\n</li>\n<li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li>\n<li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数的其它成员\"><a href=\"#函数的其它成员\" class=\"headerlink\" title=\"函数的其它成员\"></a>函数的其它成员</h3><ul>\n<li>arguments<ul>\n<li>实参集合</li>\n</ul>\n</li>\n<li>caller<ul>\n<li>函数的调用者</li>\n</ul>\n</li>\n<li>length<ul>\n<li>形参的个数</li>\n</ul>\n</li>\n<li>name<ul>\n<li>函数的名称</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fn.length) <span class=\"comment\">// =&gt; 形参的个数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 伪数组实参参数集合</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee === fn) <span class=\"comment\">// 函数本身</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fn.caller) <span class=\"comment\">// 函数的调用者</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fn.name) <span class=\"comment\">// =&gt; 函数的名字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fn(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><ul>\n<li>函数可以作为参数</li>\n<li>函数可以作为返回值</li>\n</ul>\n<h4 id=\"作为参数\"><a href=\"#作为参数\" class=\"headerlink\" title=\"作为参数\"></a>作为参数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'吃完了'</span>)</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">eat(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'去唱歌'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"作为返回值\"><a href=\"#作为返回值\" class=\"headerlink\" title=\"作为返回值\"></a>作为返回值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genFun</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === type</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isArray = genFun(<span class=\"string\">'[object Array]'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> isObject = genFun(<span class=\"string\">'[object Object]'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isArray([])) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isArray(&#123;&#125;)) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数闭包\"><a href=\"#函数闭包\" class=\"headerlink\" title=\"函数闭包\"></a>函数闭包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fns = fn()</span><br><span class=\"line\"></span><br><span class=\"line\">fns.getCount() <span class=\"comment\">// =&gt; 0</span></span><br><span class=\"line\">fns.setCount()</span><br><span class=\"line\">fns.getCount() <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"作用域、作用域链、预解析\"><a href=\"#作用域、作用域链、预解析\" class=\"headerlink\" title=\"作用域、作用域链、预解析\"></a>作用域、作用域链、预解析</h4><ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li><strong>没有块级作用域</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>作用域链示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b + c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"number\">40</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c + d)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fn1()</span><br><span class=\"line\">  fn2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<h4 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h4><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p>闭包的用途：</p>\n<ul>\n<li>可以在函数外部读取函数内部成员</li>\n<li>让函数内成员始终存活在内存中</li>\n</ul>\n<h4 id=\"一些关于闭包的例子\"><a href=\"#一些关于闭包的例子\" class=\"headerlink\" title=\"一些关于闭包的例子\"></a>一些关于闭包的例子</h4><p>示例1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  arr[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br></pre></td></tr></table></figure>\n<p>示例3：投票</p>\n<p>示例4：判断类型</p>\n<p>示例5：沙箱模式</p>\n<h4 id=\"闭包的思考题\"><a href=\"#闭包的思考题\" class=\"headerlink\" title=\"闭包的思考题\"></a>闭包的思考题</h4><p>思考题 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure>\n<p>思考题 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;　　</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;　　　　</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h4><h3 id=\"函数递归\"><a href=\"#函数递归\" class=\"headerlink\" title=\"函数递归\"></a>函数递归</h3><h4 id=\"递归执行模型\"><a href=\"#递归执行模型\" class=\"headerlink\" title=\"递归执行模型\"></a>递归执行模型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">  fn2()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">  fn3()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>)</span><br><span class=\"line\">  fn4()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn4</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">444</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn4'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn1()</span><br></pre></td></tr></table></figure>\n<h4 id=\"举个栗子：计算阶乘的递归函数\"><a href=\"#举个栗子：计算阶乘的递归函数\" class=\"headerlink\" title=\"举个栗子：计算阶乘的递归函数\"></a>举个栗子：计算阶乘的递归函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * factorial(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"递归应用场景\"><a href=\"#递归应用场景\" class=\"headerlink\" title=\"递归应用场景\"></a>递归应用场景</h4><ul>\n<li>深拷贝</li>\n<li>菜单树</li>\n<li>遍历 DOM 树</li>\n</ul>\n<hr>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ul>\n<li>了解正则表达式基本语法</li>\n<li>能够使用JavaScript的正则对象</li>\n</ul>\n<h3 id=\"正则表达式简介\"><a href=\"#正则表达式简介\" class=\"headerlink\" title=\"正则表达式简介\"></a>正则表达式简介</h3><h4 id=\"什么是正则表达式\"><a href=\"#什么是正则表达式\" class=\"headerlink\" title=\"什么是正则表达式\"></a>什么是正则表达式</h4><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>\n<h4 id=\"正则表达式的作用\"><a href=\"#正则表达式的作用\" class=\"headerlink\" title=\"正则表达式的作用\"></a>正则表达式的作用</h4><ol>\n<li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li>\n<li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li>\n<li>强大的字符串替换能力(替换)</li>\n</ol>\n<h4 id=\"正则表达式的特点\"><a href=\"#正则表达式的特点\" class=\"headerlink\" title=\"正则表达式的特点\"></a>正则表达式的特点</h4><ol>\n<li>灵活性、逻辑性和功能性非常的强</li>\n<li>可以迅速地用极简单的方式达到字符串的复杂控制</li>\n<li>对于刚接触的人来说，比较晦涩难懂</li>\n</ol>\n<h3 id=\"正则表达式的测试\"><a href=\"#正则表达式的测试\" class=\"headerlink\" title=\"正则表达式的测试\"></a>正则表达式的测试</h3><ul>\n<li><a href=\"https://c.runoob.com/front-end/854\" target=\"_blank\" rel=\"noopener\">在线测试正则</a></li>\n<li>工具中使用正则表达式<ul>\n<li>sublime/vscode/word</li>\n<li>演示替换所有的数字</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"正则表达式的组成\"><a href=\"#正则表达式的组成\" class=\"headerlink\" title=\"正则表达式的组成\"></a>正则表达式的组成</h3><ul>\n<li>普通字符</li>\n<li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li>\n</ul>\n<p>示例演示：</p>\n<ul>\n<li><code>\\d</code> 匹配数字</li>\n<li><code>ab\\d</code> 匹配 ab1、ab2</li>\n</ul>\n<h3 id=\"元字符串\"><a href=\"#元字符串\" class=\"headerlink\" title=\"元字符串\"></a>元字符串</h3><p>通过测试工具演示下面元字符的使用</p>\n<h4 id=\"常用元字符串\"><a href=\"#常用元字符串\" class=\"headerlink\" title=\"常用元字符串\"></a>常用元字符串</h4><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配任意非数字的字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母或数字或下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任意不是字母，数字，下划线</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任意的空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任意不是空白符的字符</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符以外的任意单个字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td>表示匹配行首的文本(以谁开始)</td>\n</tr>\n<tr>\n<td>$</td>\n<td>表示匹配行尾的文本(以谁结束)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h4><table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复零次或一次</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>重复n到m次</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class=\"line\">[^]  匹配除中括号以内的内容</span><br><span class=\"line\">\\ 转义符</span><br><span class=\"line\">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class=\"line\">() 从两个直接量中选择一个，分组</span><br><span class=\"line\">   eg：gr(a|e)y匹配gray和grey</span><br><span class=\"line\">[\\u4e00-\\u9fa5]  匹配汉字</span><br></pre></td></tr></table></figure>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>验证手机号：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">11</span>&#125;$</span><br></pre></td></tr></table></figure>\n<p>验证邮编：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">6</span>&#125;$</span><br></pre></td></tr></table></figure>\n<p>验证日期 2012-5-01</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">4</span>&#125;-\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;-\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;$</span><br></pre></td></tr></table></figure>\n<p>验证邮箱 xxx@itcast.cn：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\w+@\\w+\\.\\w+$</span><br></pre></td></tr></table></figure>\n<p>验证IP地址 192.168.1.10</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\(.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;)&#123;<span class=\"number\">3</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-中使用正则表达式\"><a href=\"#JavaScript-中使用正则表达式\" class=\"headerlink\" title=\"JavaScript 中使用正则表达式\"></a>JavaScript 中使用正则表达式</h2><h3 id=\"创建正则对象\"><a href=\"#创建正则对象\" class=\"headerlink\" title=\"创建正则对象\"></a>创建正则对象</h3><p>方式1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> Regex(<span class=\"string\">'\\d'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> Regex(<span class=\"string\">'\\d'</span>, <span class=\"string\">'gi'</span>);</span><br></pre></td></tr></table></figure>\n<p>方式2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d/gi</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><table>\n<thead>\n<tr>\n<th>标志</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td>g</td>\n<td>全局匹配</td>\n</tr>\n<tr>\n<td>gi</td>\n<td>全局匹配+忽略大小写</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配日期</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dateStr = <span class=\"string\">'2015-10-10'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(dateStr));</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则提取\"><a href=\"#正则提取\" class=\"headerlink\" title=\"正则提取\"></a>正则提取</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 提取工资</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"张三：1000，李四：5000，王五：8000。\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> array = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 提取email地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com...\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> array = str.match(<span class=\"regexp\">/\\w+@\\w+\\.\\w+(\\.\\w+)?/g</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 分组提取  </span></span><br><span class=\"line\"><span class=\"comment\">// 3. 提取日期中的年部分  2015-5-10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dateStr = <span class=\"string\">'2016-1-5'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\d&#123;4&#125;)-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (reg.test(dateStr)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 提取邮件中的每一部分</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\w+)@(\\w+)\\.(\\w+)(\\.\\w+)?/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123123@xx.com\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (reg.test(str)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则替换\"><a href=\"#正则替换\" class=\"headerlink\" title=\"正则替换\"></a>正则替换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 替换所有空白</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"   123AD  asadf   asadfasf  adf \"</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/\\s/g</span>,<span class=\"string\">\"xx\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 替换所有,|，</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"abc,efg,123，abc,123，a\"</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/,|，/g</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n<h3 id=\"案例：表单验证\"><a href=\"#案例：表单验证\" class=\"headerlink\" title=\"案例：表单验证\"></a>案例：表单验证</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QQ号：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtQQ\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtEMail\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">手机：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtPhone\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">生日：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtBirthday\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtName\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取文本框</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> txtQQ = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtQQ\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtEMail = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtEMail\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtPhone = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtPhone\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtBirthday = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtBirthday\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtName = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtName\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">txtQQ.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取当前文本框对应的span</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d&#123;5,12&#125;$/</span>;</span><br><span class=\"line\">  <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"请输入正确的QQ号\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//txtEMail</span></span><br><span class=\"line\">txtEMail.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取当前文本框对应的span</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\w+@\\w+\\.\\w+(\\.\\w+)?$/</span>;</span><br><span class=\"line\">  <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"请输入正确的EMail地址\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>表单验证部分，封装成函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regBirthday = <span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$/</span>;</span><br><span class=\"line\">addCheck(txtBirthday, regBirthday, <span class=\"string\">\"请输入正确的出生日期\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//给文本框添加验证</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCheck</span>(<span class=\"params\">element, reg, tip</span>) </span>&#123;</span><br><span class=\"line\">  element.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前文本框对应的span</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">    <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">      <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">      span.innerText = tip;</span><br><span class=\"line\">      span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">      span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过给元素增加自定义验证属性对表单进行验证：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"frm\"</span>&gt;</span></span><br><span class=\"line\">  QQ号：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtQQ\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"qq\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtEMail\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"email\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  手机：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtPhone\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"phone\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  生日：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtBirthday\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"date\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtName\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"cn\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 所有的验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rules = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'qq'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\d&#123;5,12&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的QQ\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'email'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\w+@\\w+\\.\\w+(\\.\\w+)?$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的邮箱地址\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'phone'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\d&#123;11&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的手机号码\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'date'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的出生日期\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^[\\u4e00-\\u9fa5]&#123;2,4&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的姓名\"</span></span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">addCheck(<span class=\"string\">'frm'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给文本框添加验证</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCheck</span>(<span class=\"params\">formId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">      len = <span class=\"number\">0</span>,</span><br><span class=\"line\">      frm =<span class=\"built_in\">document</span>.getElementById(formId);</span><br><span class=\"line\">  len = frm.children.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> element = frm.children[i];</span><br><span class=\"line\">    <span class=\"comment\">// 表单元素中有name属性的元素添加验证</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.name) &#123;</span><br><span class=\"line\">      element.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用dataset获取data-自定义属性的值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ruleName = <span class=\"keyword\">this</span>.dataset.rule;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rule =getRuleByRuleName(rules, ruleName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">        <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!rule.reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">          <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">          span.innerText = rule.tip;</span><br><span class=\"line\">          span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">          span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">          span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据规则的名称获取规则对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRuleByRuleName</span>(<span class=\"params\">rules, ruleName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">      len = rules.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rule = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rules[i].name == ruleName) &#123;</span><br><span class=\"line\">      rule = rules[i];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"伪数组和数组\"><a href=\"#伪数组和数组\" class=\"headerlink\" title=\"伪数组和数组\"></a>伪数组和数组</h3><p>在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p>\n<h4 id=\"对象与数组的关系\"><a href=\"#对象与数组的关系\" class=\"headerlink\" title=\"对象与数组的关系\"></a>对象与数组的关系</h4><p>在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。<br>所有 JavaScript 的内置构造函数都是继承自 <code>Object.prototype</code> 。<br>在这个前提下，可以理解为使用 <code>new Array()</code> 或 <code>[]</code> 创建出来的数组对象，都会拥有 <code>Object.prototype</code> 的属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;<span class=\"comment\">// 拥有 Object.prototype 的属性值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"comment\">//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，</span></span><br><span class=\"line\"><span class=\"comment\">//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值</span></span><br></pre></td></tr></table></figure>\n<p>可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。</p>\n<h4 id=\"什么是数组\"><a href=\"#什么是数组\" class=\"headerlink\" title=\"什么是数组\"></a>什么是数组</h4><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"> </span><br><span class=\"line\">obj[<span class=\"number\">2</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj[<span class=\"number\">2</span>]); <span class=\"comment\">// =&gt; a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">2</span>]); <span class=\"comment\">// =&gt; a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.length); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length); <span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>obj[2]输出’a’，是因为对象就是普通的键值对存取数据</li>\n<li>而arr[2]输出’a’ 则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据</li>\n<li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li>\n<li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值</li>\n<li>为什么arr.length输出3，而不是1<ul>\n<li>在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"什么是伪数组\"><a href=\"#什么是伪数组\" class=\"headerlink\" title=\"什么是伪数组\"></a>什么是伪数组</h4><ol>\n<li>拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li>\n<li>不具有数组所具有的方法</li>\n</ol>\n<p>伪数组，就是像数组一样有 <code>length</code> 属性，也有 <code>0、1、2、3</code> 等属性的对象，看起来就像数组一样，但不是数组，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fakeArray = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"string\">\"first\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"string\">\"second\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"string\">\"third\"</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; fakeArray.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fakeArray[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.join.call(fakeArray,<span class=\"string\">'+'</span>);</span><br></pre></td></tr></table></figure>\n<p>常见的伪数组有：</p>\n<ul>\n<li>函数内部的 <code>arguments</code></li>\n<li>DOM 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</li>\n<li>jQuery 对象（比如 <code>$(&quot;div&quot;)</code> ）</li>\n</ul>\n<p>伪数组是一个 Object，而真实的数组是一个 Array。</p>\n<p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(<span class=\"built_in\">arguments</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环arguments对象</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// push</span></span><br><span class=\"line\"><span class=\"comment\">// some</span></span><br><span class=\"line\"><span class=\"comment\">// every</span></span><br><span class=\"line\"><span class=\"comment\">// filter</span></span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">;[].push.call(obj, <span class=\"string\">'d'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([].slice.call(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">;[].forEach.call(obj, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array</li>\n<li>数组是基于索引的实现， length 会自动更新，而对象是键值对</li>\n<li>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法</li>\n</ul>\n<h3 id=\"JavaScript-垃圾回收机制\"><a href=\"#JavaScript-垃圾回收机制\" class=\"headerlink\" title=\"JavaScript 垃圾回收机制\"></a>JavaScript 垃圾回收机制</h3><h3 id=\"JavaScript-运行机制：Event-Loop\"><a href=\"#JavaScript-运行机制：Event-Loop\" class=\"headerlink\" title=\"JavaScript 运行机制：Event Loop\"></a>JavaScript 运行机制：Event Loop</h3><h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><h4 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h4><ul>\n<li>Object.assign()</li>\n<li>Object.create()</li>\n<li>Object.keys()</li>\n<li>Object.defineProperty()</li>\n</ul>\n<h4 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h4><ul>\n<li>constructor</li>\n<li>hasOwnProperty()</li>\n<li>isPrototypeOf</li>\n<li>propertyIsEnumerable()</li>\n<li>toString()</li>\n<li>valueOf()</li>\n</ul>\n<hr>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"A-代码规范\"><a href=\"#A-代码规范\" class=\"headerlink\" title=\"A 代码规范\"></a>A 代码规范</h3><h4 id=\"代码风格\"><a href=\"#代码风格\" class=\"headerlink\" title=\"代码风格\"></a>代码风格</h4><ul>\n<li><a href=\"https://github.com/feross/standard\" target=\"_blank\" rel=\"noopener\">JavaScript Standard Style </a></li>\n<li><a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"noopener\">Airbnb JavaScript Style Guide() {</a></li>\n</ul>\n<h4 id=\"校验工具\"><a href=\"#校验工具\" class=\"headerlink\" title=\"校验工具\"></a>校验工具</h4><ul>\n<li><a href=\"https://github.com/douglascrockford/JSLint\" target=\"_blank\" rel=\"noopener\">JSLint</a></li>\n<li><a href=\"https://github.com/jshint/jshint\" target=\"_blank\" rel=\"noopener\">JSHint</a></li>\n<li><a href=\"https://github.com/eslint/eslint\" target=\"_blank\" rel=\"noopener\">ESLint</a></li>\n</ul>\n<h3 id=\"B-Chrome-开发者工具\"><a href=\"#B-Chrome-开发者工具\" class=\"headerlink\" title=\"B Chrome 开发者工具\"></a>B Chrome 开发者工具</h3><h3 id=\"C-文档相关工具\"><a href=\"#C-文档相关工具\" class=\"headerlink\" title=\"C 文档相关工具\"></a>C 文档相关工具</h3><ul>\n<li>电子文档制作工具: <a href=\"https://github.com/egoist/docute\" target=\"_blank\" rel=\"noopener\">docute</a></li>\n<li>流程图工具：<a href=\"http://logicnet.dk/DiagramDesigner/\" target=\"_blank\" rel=\"noopener\">DiagramDesigner</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2>","more":"<h3 id=\"课程大纲\"><a href=\"#课程大纲\" class=\"headerlink\" title=\"课程大纲\"></a>课程大纲</h3><p><img src=\"http://p57ao19ex.bkt.clouddn.com/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2.png\" width=\"400\" alt=\"课程大纲\"></p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><ul>\n<li>理解面向对象开发思想</li>\n<li>掌握 JavaScript 面向对象开发相关模式</li>\n<li>掌握在 JavaScript 中使用正则表达式</li>\n</ul>\n<h3 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h3><ul>\n<li><a href=\"https://lipengzhou.github.io/new-snake/\" target=\"_blank\" rel=\"noopener\">贪吃蛇</a></li>\n</ul>\n<hr>\n<h2 id=\"基本概念复习\"><a href=\"#基本概念复习\" class=\"headerlink\" title=\"基本概念复习\"></a>基本概念复习</h2><blockquote>\n<p>由于 JavaScript 高级还是针对 JavaScript 语言本身的一个进阶学习，所以在开始之前我们先对以前所学过的 JavaScript 相关知识点做一个快速复习总结。</p>\n</blockquote>\n<h3 id=\"重新介绍-JavaScript\"><a href=\"#重新介绍-JavaScript\" class=\"headerlink\" title=\"重新介绍 JavaScript\"></a>重新介绍 JavaScript</h3><h4 id=\"JavaScript-是什么\"><a href=\"#JavaScript-是什么\" class=\"headerlink\" title=\"JavaScript 是什么\"></a>JavaScript 是什么</h4><ul>\n<li>解析执行：轻量级解释型的，或是 JIT 编译型的程序设计语言</li>\n<li>语言特点：动态，头等函数 (First-class Function)<ul>\n<li>又称函数是 JavaScript 中的一等公民</li>\n</ul>\n</li>\n<li>执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境<ul>\n<li>但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js</li>\n</ul>\n</li>\n<li>编程范式：基于原型、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如：函数式编程）编程风格</li>\n</ul>\n<h4 id=\"JavaScript-与浏览器的关系\"><a href=\"#JavaScript-与浏览器的关系\" class=\"headerlink\" title=\"JavaScript 与浏览器的关系\"></a>JavaScript 与浏览器的关系</h4><p><img src=\"http://p57ao19ex.bkt.clouddn.com/browser-js.png\" alt=\"\"></p>\n<h4 id=\"JavaScript-的组成\"><a href=\"#JavaScript-的组成\" class=\"headerlink\" title=\"JavaScript 的组成\"></a>JavaScript 的组成</h4><table>\n<thead>\n<tr>\n<th>组成部分</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ECMAScript</td>\n<td>描述了该语言的语法和基本对象</td>\n</tr>\n<tr>\n<td>DOM</td>\n<td>描述了处理网页内容的方法和接口</td>\n</tr>\n<tr>\n<td>BOM</td>\n<td>描述了与浏览器进行交互的方法和接口</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"JavaScript-可以做什么\"><a href=\"#JavaScript-可以做什么\" class=\"headerlink\" title=\"JavaScript 可以做什么\"></a>JavaScript 可以做什么</h4><blockquote>\n<p>Any application that can be written in JavaScript, will eventually be written in JavaScript.  </p>\n<p>凡是能够用JavaScript实现的应用，最终都必将用JavaScript实现。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/20796866\" target=\"_blank\" rel=\"noopener\">知乎 - JavaScript 能做什么，该做什么？</a></li>\n<li><a href=\"https://github.com/phodal/articles/issues/1\" target=\"_blank\" rel=\"noopener\">最流行的编程语言 JavaScript 能做什么？</a></li>\n</ul>\n<h4 id=\"JavaScript-发展历史\"><a href=\"#JavaScript-发展历史\" class=\"headerlink\" title=\"JavaScript 发展历史\"></a>JavaScript 发展历史</h4><blockquote>\n<p><a href=\"http://javascript.ruanyifeng.com/introduction/history.html\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程 - JavaScript 语言的历史</a></p>\n</blockquote>\n<ul>\n<li>JavaScript 的诞生</li>\n<li>JavaScript 与 ECMAScript 的关系</li>\n<li>JavaScript 与 Java 的关系</li>\n<li>JavaScript 的版本</li>\n<li>JavaScript 周边大事记</li>\n</ul>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><blockquote>\n<p>本小节快速过即可，主要是对学过的内容做知识点梳理。</p>\n</blockquote>\n<ul>\n<li>语法<ul>\n<li>区分大小写</li>\n<li>标识符           标识符是指变量、函数、属性的名字，或者函数的参数</li>\n<li>注释          </li>\n<li>严格模式        “use strict”;</li>\n<li>语句 </li>\n</ul>\n</li>\n<li>关键字和保留字</li>\n<li>变量</li>\n<li>数据类型<ul>\n<li>typeof 操作符</li>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>object</li>\n</ul>\n</li>\n<li>运算符（操作符）</li>\n<li>流程控制语句（if else else if switch  for   while  do…while  break  continue）</li>\n<li>函数  </li>\n</ul>\n<h3 id=\"JavaScript-中的数据类型\"><a href=\"#JavaScript-中的数据类型\" class=\"headerlink\" title=\"JavaScript 中的数据类型\"></a>JavaScript 中的数据类型</h3><p>JavaScript 有 5 种简单数据类型：<code>Undefined、Null、Boolean、Number、String</code> 和 1 种复杂数据类型 <code>object</code> 。</p>\n<h4 id=\"基本类型（值类型）\"><a href=\"#基本类型（值类型）\" class=\"headerlink\" title=\"基本类型（值类型）\"></a>基本类型（值类型）</h4><ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n<h4 id=\"复杂类型（引用类型）\"><a href=\"#复杂类型（引用类型）\" class=\"headerlink\" title=\"复杂类型（引用类型）\"></a>复杂类型（引用类型）</h4><ul>\n<li>Object</li>\n<li>Array</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Function</li>\n<li>基本包装类型<ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ul>\n</li>\n<li>单体内置对象<ul>\n<li>Global<ul>\n<li>1)所有在全局作用域内定义的属性和方法，都是Global对象的属性。  </li>\n<li>2)Global对象不能直接使用，也不能用new运算符创建。  </li>\n<li>3)Global对象在JavaScript引擎被初始化时创建，并初始化其方法和属性。  </li>\n<li>4)浏览器把Global对象作为window对象的一部分实现了，因此，所有的全局属性和函数都是window对象的属性和方法。</li>\n</ul>\n</li>\n<li>Math</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h4><ul>\n<li><code>typeof</code></li>\n<li><code>instanceof</code></li>\n<li><code>Object.prototype.toString.call()</code></li>\n</ul>\n<h4 id=\"值类型和引用类型在内存中的存储方式（画图说明）\"><a href=\"#值类型和引用类型在内存中的存储方式（画图说明）\" class=\"headerlink\" title=\"值类型和引用类型在内存中的存储方式（画图说明）\"></a>值类型和引用类型在内存中的存储方式（画图说明）</h4><ul>\n<li>值类型按值存储</li>\n<li>引用类型按引用存储</li>\n</ul>\n<h4 id=\"值类型复制和引用类型复制（画图说明）\"><a href=\"#值类型复制和引用类型复制（画图说明）\" class=\"headerlink\" title=\"值类型复制和引用类型复制（画图说明）\"></a>值类型复制和引用类型复制（画图说明）</h4><ul>\n<li>值类型按值复制</li>\n<li>引用类型按引用复制</li>\n</ul>\n<h4 id=\"值类型和引用类型参数传递（画图说明）\"><a href=\"#值类型和引用类型参数传递（画图说明）\" class=\"headerlink\" title=\"值类型和引用类型参数传递（画图说明）\"></a>值类型和引用类型参数传递（画图说明）</h4><ul>\n<li>值类型按值传递</li>\n<li>引用类型按引用传递</li>\n</ul>\n<h4 id=\"值类型与引用类型的差别\"><a href=\"#值类型与引用类型的差别\" class=\"headerlink\" title=\"值类型与引用类型的差别\"></a>值类型与引用类型的差别</h4><ul>\n<li>基本类型在内存中占据固定大小的空间，因此被保存在栈内存中</li>\n<li>从一个变量向另一个变量复制基本类型的值，复制的是值的副本</li>\n<li>引用类型的值是对象，保存在堆内存</li>\n<li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li>\n<li>从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象</li>\n</ul>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>类型检测方式</li>\n<li>值类型和引用类型的存储方式</li>\n<li>值类型复制和引用类型复制</li>\n<li>方法参数中 值类型数据传递 和 引用类型数据传递</li>\n</ul>\n<h3 id=\"JavaScript-执行过程\"><a href=\"#JavaScript-执行过程\" class=\"headerlink\" title=\"JavaScript 执行过程\"></a>JavaScript 执行过程</h3><p>JavaScript 运行分为两个阶段：</p>\n<ul>\n<li>预解析<ul>\n<li>全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）</li>\n<li>函数内部预解析（所有的变量、函数和形参都会参与预解析）<ul>\n<li>函数</li>\n<li>形参</li>\n<li>普通变量</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>执行</li>\n</ul>\n<p>先预解析全局作用域，然后执行全局作用域中的代码，<br>在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。</p>\n<hr>\n<h2 id=\"JavaScript-面向对象编程\"><a href=\"#JavaScript-面向对象编程\" class=\"headerlink\" title=\"JavaScript 面向对象编程\"></a>JavaScript 面向对象编程</h2><p><img src=\"http://p57ao19ex.bkt.clouddn.com/mxdxkf.png\" width=\"400\" alt=\"\"></p>\n<h3 id=\"面向对象介绍\"><a href=\"#面向对象介绍\" class=\"headerlink\" title=\"面向对象介绍\"></a>面向对象介绍</h3><h4 id=\"什么是对象\"><a href=\"#什么是对象\" class=\"headerlink\" title=\"什么是对象\"></a>什么是对象</h4><blockquote>\n<p>Everything is object （万物皆对象）</p>\n</blockquote>\n<p><img src=\"http://p57ao19ex.bkt.clouddn.com/20160823024542444.jpg\" alt=\"\"></p>\n<p>对象到底是什么，我们可以从两次层次来理解。</p>\n<p><strong>(1) 对象是单个事物的抽象。</strong></p>\n<p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p>\n<p><strong>(2) 对象是一个容器，封装了属性（property）和方法（method）。</strong></p>\n<p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p>\n<p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</p>\n<p>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都<br>映射到一个值。</p>\n<p class=\"tip\"><br>  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。<br></p>\n\n<h4 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h4><blockquote>\n<p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p>\n</blockquote>\n<p><img src=\"http://p57ao19ex.bkt.clouddn.com/664ba37eeee9f4623c06c066867f1d38_r.jpg\" width=\"400\" alt=\"\"></p>\n<p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。<br>它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>\n<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。<br>因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p>\n<p>面向对象与面向过程：</p>\n<ul>\n<li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li>\n<li>面向对象就是找一个对象，指挥得结果</li>\n<li>面向对象将执行者转变成指挥者</li>\n<li>面向对象不是面向过程的替代，而是面向过程的封装</li>\n</ul>\n<p>面向对象的特性：</p>\n<ul>\n<li>封装性</li>\n<li>继承性</li>\n<li>[多态性]</li>\n</ul>\n<p>扩展阅读：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">维基百科 - 面向对象程序设计</a></li>\n<li><a href=\"https://www.zhihu.com/question/19854505\" target=\"_blank\" rel=\"noopener\">知乎：如何用一句话说明什么是面向对象思想？</a></li>\n<li><a href=\"https://www.zhihu.com/question/31021366\" target=\"_blank\" rel=\"noopener\">知乎：什么是面向对象编程思想？</a></li>\n</ul>\n<h4 id=\"程序中面向对象的基本体现\"><a href=\"#程序中面向对象的基本体现\" class=\"headerlink\" title=\"程序中面向对象的基本体现\"></a>程序中面向对象的基本体现</h4><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。<br>自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p>\n<p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p>\n<p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> std1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Michael'</span>, <span class=\"attr\">score</span>: <span class=\"number\">98</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> std2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Bob'</span>, <span class=\"attr\">score</span>: <span class=\"number\">81</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printScore</span> (<span class=\"params\">student</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'姓名：'</span> + student.name + <span class=\"string\">'  '</span> + <span class=\"string\">'成绩：'</span> + student.score)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，<br>而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。<br>如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p>\n<p>抽象数据行为模板（Class）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, score</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.score = score</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.printScore = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'姓名：'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'  '</span> + <span class=\"string\">'成绩：'</span> + <span class=\"keyword\">this</span>.score)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据模板创建具体实例对象（Instance）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> std1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'Michael'</span>, <span class=\"number\">98</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> std2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'Bob'</span>, <span class=\"number\">81</span>)</span><br></pre></td></tr></table></figure>\n<p>实例对象具有自己的具体行为（给对象发消息）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std1.printScore() <span class=\"comment\">// =&gt; 姓名：Michael  成绩：98</span></span><br><span class=\"line\">std2.printScore() <span class=\"comment\">// =&gt; 姓名：Bob  成绩 81</span></span><br></pre></td></tr></table></figure>\n<p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。<br>Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，<br>而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p>\n<p>所以，面向对象的设计思想是：</p>\n<ul>\n<li>抽象出 Class</li>\n<li>根据 Class 创建 Instance</li>\n<li>指挥 Instance 得结果</li>\n</ul>\n<p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><h4 id=\"简单方式\"><a href=\"#简单方式\" class=\"headerlink\" title=\"简单方式\"></a>简单方式</h4><p>我们可以直接通过 <code>new Object()</code> 创建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">person.name = <span class=\"string\">'Jack'</span></span><br><span class=\"line\">person.age = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于上面的写法固然没有问题，但是假如我们要生成两个 <code>person</code> 实例对象呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person1 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Mike'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">16</span>,</span><br><span class=\"line\">  sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p>\n<h4 id=\"简单方式的改进：工厂函数\"><a href=\"#简单方式的改进：工厂函数\" class=\"headerlink\" title=\"简单方式的改进：工厂函数\"></a>简单方式的改进：工厂函数</h4><p>我们可以写一个函数，解决代码重复问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    name: name,</span><br><span class=\"line\">    age: age,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后生成实例对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">'Jack'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = createPerson(<span class=\"string\">'Mike'</span>, <span class=\"number\">18</span>)</span><br></pre></td></tr></table></figure>\n<p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>内容引导：</p>\n<ul>\n<li>构造函数语法</li>\n<li>分析构造函数</li>\n<li>构造函数和实例对象的关系<ul>\n<li>实例的 constructor 属性</li>\n<li>instanceof 操作符</li>\n</ul>\n</li>\n<li>普通函数调用和构造函数调用的区别</li>\n<li>构造函数的返回值</li>\n<li>构造函数的静态成员和实例成员<ul>\n<li>函数也是对象</li>\n<li>实例成员</li>\n<li>静态成员</li>\n</ul>\n</li>\n<li>构造函数的问题</li>\n</ul>\n<h4 id=\"更优雅的工厂函数：构造函数\"><a href=\"#更优雅的工厂函数：构造函数\" class=\"headerlink\" title=\"更优雅的工厂函数：构造函数\"></a>更优雅的工厂函数：构造函数</h4><p>一种更优雅的工厂函数就是下面这样，构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\">p1.sayName() <span class=\"comment\">// =&gt; Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Mike'</span>, <span class=\"number\">23</span>)</span><br><span class=\"line\">p2.sayName() <span class=\"comment\">// =&gt; Mike</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"解析构造函数代码的执行\"><a href=\"#解析构造函数代码的执行\" class=\"headerlink\" title=\"解析构造函数代码的执行\"></a>解析构造函数代码的执行</h4><p>在上面的示例中，<code>Person()</code> 函数取代了 <code>createPerson()</code> 函数，但是实现效果是一样的。<br>这是为什么呢？</p>\n<p>我们注意到，<code>Person()</code> 中的代码与 <code>createPerson()</code> 有以下几点不同之处：</p>\n<ul>\n<li>没有显示的创建对象</li>\n<li>直接将属性和方法赋给了 <code>this</code> 对象</li>\n<li>没有 <code>return</code> 语句</li>\n<li>函数名使用的是大写的 <code>Person</code></li>\n</ul>\n<p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。<br>以这种方式调用构造函数会经历以下 4 个步骤：</p>\n<ol>\n<li>创建一个新对象   看不到</li>\n<li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）  看不到</li>\n<li>执行构造函数中的代码</li>\n<li>返回新对象</li>\n</ol>\n<p>下面是具体的伪代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class=\"line\">  <span class=\"comment\">// var instance = &#123;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// 然后让内部的 this 指向 instance 对象</span></span><br><span class=\"line\">  <span class=\"comment\">// this = instance</span></span><br><span class=\"line\">  <span class=\"comment\">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class=\"line\">  <span class=\"comment\">// return this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"构造函数和实例对象的关系\"><a href=\"#构造函数和实例对象的关系\" class=\"headerlink\" title=\"构造函数和实例对象的关系\"></a>构造函数和实例对象的关系</h4><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。<br>在每一个实例对象中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.constructor === Person) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p2.constructor === Person) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.constructor === p2.constructor) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的，<br>但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> Person) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p2 <span class=\"keyword\">instanceof</span> Person) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li>构造函数是根据具体的事物抽象出来的抽象模板</li>\n<li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li>\n<li>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数<ul>\n<li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li>\n</ul>\n</li>\n<li>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<ul>\n<li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符，后面学原型会解释为什么</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"构造函数的问题\"><a href=\"#构造函数的问题\" class=\"headerlink\" title=\"构造函数的问题\"></a>构造函数的问题</h4><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lpz'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n<p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。<br>那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容，<br>每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayHello === p2.sayHello) <span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>对于这种问题我们可以把需要共享的函数定义到构造函数外部：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span> = <span class=\"title\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = sayHello</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lpz'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayHello === p2.sayHello) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。</p>\n<p>你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fns = &#123;</span><br><span class=\"line\">  sayHello: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sayAge: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHello = fns.sayHello</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayAge = fns.sayAge</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lpz'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Jack'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayHello === p2.sayHello) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayAge === p2.sayAge) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。<br>但是代码看起来还是那么的格格不入，那有没有更好的方式呢？</p>\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>构造函数语法</li>\n<li>分析构造函数</li>\n<li>构造函数和实例对象的关系<ul>\n<li>实例的 constructor 属性</li>\n<li>instanceof 操作符</li>\n</ul>\n</li>\n<li>构造函数的问题</li>\n</ul>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>内容引导：</p>\n<ul>\n<li>使用 prototype 原型对象解决构造函数的问题</li>\n<li>分析 构造函数、prototype 原型对象、实例对象 三者之间的关系</li>\n<li>属性成员搜索原则：原型链</li>\n<li>实例对象读写原型对象中的成员</li>\n<li>原型对象的简写形式</li>\n<li>原生对象的原型<ul>\n<li>Object</li>\n<li>Array</li>\n<li>String</li>\n<li>…</li>\n</ul>\n</li>\n<li>原型对象的问题</li>\n<li>构造的函数和原型对象使用建议</li>\n</ul>\n<h4 id=\"更好的解决方案：-prototype\"><a href=\"#更好的解决方案：-prototype\" class=\"headerlink\" title=\"更好的解决方案： prototype\"></a>更好的解决方案： <code>prototype</code></h4><p>Javascript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。<br>这个对象的所有属性和方法，都会被构造函数的实例继承。</p>\n<p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.prototype)</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.type = <span class=\"string\">'human'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(...)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.sayName === p2.sayName) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法，<br>其实都是同一个内存地址，指向 <code>prototype</code> 对象，因此就提高了运行效率。</p>\n<h4 id=\"构造函数、实例、原型三者之间的关系\"><a href=\"#构造函数、实例、原型三者之间的关系\" class=\"headerlink\" title=\"构造函数、实例、原型三者之间的关系\"></a>构造函数、实例、原型三者之间的关系</h4><p><img src=\"http://p57ao19ex.bkt.clouddn.com/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png\" alt=\"\"></p>\n<p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(F.prototype) <span class=\"comment\">// =&gt; object</span></span><br><span class=\"line\"></span><br><span class=\"line\">F.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hi!'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(F.constructor === F) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> F()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(instance.__proto__ === F.prototype) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p class=\"tip\"><br>  <code>__proto__</code> 是非标准属性。(现在是标准的属性)<br></p>\n\n<p>实例对象可以直接访问原型对象成员。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instance.sayHi() <span class=\"comment\">// =&gt; hi!</span></span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li>\n<li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li>\n<li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li>\n<li>所有实例都直接或间接继承了原型对象的成员</li>\n</ul>\n<h4 id=\"属性成员的搜索原则：原型链\"><a href=\"#属性成员的搜索原则：原型链\" class=\"headerlink\" title=\"属性成员的搜索原则：原型链\"></a>属性成员的搜索原则：原型链</h4><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p>\n<p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p>\n<ul>\n<li>搜索首先从对象实例本身开始</li>\n<li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li>\n<li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li>\n<li>如果在原型对象中找到了这个属性，则返回该属性的值</li>\n</ul>\n<p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p>\n<ul>\n<li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li>\n<li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li>\n<li>”于是，它就读取那个保存在原型对象中的函数。</li>\n<li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li>\n</ul>\n<p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p>\n<p>总结：</p>\n<ul>\n<li>先在自己身上找，找到即返回</li>\n<li>自己身上找不到，则沿着原型链向上查找，找到即返回</li>\n<li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li>\n</ul>\n<h4 id=\"实例对象读写原型对象成员\"><a href=\"#实例对象读写原型对象成员\" class=\"headerlink\" title=\"实例对象读写原型对象成员\"></a>实例对象读写原型对象成员</h4><p>读取：</p>\n<ul>\n<li>先在自己身上找，找到即返回</li>\n<li>自己身上找不到，则沿着原型链向上查找，找到即返回</li>\n<li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li>\n</ul>\n<p>值类型成员写入（<code>实例对象.值类型成员 = xx</code>）：</p>\n<ul>\n<li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li>\n<li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li>\n</ul>\n<p>引用类型成员写入（<code>实例对象.引用类型成员 = xx</code>）：</p>\n<ul>\n<li>同上</li>\n</ul>\n<p>复杂类型修改（<code>实例对象.成员.xx = xx</code>）：</p>\n<ul>\n<li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li>\n<li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li>\n<li>如果一直到原型链的末端还没有找到该成员，则报错（<code>实例对象.undefined.xx = xx</code>）</li>\n</ul>\n<h4 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h4><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  type: <span class=\"string\">'human'</span>,</span><br><span class=\"line\">  sayHello: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'，我今年'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁了'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。<br>这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p>\n<p>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: Person, // =&gt; 手动将 <span class=\"keyword\">constructor</span> 指向正确的构造函数</span><br><span class=\"line\">  type: 'human',</span><br><span class=\"line\">  sayHello: function () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我叫'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'，我今年'</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">'岁了'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h4><p class=\"tip\"><br>  所有函数都有 prototype 属性对象。<br></p>\n\n<ul>\n<li>Object.prototype</li>\n<li>Function.prototype</li>\n<li>Array.prototype</li>\n<li>String.prototype</li>\n<li>Number.prototype</li>\n<li>Date.prototype</li>\n<li>…</li>\n</ul>\n<p>练习：为数组对象和字符串对象扩展原型方法。</p>\n<h4 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h4><ul>\n<li>共享数组</li>\n<li>共享对象</li>\n</ul>\n<p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。</p>\n<p>一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。</p>\n<h4 id=\"原型对象使用建议\"><a href=\"#原型对象使用建议\" class=\"headerlink\" title=\"原型对象使用建议\"></a>原型对象使用建议</h4><ul>\n<li>私有成员（一般就是非函数成员）放到构造函数中</li>\n<li>共享成员（一般就是函数）放到原型对象中</li>\n<li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li>\n</ul>\n<h3 id=\"案例：随机方块\"><a href=\"#案例：随机方块\" class=\"headerlink\" title=\"案例：随机方块\"></a>案例：随机方块</h3><hr>\n<h2 id=\"面向对象游戏案例：贪吃蛇\"><a href=\"#面向对象游戏案例：贪吃蛇\" class=\"headerlink\" title=\"面向对象游戏案例：贪吃蛇\"></a>面向对象游戏案例：贪吃蛇</h2><p>案例相关源码以上传到 GitHub ：<a href=\"https://github.com/lipengzhou/new-snake\" target=\"_blank\" rel=\"noopener\">https://github.com/lipengzhou/new-snake</a></p>\n<h3 id=\"案例介绍\"><a href=\"#案例介绍\" class=\"headerlink\" title=\"案例介绍\"></a>案例介绍</h3><h4 id=\"游戏演示\"><a href=\"#游戏演示\" class=\"headerlink\" title=\"游戏演示\"></a>游戏演示</h4><p>在线演示地址：<a href=\"https://lipengzhou.github.io/new-snake/\" target=\"_blank\" rel=\"noopener\">贪吃蛇</a></p>\n<h4 id=\"案例目标\"><a href=\"#案例目标\" class=\"headerlink\" title=\"案例目标\"></a>案例目标</h4><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。</p>\n<h3 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h3><h4 id=\"搭建页面\"><a href=\"#搭建页面\" class=\"headerlink\" title=\"搭建页面\"></a>搭建页面</h4><p>放一个容器盛放游戏场景 div#map，设置样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#map</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析对象\"><a href=\"#分析对象\" class=\"headerlink\" title=\"分析对象\"></a>分析对象</h4><ul>\n<li>游戏对象</li>\n<li>蛇对象</li>\n<li>食物对象</li>\n</ul>\n<h4 id=\"创建食物对象\"><a href=\"#创建食物对象\" class=\"headerlink\" title=\"创建食物对象\"></a>创建食物对象</h4><ul>\n<li>Food<ul>\n<li>属性<ul>\n<li>x       </li>\n<li>y</li>\n<li>width</li>\n<li>height</li>\n<li>color       </li>\n</ul>\n</li>\n<li>方法<ul>\n<li>render       随机创建一个食物对象，并输出到map上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建Food的构造函数，并设置属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> position = <span class=\"string\">'absolute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> elements = [];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Food</span>(<span class=\"params\">x, y, width, height, color</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = x || <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = y || <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 食物的宽度和高度(像素)</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = width || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = height || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 食物的颜色</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color || <span class=\"string\">'green'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Food.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * map.offsetWidth / <span class=\"keyword\">this</span>.width) * <span class=\"keyword\">this</span>.width;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * map.offsetHeight / <span class=\"keyword\">this</span>.height) * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 动态创建食物对应的div</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">  map.appendChild(div);</span><br><span class=\"line\">  div.style.position = position;</span><br><span class=\"line\">  div.style.left = <span class=\"keyword\">this</span>.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.top = <span class=\"keyword\">this</span>.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.width = <span class=\"keyword\">this</span>.width + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.height = <span class=\"keyword\">this</span>.height + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  div.style.backgroundColor = <span class=\"keyword\">this</span>.color;</span><br><span class=\"line\">  elements.push(div);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过自调用函数，进行封装，通过window暴露Food对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Food = Food;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建蛇对象\"><a href=\"#创建蛇对象\" class=\"headerlink\" title=\"创建蛇对象\"></a>创建蛇对象</h4><ul>\n<li>Snake</li>\n<li>属性<ul>\n<li>width    蛇节的宽度 默认20</li>\n<li>height   蛇节的高度 默认20</li>\n<li>body     数组，蛇的头部和身体，第一个位置是蛇头</li>\n<li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>render  把蛇渲染到map上</li>\n</ul>\n</li>\n<li>Snake构造函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> position = <span class=\"string\">'absolute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> elements = [];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Snake</span>(<span class=\"params\">width, height, direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置每一个蛇节的宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = width || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = height || <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 蛇的每一部分, 第一部分是蛇头</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.body = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">x</span>: <span class=\"number\">2</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.direction = direction || <span class=\"string\">'right'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>render方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snake.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.body.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = <span class=\"keyword\">this</span>.body[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    map.appendChild(div);</span><br><span class=\"line\">    div.style.left = obj.x * <span class=\"keyword\">this</span>.width + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    div.style.top = obj.y * <span class=\"keyword\">this</span>.height + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    div.style.position = position;</span><br><span class=\"line\">    div.style.backgroundColor = obj.color;</span><br><span class=\"line\">    div.style.width = <span class=\"keyword\">this</span>.width + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    div.style.height = <span class=\"keyword\">this</span>.height + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在自调用函数中暴露Snake对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.Snake = Snake;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建游戏对象\"><a href=\"#创建游戏对象\" class=\"headerlink\" title=\"创建游戏对象\"></a>创建游戏对象</h4><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p>\n<ul>\n<li>Game<ul>\n<li>属性<ul>\n<li>food</li>\n<li>snake</li>\n<li>map</li>\n</ul>\n</li>\n<li>方法<ul>\n<li>start            开始游戏（绘制所有游戏对象）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>构造函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Game</span>(<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.food = <span class=\"keyword\">new</span> Food();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.snake = <span class=\"keyword\">new</span> Snake();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.map = map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>开始游戏，渲染食物对象和蛇对象</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Game.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.food.render(<span class=\"keyword\">this</span>.map);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.snake.render(<span class=\"keyword\">this</span>.map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"游戏的逻辑\"><a href=\"#游戏的逻辑\" class=\"headerlink\" title=\"游戏的逻辑\"></a>游戏的逻辑</h3><h4 id=\"写蛇的move方法\"><a href=\"#写蛇的move方法\" class=\"headerlink\" title=\"写蛇的move方法\"></a>写蛇的move方法</h4><ul>\n<li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li>\n</ul>\n<ol>\n<li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li>\n<li>蛇头部分根据不同的方向决定 往哪里移动</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Snake.prototype.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">food, map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 让蛇身体的每一部分往前移动一下</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"keyword\">this</span>.body.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body[i].x = <span class=\"keyword\">this</span>.body[i - <span class=\"number\">1</span>].x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body[i].y = <span class=\"keyword\">this</span>.body[i - <span class=\"number\">1</span>].y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 根据移动的方向，决定蛇头如何处理</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(<span class=\"keyword\">this</span>.direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'left'</span>: </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].x -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'right'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].x += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'top'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].y -= <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'bottom'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].y += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在game中测试</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.snake.move(<span class=\"keyword\">this</span>.food, <span class=\"keyword\">this</span>.map);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.snake.render(<span class=\"keyword\">this</span>.map);</span><br></pre></td></tr></table></figure>\n<h4 id=\"让蛇自己动起来\"><a href=\"#让蛇自己动起来\" class=\"headerlink\" title=\"让蛇自己动起来\"></a>让蛇自己动起来</h4><ul>\n<li><p>私有方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是私有方法？</span><br><span class=\"line\">  不能被外部访问的方法</span><br><span class=\"line\">如何创建私有方法？</span><br><span class=\"line\">  使用自调用函数包裹</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p>\n</li>\n<li><p>判断蛇是否撞墙</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runSnake</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timerId = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.snake.move(<span class=\"keyword\">this</span>.food, <span class=\"keyword\">this</span>.map);</span><br><span class=\"line\">    <span class=\"comment\">// 在渲染前，删除之前的蛇</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.snake.render(<span class=\"keyword\">this</span>.map);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断蛇是否撞墙</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxX = <span class=\"keyword\">this</span>.map.offsetWidth / <span class=\"keyword\">this</span>.snake.width;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxY = <span class=\"keyword\">this</span>.map.offsetHeight / <span class=\"keyword\">this</span>.snake.height;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> headX = <span class=\"keyword\">this</span>.snake.body[<span class=\"number\">0</span>].x;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> headY = <span class=\"keyword\">this</span>.snake.body[<span class=\"number\">0</span>].y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (headX &lt; <span class=\"number\">0</span> || headX &gt;= maxX) &#123;</span><br><span class=\"line\">      clearInterval(timerId);</span><br><span class=\"line\">      alert(<span class=\"string\">'Game Over'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (headY &lt; <span class=\"number\">0</span> || headY &gt;= maxY) &#123;</span><br><span class=\"line\">      clearInterval(timerId);</span><br><span class=\"line\">      alert(<span class=\"string\">'Game Over'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;.bind(that), <span class=\"number\">150</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在snake中添加删除蛇的私有方法，在render中调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 删除渲染的蛇</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = elements.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 删除页面上渲染的蛇</span></span><br><span class=\"line\">    elements[i].parentNode.removeChild(elements[i]);</span><br><span class=\"line\">    <span class=\"comment\">// 删除elements数组中的元素</span></span><br><span class=\"line\">    elements.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在game中通过键盘控制蛇的移动方向</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindKey</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'keydown'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (e.keyCode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">37</span>:</span><br><span class=\"line\">        <span class=\"comment\">// left</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'left'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">38</span>:</span><br><span class=\"line\">        <span class=\"comment\">// top</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'top'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">39</span>:</span><br><span class=\"line\">        <span class=\"comment\">// right</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'right'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">40</span>:</span><br><span class=\"line\">        <span class=\"comment\">// bottom</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.snake.direction = <span class=\"string\">'bottom'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;.bind(that), <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在start方法中调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindKey();</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断蛇是否吃到食物\"><a href=\"#判断蛇是否吃到食物\" class=\"headerlink\" title=\"判断蛇是否吃到食物\"></a>判断蛇是否吃到食物</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在Snake的move方法中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在移动的过程中判断蛇是否吃到食物</span></span><br><span class=\"line\"><span class=\"comment\">// 如果蛇头和食物的位置重合代表吃到食物</span></span><br><span class=\"line\"><span class=\"comment\">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> headX = <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].x * <span class=\"keyword\">this</span>.width;</span><br><span class=\"line\"><span class=\"keyword\">var</span> headY = <span class=\"keyword\">this</span>.body[<span class=\"number\">0</span>].y * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 吃到食物，往蛇节的最后加一节</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> last = <span class=\"keyword\">this</span>.body[<span class=\"keyword\">this</span>.body.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.body.push(&#123;</span><br><span class=\"line\">    x: last.x,</span><br><span class=\"line\">    y: last.y,</span><br><span class=\"line\">    color: last.color</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></span><br><span class=\"line\">  food.render(map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它处理\"><a href=\"#其它处理\" class=\"headerlink\" title=\"其它处理\"></a>其它处理</h3><h4 id=\"把html中的js代码放到index-js中\"><a href=\"#把html中的js代码放到index-js中\" class=\"headerlink\" title=\"把html中的js代码放到index.js中\"></a>把html中的js代码放到index.js中</h4><p>避免html中出现js代码</p>\n<h4 id=\"自调用函数的参数\"><a href=\"#自调用函数的参数\" class=\"headerlink\" title=\"自调用函数的参数\"></a>自调用函数的参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">window, undefined</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">document</span> = <span class=\"built_in\">window</span>.document;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;(<span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>传入window对象</li>\n</ul>\n<p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p>\n<ul>\n<li>传入undefined</li>\n</ul>\n<p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p>\n<h4 id=\"整理代码\"><a href=\"#整理代码\" class=\"headerlink\" title=\"整理代码\"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p>\n<p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p>\n<ul>\n<li>问题1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></span><br><span class=\"line\"><span class=\"comment\">// 下面代码会报错</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"><span class=\"comment\">// 所以代码规范中会建议在自调用函数之前加上分号</span></span><br><span class=\"line\"><span class=\"comment\">// 下面代码没有问题</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br><span class=\"line\"></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>问题2 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></span><br><span class=\"line\"><span class=\"comment\">// 所以建议自调用函数前，加上;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'11'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">'22'</span>);</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><h3 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承\"></a>什么是继承</h3><ul>\n<li>现实生活中的继承</li>\n<li>程序中的继承</li>\n</ul>\n<h3 id=\"构造函数的属性继承：借用构造函数\"><a href=\"#构造函数的属性继承：借用构造函数\" class=\"headerlink\" title=\"构造函数的属性继承：借用构造函数\"></a>构造函数的属性继承：借用构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 借用构造函数继承属性成员</span></span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>, name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = Student(<span class=\"string\">'张三'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.type, s1.name, s1.age) <span class=\"comment\">// =&gt; human 张三 18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数的原型方法继承：拷贝继承（for-in）\"><a href=\"#构造函数的原型方法继承：拷贝继承（for-in）\" class=\"headerlink\" title=\"构造函数的原型方法继承：拷贝继承（for-in）\"></a>构造函数的原型方法继承：拷贝继承（for-in）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>, name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型对象拷贝继承原型对象成员</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> Person.prototype) &#123;</span><br><span class=\"line\">  Student.prototype[key] = Person.prototype[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = Student(<span class=\"string\">'张三'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s1.sayName() <span class=\"comment\">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"另一种继承方式：原型继承\"><a href=\"#另一种继承方式：原型继承\" class=\"headerlink\" title=\"另一种继承方式：原型继承\"></a>另一种继承方式：原型继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'human'</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello '</span> + <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>, name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用原型的特性实现继承</span></span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = Student(<span class=\"string\">'张三'</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.type) <span class=\"comment\">// =&gt; human</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.sayName() <span class=\"comment\">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"函数进阶\"><a href=\"#函数进阶\" class=\"headerlink\" title=\"函数进阶\"></a>函数进阶</h2><h3 id=\"函数的定义方式\"><a href=\"#函数的定义方式\" class=\"headerlink\" title=\"函数的定义方式\"></a>函数的定义方式</h3><ul>\n<li>函数声明</li>\n<li>函数表达式</li>\n<li><code>new Function</code></li>\n</ul>\n<h4 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数声明与函数表达式的区别\"><a href=\"#函数声明与函数表达式的区别\" class=\"headerlink\" title=\"函数声明与函数表达式的区别\"></a>函数声明与函数表达式的区别</h4><ul>\n<li>函数声明必须有名字</li>\n<li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li>\n<li>函数表达式类似于变量赋值</li>\n<li>函数表达式可以没有名字，例如匿名函数</li>\n<li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li>\n</ul>\n<p>下面是一个根据条件定义函数的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码执行结果在不同浏览器中结果不一致。</p>\n<p>不过我们可以使用函数表达式解决上面的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数的调用方式\"><a href=\"#函数的调用方式\" class=\"headerlink\" title=\"函数的调用方式\"></a>函数的调用方式</h3><ul>\n<li>普通函数</li>\n<li>构造函数</li>\n<li>对象方法</li>\n</ul>\n<h3 id=\"函数内-this-指向的不同场景\"><a href=\"#函数内-this-指向的不同场景\" class=\"headerlink\" title=\"函数内 this 指向的不同场景\"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p>\n<table>\n<thead>\n<tr>\n<th>调用方式</th>\n<th>非严格模式</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>普通函数调用</td>\n<td>window</td>\n<td>严格模式下是 undefined</td>\n</tr>\n<tr>\n<td>构造函数调用</td>\n<td>实例对象</td>\n<td>原型方法中 this 也是实例对象</td>\n</tr>\n<tr>\n<td>对象方法调用</td>\n<td>该方法所属对象</td>\n<td>紧挨着的对象</td>\n</tr>\n<tr>\n<td>事件绑定方法</td>\n<td>绑定事件对象</td>\n<td></td>\n</tr>\n<tr>\n<td>定时器函数</td>\n<td>window</td>\n</tr>\n</tbody>\n</table>\n<p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p>\n<h3 id=\"函数也是对象\"><a href=\"#函数也是对象\" class=\"headerlink\" title=\"函数也是对象\"></a>函数也是对象</h3><ul>\n<li>所有函数都是 <code>Function</code> 的实例</li>\n</ul>\n<h3 id=\"call、apply、bind\"><a href=\"#call、apply、bind\" class=\"headerlink\" title=\"call、apply、bind\"></a>call、apply、bind</h3><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p>\n<p class=\"danger\"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p>\n\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li><code>thisArg</code><ul>\n<li>在 fun 函数运行时指定的 this 值</li>\n<li>如果指定了 null 或者 undefined 则内部 this 指向 window</li>\n</ul>\n</li>\n<li><code>arg1, arg2, ...</code><ul>\n<li>指定的参数列表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p>\n<p class=\"danger\"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p>\n\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li><code>thisArg</code></li>\n<li><code>argsArray</code></li>\n</ul>\n<p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.apply(<span class=\"keyword\">this</span>, [<span class=\"string\">'eat'</span>, <span class=\"string\">'bananas'</span>])</span><br></pre></td></tr></table></figure>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li>thisArg<ul>\n<li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li>\n</ul>\n</li>\n<li>arg1, arg2, …<ul>\n<li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li>\n</ul>\n</li>\n</ul>\n<p>返回值：</p>\n<p>返回由指定的this值和初始化参数改造的原函数拷贝。</p>\n<p>示例1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.x = <span class=\"number\">9</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">81</span>,</span><br><span class=\"line\">  getX: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.getX(); <span class=\"comment\">// 返回 81</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> retrieveX = <span class=\"built_in\">module</span>.getX;</span><br><span class=\"line\">retrieveX(); <span class=\"comment\">// 返回 9, 在这种情况下，\"this\"指向全局作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个新函数，将\"this\"绑定到module对象</span></span><br><span class=\"line\"><span class=\"comment\">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boundGetX = retrieveX.bind(<span class=\"built_in\">module</span>);</span><br><span class=\"line\">boundGetX(); <span class=\"comment\">// 返回 81</span></span><br></pre></td></tr></table></figure>\n<p>示例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LateBloomer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.petalCount = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">12</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare bloom after a delay of 1 second</span></span><br><span class=\"line\">LateBloomer.prototype.bloom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"keyword\">this</span>.declare.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">LateBloomer.prototype.declare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a beautiful flower with '</span> +</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.petalCount + <span class=\"string\">' petals!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> flower = <span class=\"keyword\">new</span> LateBloomer();</span><br><span class=\"line\">flower.bloom();  <span class=\"comment\">// 一秒钟后, 调用'declare'方法</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>call 和 apply 特性一样<ul>\n<li>都是用来调用函数，而且是立即调用</li>\n<li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li>\n<li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li>\n<li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li>\n<li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li>\n</ul>\n</li>\n<li>bind<ul>\n<li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li>\n<li>它和 call、apply 最大的区别是：bind 不会调用</li>\n<li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul>\n<li><ol>\n<li>在 bind 的同时，以参数列表的形式进行传递</li>\n</ol>\n</li>\n<li><ol>\n<li>在调用的时候，以参数列表的形式进行传递</li>\n</ol>\n</li>\n<li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li>\n<li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数的其它成员\"><a href=\"#函数的其它成员\" class=\"headerlink\" title=\"函数的其它成员\"></a>函数的其它成员</h3><ul>\n<li>arguments<ul>\n<li>实参集合</li>\n</ul>\n</li>\n<li>caller<ul>\n<li>函数的调用者</li>\n</ul>\n</li>\n<li>length<ul>\n<li>形参的个数</li>\n</ul>\n</li>\n<li>name<ul>\n<li>函数的名称</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fn.length) <span class=\"comment\">// =&gt; 形参的个数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 伪数组实参参数集合</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee === fn) <span class=\"comment\">// 函数本身</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fn.caller) <span class=\"comment\">// 函数的调用者</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fn.name) <span class=\"comment\">// =&gt; 函数的名字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fn(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><ul>\n<li>函数可以作为参数</li>\n<li>函数可以作为返回值</li>\n</ul>\n<h4 id=\"作为参数\"><a href=\"#作为参数\" class=\"headerlink\" title=\"作为参数\"></a>作为参数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'吃完了'</span>)</span><br><span class=\"line\">    callback()</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">eat(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'去唱歌'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"作为返回值\"><a href=\"#作为返回值\" class=\"headerlink\" title=\"作为返回值\"></a>作为返回值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genFun</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === type</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isArray = genFun(<span class=\"string\">'[object Array]'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> isObject = genFun(<span class=\"string\">'[object Object]'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isArray([])) <span class=\"comment\">// =&gt; true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isArray(&#123;&#125;)) <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数闭包\"><a href=\"#函数闭包\" class=\"headerlink\" title=\"函数闭包\"></a>函数闭包</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(count)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setCount: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fns = fn()</span><br><span class=\"line\"></span><br><span class=\"line\">fns.getCount() <span class=\"comment\">// =&gt; 0</span></span><br><span class=\"line\">fns.setCount()</span><br><span class=\"line\">fns.getCount() <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"作用域、作用域链、预解析\"><a href=\"#作用域、作用域链、预解析\" class=\"headerlink\" title=\"作用域、作用域链、预解析\"></a>作用域、作用域链、预解析</h4><ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li><strong>没有块级作用域</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>作用域链示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a + b + c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"number\">40</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c + d)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fn1()</span><br><span class=\"line\">  fn2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<h4 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h4><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p>闭包的用途：</p>\n<ul>\n<li>可以在函数外部读取函数内部成员</li>\n<li>让函数内成员始终存活在内存中</li>\n</ul>\n<h4 id=\"一些关于闭包的例子\"><a href=\"#一些关于闭包的例子\" class=\"headerlink\" title=\"一些关于闭包的例子\"></a>一些关于闭包的例子</h4><p>示例1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  arr[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br></pre></td></tr></table></figure>\n<p>示例3：投票</p>\n<p>示例4：判断类型</p>\n<p>示例5：沙箱模式</p>\n<h4 id=\"闭包的思考题\"><a href=\"#闭包的思考题\" class=\"headerlink\" title=\"闭包的思考题\"></a>闭包的思考题</h4><p>思考题 1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure>\n<p>思考题 2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"The Window\"</span>;　　</span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;　　　　</span><br><span class=\"line\">  name: <span class=\"string\">\"My Object\"</span>,</span><br><span class=\"line\">  getNameFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> that.name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h4><h3 id=\"函数递归\"><a href=\"#函数递归\" class=\"headerlink\" title=\"函数递归\"></a>函数递归</h3><h4 id=\"递归执行模型\"><a href=\"#递归执行模型\" class=\"headerlink\" title=\"递归执行模型\"></a>递归执行模型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>)</span><br><span class=\"line\">  fn2()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn1'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>)</span><br><span class=\"line\">  fn3()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn2'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>)</span><br><span class=\"line\">  fn4()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn3'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn4</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">444</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn4'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn1()</span><br></pre></td></tr></table></figure>\n<h4 id=\"举个栗子：计算阶乘的递归函数\"><a href=\"#举个栗子：计算阶乘的递归函数\" class=\"headerlink\" title=\"举个栗子：计算阶乘的递归函数\"></a>举个栗子：计算阶乘的递归函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num * factorial(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"递归应用场景\"><a href=\"#递归应用场景\" class=\"headerlink\" title=\"递归应用场景\"></a>递归应用场景</h4><ul>\n<li>深拷贝</li>\n<li>菜单树</li>\n<li>遍历 DOM 树</li>\n</ul>\n<hr>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ul>\n<li>了解正则表达式基本语法</li>\n<li>能够使用JavaScript的正则对象</li>\n</ul>\n<h3 id=\"正则表达式简介\"><a href=\"#正则表达式简介\" class=\"headerlink\" title=\"正则表达式简介\"></a>正则表达式简介</h3><h4 id=\"什么是正则表达式\"><a href=\"#什么是正则表达式\" class=\"headerlink\" title=\"什么是正则表达式\"></a>什么是正则表达式</h4><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>\n<h4 id=\"正则表达式的作用\"><a href=\"#正则表达式的作用\" class=\"headerlink\" title=\"正则表达式的作用\"></a>正则表达式的作用</h4><ol>\n<li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li>\n<li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li>\n<li>强大的字符串替换能力(替换)</li>\n</ol>\n<h4 id=\"正则表达式的特点\"><a href=\"#正则表达式的特点\" class=\"headerlink\" title=\"正则表达式的特点\"></a>正则表达式的特点</h4><ol>\n<li>灵活性、逻辑性和功能性非常的强</li>\n<li>可以迅速地用极简单的方式达到字符串的复杂控制</li>\n<li>对于刚接触的人来说，比较晦涩难懂</li>\n</ol>\n<h3 id=\"正则表达式的测试\"><a href=\"#正则表达式的测试\" class=\"headerlink\" title=\"正则表达式的测试\"></a>正则表达式的测试</h3><ul>\n<li><a href=\"https://c.runoob.com/front-end/854\" target=\"_blank\" rel=\"noopener\">在线测试正则</a></li>\n<li>工具中使用正则表达式<ul>\n<li>sublime/vscode/word</li>\n<li>演示替换所有的数字</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"正则表达式的组成\"><a href=\"#正则表达式的组成\" class=\"headerlink\" title=\"正则表达式的组成\"></a>正则表达式的组成</h3><ul>\n<li>普通字符</li>\n<li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li>\n</ul>\n<p>示例演示：</p>\n<ul>\n<li><code>\\d</code> 匹配数字</li>\n<li><code>ab\\d</code> 匹配 ab1、ab2</li>\n</ul>\n<h3 id=\"元字符串\"><a href=\"#元字符串\" class=\"headerlink\" title=\"元字符串\"></a>元字符串</h3><p>通过测试工具演示下面元字符的使用</p>\n<h4 id=\"常用元字符串\"><a href=\"#常用元字符串\" class=\"headerlink\" title=\"常用元字符串\"></a>常用元字符串</h4><table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配任意非数字的字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母或数字或下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任意不是字母，数字，下划线</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任意的空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任意不是空白符的字符</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符以外的任意单个字符</td>\n</tr>\n<tr>\n<td>^</td>\n<td>表示匹配行首的文本(以谁开始)</td>\n</tr>\n<tr>\n<td>$</td>\n<td>表示匹配行尾的文本(以谁结束)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h4><table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复零次或一次</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>重复n到m次</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class=\"line\">[^]  匹配除中括号以内的内容</span><br><span class=\"line\">\\ 转义符</span><br><span class=\"line\">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class=\"line\">() 从两个直接量中选择一个，分组</span><br><span class=\"line\">   eg：gr(a|e)y匹配gray和grey</span><br><span class=\"line\">[\\u4e00-\\u9fa5]  匹配汉字</span><br></pre></td></tr></table></figure>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>验证手机号：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">11</span>&#125;$</span><br></pre></td></tr></table></figure>\n<p>验证邮编：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">6</span>&#125;$</span><br></pre></td></tr></table></figure>\n<p>验证日期 2012-5-01</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">4</span>&#125;-\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;-\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;$</span><br></pre></td></tr></table></figure>\n<p>验证邮箱 xxx@itcast.cn：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\w+@\\w+\\.\\w+$</span><br></pre></td></tr></table></figure>\n<p>验证IP地址 192.168.1.10</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;\\(.\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;)&#123;<span class=\"number\">3</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-中使用正则表达式\"><a href=\"#JavaScript-中使用正则表达式\" class=\"headerlink\" title=\"JavaScript 中使用正则表达式\"></a>JavaScript 中使用正则表达式</h2><h3 id=\"创建正则对象\"><a href=\"#创建正则对象\" class=\"headerlink\" title=\"创建正则对象\"></a>创建正则对象</h3><p>方式1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> Regex(<span class=\"string\">'\\d'</span>, <span class=\"string\">'i'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> Regex(<span class=\"string\">'\\d'</span>, <span class=\"string\">'gi'</span>);</span><br></pre></td></tr></table></figure>\n<p>方式2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d/gi</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><table>\n<thead>\n<tr>\n<th>标志</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td>g</td>\n<td>全局匹配</td>\n</tr>\n<tr>\n<td>gi</td>\n<td>全局匹配+忽略大小写</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配日期</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dateStr = <span class=\"string\">'2015-10-10'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.test(dateStr));</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则提取\"><a href=\"#正则提取\" class=\"headerlink\" title=\"正则提取\"></a>正则提取</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 提取工资</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"张三：1000，李四：5000，王五：8000。\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> array = str.match(<span class=\"regexp\">/\\d+/g</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 提取email地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com...\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> array = str.match(<span class=\"regexp\">/\\w+@\\w+\\.\\w+(\\.\\w+)?/g</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 分组提取  </span></span><br><span class=\"line\"><span class=\"comment\">// 3. 提取日期中的年部分  2015-5-10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dateStr = <span class=\"string\">'2016-1-5'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\d&#123;4&#125;)-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (reg.test(dateStr)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 提取邮件中的每一部分</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\w+)@(\\w+)\\.(\\w+)(\\.\\w+)?/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"123123@xx.com\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (reg.test(str)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则替换\"><a href=\"#正则替换\" class=\"headerlink\" title=\"正则替换\"></a>正则替换</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 替换所有空白</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"   123AD  asadf   asadfasf  adf \"</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/\\s/g</span>,<span class=\"string\">\"xx\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 替换所有,|，</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"abc,efg,123，abc,123，a\"</span>;</span><br><span class=\"line\">str = str.replace(<span class=\"regexp\">/,|，/g</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str);</span><br></pre></td></tr></table></figure>\n<h3 id=\"案例：表单验证\"><a href=\"#案例：表单验证\" class=\"headerlink\" title=\"案例：表单验证\"></a>案例：表单验证</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QQ号：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtQQ\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtEMail\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">手机：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtPhone\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">生日：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtBirthday\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txtName\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取文本框</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> txtQQ = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtQQ\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtEMail = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtEMail\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtPhone = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtPhone\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtBirthday = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtBirthday\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> txtName = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtName\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">txtQQ.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取当前文本框对应的span</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\d&#123;5,12&#125;$/</span>;</span><br><span class=\"line\">  <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"请输入正确的QQ号\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//txtEMail</span></span><br><span class=\"line\">txtEMail.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取当前文本框对应的span</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^\\w+@\\w+\\.\\w+(\\.\\w+)?$/</span>;</span><br><span class=\"line\">  <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"请输入正确的EMail地址\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">    span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>表单验证部分，封装成函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regBirthday = <span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$/</span>;</span><br><span class=\"line\">addCheck(txtBirthday, regBirthday, <span class=\"string\">\"请输入正确的出生日期\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//给文本框添加验证</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCheck</span>(<span class=\"params\">element, reg, tip</span>) </span>&#123;</span><br><span class=\"line\">  element.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前文本框对应的span</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">    <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">      <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">      span.innerText = tip;</span><br><span class=\"line\">      span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">      span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过给元素增加自定义验证属性对表单进行验证：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"frm\"</span>&gt;</span></span><br><span class=\"line\">  QQ号：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtQQ\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"qq\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtEMail\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"email\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  手机：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtPhone\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"phone\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  生日：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtBirthday\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"date\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txtName\"</span> <span class=\"attr\">data-rule</span>=<span class=\"string\">\"cn\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 所有的验证规则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rules = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'qq'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\d&#123;5,12&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的QQ\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'email'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\w+@\\w+\\.\\w+(\\.\\w+)?$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的邮箱地址\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'phone'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\d&#123;11&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的手机号码\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'date'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的出生日期\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'cn'</span>,</span><br><span class=\"line\">    reg: <span class=\"regexp\">/^[\\u4e00-\\u9fa5]&#123;2,4&#125;$/</span>,</span><br><span class=\"line\">    tip: <span class=\"string\">\"请输入正确的姓名\"</span></span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">addCheck(<span class=\"string\">'frm'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给文本框添加验证</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCheck</span>(<span class=\"params\">formId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">      len = <span class=\"number\">0</span>,</span><br><span class=\"line\">      frm =<span class=\"built_in\">document</span>.getElementById(formId);</span><br><span class=\"line\">  len = frm.children.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> element = frm.children[i];</span><br><span class=\"line\">    <span class=\"comment\">// 表单元素中有name属性的元素添加验证</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.name) &#123;</span><br><span class=\"line\">      element.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用dataset获取data-自定义属性的值</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ruleName = <span class=\"keyword\">this</span>.dataset.rule;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rule =getRuleByRuleName(rules, ruleName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> span = <span class=\"keyword\">this</span>.nextElementSibling;</span><br><span class=\"line\">        <span class=\"comment\">//判断验证是否成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!rule.reg.test(<span class=\"keyword\">this</span>.value) )&#123;</span><br><span class=\"line\">          <span class=\"comment\">//验证不成功</span></span><br><span class=\"line\">          span.innerText = rule.tip;</span><br><span class=\"line\">          span.style.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//验证成功</span></span><br><span class=\"line\">          span.innerText = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">          span.style.color = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据规则的名称获取规则对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRuleByRuleName</span>(<span class=\"params\">rules, ruleName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">      len = rules.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rule = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rules[i].name == ruleName) &#123;</span><br><span class=\"line\">      rule = rules[i];</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rule;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"伪数组和数组\"><a href=\"#伪数组和数组\" class=\"headerlink\" title=\"伪数组和数组\"></a>伪数组和数组</h3><p>在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p>\n<h4 id=\"对象与数组的关系\"><a href=\"#对象与数组的关系\" class=\"headerlink\" title=\"对象与数组的关系\"></a>对象与数组的关系</h4><p>在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。<br>所有 JavaScript 的内置构造函数都是继承自 <code>Object.prototype</code> 。<br>在这个前提下，可以理解为使用 <code>new Array()</code> 或 <code>[]</code> 创建出来的数组对象，都会拥有 <code>Object.prototype</code> 的属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;<span class=\"comment\">// 拥有 Object.prototype 的属性值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"comment\">//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，</span></span><br><span class=\"line\"><span class=\"comment\">//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值</span></span><br></pre></td></tr></table></figure>\n<p>可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。</p>\n<h4 id=\"什么是数组\"><a href=\"#什么是数组\" class=\"headerlink\" title=\"什么是数组\"></a>什么是数组</h4><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"> </span><br><span class=\"line\">obj[<span class=\"number\">2</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj[<span class=\"number\">2</span>]); <span class=\"comment\">// =&gt; a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">2</span>]); <span class=\"comment\">// =&gt; a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.length); <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length); <span class=\"comment\">// =&gt; 3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>obj[2]输出’a’，是因为对象就是普通的键值对存取数据</li>\n<li>而arr[2]输出’a’ 则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据</li>\n<li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li>\n<li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值</li>\n<li>为什么arr.length输出3，而不是1<ul>\n<li>在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"什么是伪数组\"><a href=\"#什么是伪数组\" class=\"headerlink\" title=\"什么是伪数组\"></a>什么是伪数组</h4><ol>\n<li>拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li>\n<li>不具有数组所具有的方法</li>\n</ol>\n<p>伪数组，就是像数组一样有 <code>length</code> 属性，也有 <code>0、1、2、3</code> 等属性的对象，看起来就像数组一样，但不是数组，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fakeArray = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"string\">\"first\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"string\">\"second\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"string\">\"third\"</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; fakeArray.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(fakeArray[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.join.call(fakeArray,<span class=\"string\">'+'</span>);</span><br></pre></td></tr></table></figure>\n<p>常见的伪数组有：</p>\n<ul>\n<li>函数内部的 <code>arguments</code></li>\n<li>DOM 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</li>\n<li>jQuery 对象（比如 <code>$(&quot;div&quot;)</code> ）</li>\n</ul>\n<p>伪数组是一个 Object，而真实的数组是一个 Array。</p>\n<p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(<span class=\"built_in\">arguments</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环arguments对象</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// push</span></span><br><span class=\"line\"><span class=\"comment\">// some</span></span><br><span class=\"line\"><span class=\"comment\">// every</span></span><br><span class=\"line\"><span class=\"comment\">// filter</span></span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">;[].push.call(obj, <span class=\"string\">'d'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([].slice.call(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">;[].forEach.call(obj, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array</li>\n<li>数组是基于索引的实现， length 会自动更新，而对象是键值对</li>\n<li>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法</li>\n</ul>\n<h3 id=\"JavaScript-垃圾回收机制\"><a href=\"#JavaScript-垃圾回收机制\" class=\"headerlink\" title=\"JavaScript 垃圾回收机制\"></a>JavaScript 垃圾回收机制</h3><h3 id=\"JavaScript-运行机制：Event-Loop\"><a href=\"#JavaScript-运行机制：Event-Loop\" class=\"headerlink\" title=\"JavaScript 运行机制：Event Loop\"></a>JavaScript 运行机制：Event Loop</h3><h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><h4 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h4><ul>\n<li>Object.assign()</li>\n<li>Object.create()</li>\n<li>Object.keys()</li>\n<li>Object.defineProperty()</li>\n</ul>\n<h4 id=\"实例成员\"><a href=\"#实例成员\" class=\"headerlink\" title=\"实例成员\"></a>实例成员</h4><ul>\n<li>constructor</li>\n<li>hasOwnProperty()</li>\n<li>isPrototypeOf</li>\n<li>propertyIsEnumerable()</li>\n<li>toString()</li>\n<li>valueOf()</li>\n</ul>\n<hr>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"A-代码规范\"><a href=\"#A-代码规范\" class=\"headerlink\" title=\"A 代码规范\"></a>A 代码规范</h3><h4 id=\"代码风格\"><a href=\"#代码风格\" class=\"headerlink\" title=\"代码风格\"></a>代码风格</h4><ul>\n<li><a href=\"https://github.com/feross/standard\" target=\"_blank\" rel=\"noopener\">JavaScript Standard Style </a></li>\n<li><a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"noopener\">Airbnb JavaScript Style Guide() {</a></li>\n</ul>\n<h4 id=\"校验工具\"><a href=\"#校验工具\" class=\"headerlink\" title=\"校验工具\"></a>校验工具</h4><ul>\n<li><a href=\"https://github.com/douglascrockford/JSLint\" target=\"_blank\" rel=\"noopener\">JSLint</a></li>\n<li><a href=\"https://github.com/jshint/jshint\" target=\"_blank\" rel=\"noopener\">JSHint</a></li>\n<li><a href=\"https://github.com/eslint/eslint\" target=\"_blank\" rel=\"noopener\">ESLint</a></li>\n</ul>\n<h3 id=\"B-Chrome-开发者工具\"><a href=\"#B-Chrome-开发者工具\" class=\"headerlink\" title=\"B Chrome 开发者工具\"></a>B Chrome 开发者工具</h3><h3 id=\"C-文档相关工具\"><a href=\"#C-文档相关工具\" class=\"headerlink\" title=\"C 文档相关工具\"></a>C 文档相关工具</h3><ul>\n<li>电子文档制作工具: <a href=\"https://github.com/egoist/docute\" target=\"_blank\" rel=\"noopener\">docute</a></li>\n<li>流程图工具：<a href=\"http://logicnet.dk/DiagramDesigner/\" target=\"_blank\" rel=\"noopener\">DiagramDesigner</a></li>\n</ul>"},{"title":"图表库ECharts介绍","date":"2017-08-26T11:33:00.000Z","summary_img":"http://p4z3kz4fz.bkt.clouddn.com/snipaste_20180307_114203.png","_content":"## 简介\n\n​\tECharts是百度公司出品的一款非常强大的数据可视化工具，[补充说明，目前已经推出微信小程序](https://github.com/ecomfe/echarts-for-weixin),那么就让我们一起来了解如何使用入门吧。\n\n​\tECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），提供直观，生动，可交互，可高度个性化定制的数据可视化图表。ECharts 提供了常规的折线图，柱状图，散点图，饼图，K线图，用于统计的盒形图，用于地理数据可视化的地图。\n\n<!--more-->\n\n## 官网\n\ngithub: https://github.com/ecomfe/echarts\n\nECharts官网: http://echarts.baidu.com/\n\nstar：23k+\n\n## 步骤\n\n#### 引入js文件\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <!-- 引入 ECharts 文件 -->\n    <script src=\"echarts.min.js\"></script>\n</head>\n</html>\n```\n\n#### 准备一个dom容器\n\n```HTML\n<div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n```\n\n#### 初始化一个实例\n\n```javascript\n<script type=\"text/javascript\">\n        // 基于准备好的dom，初始化echarts实例\n        var myChart = echarts.init(document.getElementById('main'));\n</script>\n```\n\n#### 设置图表的配置项和数据\n\n```javascript\n// 指定图表的配置项和数据\n        var option = {\n            title: {\n                text: 'ECharts 入门示例'\n            },\n            tooltip: {},\n            legend: {\n                data:['销量']\n            },\n            xAxis: {\n                data: [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"]\n            },\n            yAxis: {},\n            series: [{\n                name: '销量',\n                type: 'bar',\n                data: [5, 20, 36, 10, 10, 20]\n            }]\n        };\n```\n\n#### 最后，显示图表\n\n```javascript\nmyChart.setOption(option);\n```\n\n## API\n\n#### echarts\n\n- echarts.init(dom,theme,opts)   实例一个图表对象\n  - dom   实例容器，一般是一个具有高宽的`div`元素。\n  - theme 应用的主题。\n  - opts  可选参数\n    - width  可显式指定实例宽度，单位为像素。如果传入值为 `null`/`undefined`/`auto`，则表示自动取 `dom`（实例容器）的宽度。\n    - height  可显式指定实例高度，单位为像素。如果传入值为 `null`/`undefined`/`'auto'`，则表示自动取 `dom`（实例容器）的高度。\n    - renderer  渲染器\n- echart.connect(group)    多个图表实例实现联动\n  - group  图表实例的 id，或者图表实例的数组。\n- echarts.getInstanceByDom  获取dom容器上的实例\n\n## 图表配置项\n\n- **title**  标题组件\n\n  - text    `string` 主标题文本\n  - link    `string` 主标题文本超链接\n  - target    `string`  超链接打开方式\n    - self   当前窗口\n    - blank   新窗口\n  - subtext    `string`  副标题文本\n  - left/right/top/bottom   距离容器的距离\n\n- **legend**   图例组件\n\n  - type   图例类型\n    - plain    普通图例\n    - scroll  可滚动翻页的图例\n  - orient    图例列表的布局朝向\n    - horizontal\n    - vertical\n  - left/right/top/bottom\n  - data\n  - formatter    格式化图例文本\n\n- **xAxis**  /  **yAxis**\n\n  - name     `string`  坐标轴名称\n  - type    `string`  坐标轴类型\n    - value   竖直轴 适用于连续数据\n    - category 类目轴，适用于离散的类目数据，为这个类型的时候必须使用data来设置类目数据\n    - time   时间轴  适用于连续的时序数据\n    - log   对数轴 适用于对数数据\n  - min   坐标轴刻度最小值\n  - max    坐标轴刻度最大值\n  - inverse    是否反向坐标轴  默认false    ECharts3新添加\n\n- **tooltip**  提示框组件\n\n  - trigger    触发类型\n    - item   主要在散点图，饼图等无类目轴的图表中使用\n    - axis    坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用\n    - none   什么都不触发\n  - triggerOn    提示框触发条件\n    - mouseover\n    - click\n    - mouseover|click\n    - none\n  - confine  是否将提示框限制在图标都区域内  default:false\n\n- **series**   系列列表\n\n  - type 图表类型\n\n    - line    折线图\t\t\t\tbar          柱状图/条形图\n\n      pie     饼图\t\t\t\tscatter    散点图\n\n      map   地图\t\t\t\t...\n\n  - name  系列名称  用于tooltip的显示\n\n  - data    系列中的数据内容数组。数组项通常为具体的数据项。\n\n  - markPoint  图标标记\n\n  - markLine    图表标记线\n\n## 案例(浏览器使用率)：\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n  <script src=\"js/echarts.common.min.js\"></script>\n  <style>\n    #main {\n      width: 600px;\n      height: 400px;\n      margin: 100px auto;\n    }\n  </style>\n</head>\n<body>\n\n<div id=\"main\"></div>\n\n<script>\n  var chart = echarts.init(document.querySelector(\"#main\"));\n\n  var option = {\n    title: {\n      text: \"各浏览器使用量\",\n      subtext: \"纯属虚构\",\n      left: \"center\"\n    },\n    tooltip: {\n      trigger: \"item\",\n      formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n    },\n//    legend: {\n//      orient: \"vertical\",\n//      left: \"left\",\n//      data: [\"张三\",\"王二\",\"找钱\",\"孙俪\",\"周哈\",\"李四\"]\n//    },\n    legend: {\n      orient: 'vertical',\n      left: 'left',\n      data: ['Chrome', 'Firefox', 'IE', 'Opera', 'Safari']\n    },\n    series: [\n      {\n        name: \"浏览器使用比例\",\n        type: \"pie\",\n        radius: \"50%\", //圆形半径 支持百分比 百分比的时候 是相对一容器宽高较小的那项的一半\n        center: [\"50%\", \"50%\"],\n        data: [\n          {value: 50000, name: \"Chrome\"},\n          {value: 35000, name: \"Firefox\"},\n          {value: 10000, name: \"IE\"},\n          {value: 15000, name: \"Opera\"},\n          {value: 20000, name: \"Safari\"}\n        ]\n      }\n    ]\n  }\n  chart.setOption(option);\n</script>\n</body>\n</html>\n```\n\n效果图：\n\n​\t\t\t\t\t<img src=\"http://p4z3kz4fz.bkt.clouddn.com/snipaste_20180307_115013.png\">","source":"_posts/图表库ECharts介绍.md","raw":"---\ntitle: 图表库ECharts介绍\ndate: 2017-8-26 19:33\ntags: ECharts\ncategories: 前端\nsummary_img: http://p4z3kz4fz.bkt.clouddn.com/snipaste_20180307_114203.png\n---\n## 简介\n\n​\tECharts是百度公司出品的一款非常强大的数据可视化工具，[补充说明，目前已经推出微信小程序](https://github.com/ecomfe/echarts-for-weixin),那么就让我们一起来了解如何使用入门吧。\n\n​\tECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），提供直观，生动，可交互，可高度个性化定制的数据可视化图表。ECharts 提供了常规的折线图，柱状图，散点图，饼图，K线图，用于统计的盒形图，用于地理数据可视化的地图。\n\n<!--more-->\n\n## 官网\n\ngithub: https://github.com/ecomfe/echarts\n\nECharts官网: http://echarts.baidu.com/\n\nstar：23k+\n\n## 步骤\n\n#### 引入js文件\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <!-- 引入 ECharts 文件 -->\n    <script src=\"echarts.min.js\"></script>\n</head>\n</html>\n```\n\n#### 准备一个dom容器\n\n```HTML\n<div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n```\n\n#### 初始化一个实例\n\n```javascript\n<script type=\"text/javascript\">\n        // 基于准备好的dom，初始化echarts实例\n        var myChart = echarts.init(document.getElementById('main'));\n</script>\n```\n\n#### 设置图表的配置项和数据\n\n```javascript\n// 指定图表的配置项和数据\n        var option = {\n            title: {\n                text: 'ECharts 入门示例'\n            },\n            tooltip: {},\n            legend: {\n                data:['销量']\n            },\n            xAxis: {\n                data: [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"]\n            },\n            yAxis: {},\n            series: [{\n                name: '销量',\n                type: 'bar',\n                data: [5, 20, 36, 10, 10, 20]\n            }]\n        };\n```\n\n#### 最后，显示图表\n\n```javascript\nmyChart.setOption(option);\n```\n\n## API\n\n#### echarts\n\n- echarts.init(dom,theme,opts)   实例一个图表对象\n  - dom   实例容器，一般是一个具有高宽的`div`元素。\n  - theme 应用的主题。\n  - opts  可选参数\n    - width  可显式指定实例宽度，单位为像素。如果传入值为 `null`/`undefined`/`auto`，则表示自动取 `dom`（实例容器）的宽度。\n    - height  可显式指定实例高度，单位为像素。如果传入值为 `null`/`undefined`/`'auto'`，则表示自动取 `dom`（实例容器）的高度。\n    - renderer  渲染器\n- echart.connect(group)    多个图表实例实现联动\n  - group  图表实例的 id，或者图表实例的数组。\n- echarts.getInstanceByDom  获取dom容器上的实例\n\n## 图表配置项\n\n- **title**  标题组件\n\n  - text    `string` 主标题文本\n  - link    `string` 主标题文本超链接\n  - target    `string`  超链接打开方式\n    - self   当前窗口\n    - blank   新窗口\n  - subtext    `string`  副标题文本\n  - left/right/top/bottom   距离容器的距离\n\n- **legend**   图例组件\n\n  - type   图例类型\n    - plain    普通图例\n    - scroll  可滚动翻页的图例\n  - orient    图例列表的布局朝向\n    - horizontal\n    - vertical\n  - left/right/top/bottom\n  - data\n  - formatter    格式化图例文本\n\n- **xAxis**  /  **yAxis**\n\n  - name     `string`  坐标轴名称\n  - type    `string`  坐标轴类型\n    - value   竖直轴 适用于连续数据\n    - category 类目轴，适用于离散的类目数据，为这个类型的时候必须使用data来设置类目数据\n    - time   时间轴  适用于连续的时序数据\n    - log   对数轴 适用于对数数据\n  - min   坐标轴刻度最小值\n  - max    坐标轴刻度最大值\n  - inverse    是否反向坐标轴  默认false    ECharts3新添加\n\n- **tooltip**  提示框组件\n\n  - trigger    触发类型\n    - item   主要在散点图，饼图等无类目轴的图表中使用\n    - axis    坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用\n    - none   什么都不触发\n  - triggerOn    提示框触发条件\n    - mouseover\n    - click\n    - mouseover|click\n    - none\n  - confine  是否将提示框限制在图标都区域内  default:false\n\n- **series**   系列列表\n\n  - type 图表类型\n\n    - line    折线图\t\t\t\tbar          柱状图/条形图\n\n      pie     饼图\t\t\t\tscatter    散点图\n\n      map   地图\t\t\t\t...\n\n  - name  系列名称  用于tooltip的显示\n\n  - data    系列中的数据内容数组。数组项通常为具体的数据项。\n\n  - markPoint  图标标记\n\n  - markLine    图表标记线\n\n## 案例(浏览器使用率)：\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n  <script src=\"js/echarts.common.min.js\"></script>\n  <style>\n    #main {\n      width: 600px;\n      height: 400px;\n      margin: 100px auto;\n    }\n  </style>\n</head>\n<body>\n\n<div id=\"main\"></div>\n\n<script>\n  var chart = echarts.init(document.querySelector(\"#main\"));\n\n  var option = {\n    title: {\n      text: \"各浏览器使用量\",\n      subtext: \"纯属虚构\",\n      left: \"center\"\n    },\n    tooltip: {\n      trigger: \"item\",\n      formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n    },\n//    legend: {\n//      orient: \"vertical\",\n//      left: \"left\",\n//      data: [\"张三\",\"王二\",\"找钱\",\"孙俪\",\"周哈\",\"李四\"]\n//    },\n    legend: {\n      orient: 'vertical',\n      left: 'left',\n      data: ['Chrome', 'Firefox', 'IE', 'Opera', 'Safari']\n    },\n    series: [\n      {\n        name: \"浏览器使用比例\",\n        type: \"pie\",\n        radius: \"50%\", //圆形半径 支持百分比 百分比的时候 是相对一容器宽高较小的那项的一半\n        center: [\"50%\", \"50%\"],\n        data: [\n          {value: 50000, name: \"Chrome\"},\n          {value: 35000, name: \"Firefox\"},\n          {value: 10000, name: \"IE\"},\n          {value: 15000, name: \"Opera\"},\n          {value: 20000, name: \"Safari\"}\n        ]\n      }\n    ]\n  }\n  chart.setOption(option);\n</script>\n</body>\n</html>\n```\n\n效果图：\n\n​\t\t\t\t\t<img src=\"http://p4z3kz4fz.bkt.clouddn.com/snipaste_20180307_115013.png\">","slug":"图表库ECharts介绍","published":1,"updated":"2018-03-07T03:53:21.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc21000zskrxtaalat25","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>​    ECharts是百度公司出品的一款非常强大的数据可视化工具，<a href=\"https://github.com/ecomfe/echarts-for-weixin\" target=\"_blank\" rel=\"noopener\">补充说明，目前已经推出微信小程序</a>,那么就让我们一起来了解如何使用入门吧。</p>\n<p>​    ECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），提供直观，生动，可交互，可高度个性化定制的数据可视化图表。ECharts 提供了常规的折线图，柱状图，散点图，饼图，K线图，用于统计的盒形图，用于地理数据可视化的地图。</p>\n<a id=\"more\"></a>\n<h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><p>github: <a href=\"https://github.com/ecomfe/echarts\" target=\"_blank\" rel=\"noopener\">https://github.com/ecomfe/echarts</a></p>\n<p>ECharts官网: <a href=\"http://echarts.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://echarts.baidu.com/</a></p>\n<p>star：23k+</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h4 id=\"引入js文件\"><a href=\"#引入js文件\" class=\"headerlink\" title=\"引入js文件\"></a>引入js文件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入 ECharts 文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"echarts.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"准备一个dom容器\"><a href=\"#准备一个dom容器\" class=\"headerlink\" title=\"准备一个dom容器\"></a>准备一个dom容器</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 600px;height:400px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"初始化一个实例\"><a href=\"#初始化一个实例\" class=\"headerlink\" title=\"初始化一个实例\"></a>初始化一个实例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'main'</span>));</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置图表的配置项和数据\"><a href=\"#设置图表的配置项和数据\" class=\"headerlink\" title=\"设置图表的配置项和数据\"></a>设置图表的配置项和数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定图表的配置项和数据</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">            title: &#123;</span><br><span class=\"line\">                text: <span class=\"string\">'ECharts 入门示例'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            tooltip: &#123;&#125;,</span><br><span class=\"line\">            legend: &#123;</span><br><span class=\"line\">                data:[<span class=\"string\">'销量'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            xAxis: &#123;</span><br><span class=\"line\">                data: [<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            yAxis: &#123;&#125;,</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                name: <span class=\"string\">'销量'</span>,</span><br><span class=\"line\">                type: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">                data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后，显示图表\"><a href=\"#最后，显示图表\" class=\"headerlink\" title=\"最后，显示图表\"></a>最后，显示图表</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChart.setOption(option);</span><br></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h4 id=\"echarts\"><a href=\"#echarts\" class=\"headerlink\" title=\"echarts\"></a>echarts</h4><ul>\n<li>echarts.init(dom,theme,opts)   实例一个图表对象<ul>\n<li>dom   实例容器，一般是一个具有高宽的<code>div</code>元素。</li>\n<li>theme 应用的主题。</li>\n<li>opts  可选参数<ul>\n<li>width  可显式指定实例宽度，单位为像素。如果传入值为 <code>null</code>/<code>undefined</code>/<code>auto</code>，则表示自动取 <code>dom</code>（实例容器）的宽度。</li>\n<li>height  可显式指定实例高度，单位为像素。如果传入值为 <code>null</code>/<code>undefined</code>/<code>&#39;auto&#39;</code>，则表示自动取 <code>dom</code>（实例容器）的高度。</li>\n<li>renderer  渲染器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>echart.connect(group)    多个图表实例实现联动<ul>\n<li>group  图表实例的 id，或者图表实例的数组。</li>\n</ul>\n</li>\n<li>echarts.getInstanceByDom  获取dom容器上的实例</li>\n</ul>\n<h2 id=\"图表配置项\"><a href=\"#图表配置项\" class=\"headerlink\" title=\"图表配置项\"></a>图表配置项</h2><ul>\n<li><p><strong>title</strong>  标题组件</p>\n<ul>\n<li>text    <code>string</code> 主标题文本</li>\n<li>link    <code>string</code> 主标题文本超链接</li>\n<li>target    <code>string</code>  超链接打开方式<ul>\n<li>self   当前窗口</li>\n<li>blank   新窗口</li>\n</ul>\n</li>\n<li>subtext    <code>string</code>  副标题文本</li>\n<li>left/right/top/bottom   距离容器的距离</li>\n</ul>\n</li>\n<li><p><strong>legend</strong>   图例组件</p>\n<ul>\n<li>type   图例类型<ul>\n<li>plain    普通图例</li>\n<li>scroll  可滚动翻页的图例</li>\n</ul>\n</li>\n<li>orient    图例列表的布局朝向<ul>\n<li>horizontal</li>\n<li>vertical</li>\n</ul>\n</li>\n<li>left/right/top/bottom</li>\n<li>data</li>\n<li>formatter    格式化图例文本</li>\n</ul>\n</li>\n<li><p><strong>xAxis</strong>  /  <strong>yAxis</strong></p>\n<ul>\n<li>name     <code>string</code>  坐标轴名称</li>\n<li>type    <code>string</code>  坐标轴类型<ul>\n<li>value   竖直轴 适用于连续数据</li>\n<li>category 类目轴，适用于离散的类目数据，为这个类型的时候必须使用data来设置类目数据</li>\n<li>time   时间轴  适用于连续的时序数据</li>\n<li>log   对数轴 适用于对数数据</li>\n</ul>\n</li>\n<li>min   坐标轴刻度最小值</li>\n<li>max    坐标轴刻度最大值</li>\n<li>inverse    是否反向坐标轴  默认false    ECharts3新添加</li>\n</ul>\n</li>\n<li><p><strong>tooltip</strong>  提示框组件</p>\n<ul>\n<li>trigger    触发类型<ul>\n<li>item   主要在散点图，饼图等无类目轴的图表中使用</li>\n<li>axis    坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用</li>\n<li>none   什么都不触发</li>\n</ul>\n</li>\n<li>triggerOn    提示框触发条件<ul>\n<li>mouseover</li>\n<li>click</li>\n<li>mouseover|click</li>\n<li>none</li>\n</ul>\n</li>\n<li>confine  是否将提示框限制在图标都区域内  default:false</li>\n</ul>\n</li>\n<li><p><strong>series</strong>   系列列表</p>\n<ul>\n<li><p>type 图表类型</p>\n<ul>\n<li><p>line    折线图                bar          柱状图/条形图</p>\n<p>pie     饼图                scatter    散点图</p>\n<p>map   地图                …</p>\n</li>\n</ul>\n</li>\n<li><p>name  系列名称  用于tooltip的显示</p>\n</li>\n<li><p>data    系列中的数据内容数组。数组项通常为具体的数据项。</p>\n</li>\n<li><p>markPoint  图标标记</p>\n</li>\n<li><p>markLine    图表标记线</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"案例-浏览器使用率-：\"><a href=\"#案例-浏览器使用率-：\" class=\"headerlink\" title=\"案例(浏览器使用率)：\"></a>案例(浏览器使用率)：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/echarts.common.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#main</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin: 100px auto;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> chart = echarts.init(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#main\"</span>));</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> option = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    title: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      text: <span class=\"string\">\"各浏览器使用量\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      subtext: <span class=\"string\">\"纯属虚构\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      left: <span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    tooltip: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      trigger: <span class=\"string\">\"item\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      formatter: <span class=\"string\">\"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//    legend: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//      orient: \"vertical\",</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//      left: \"left\",</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//      data: [\"张三\",\"王二\",\"找钱\",\"孙俪\",\"周哈\",\"李四\"]</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//    &#125;,</span></span></span><br><span class=\"line\"><span class=\"undefined\">    legend: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      orient: <span class=\"string\">'vertical'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      left: <span class=\"string\">'left'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      data: [<span class=\"string\">'Chrome'</span>, <span class=\"string\">'Firefox'</span>, <span class=\"string\">'IE'</span>, <span class=\"string\">'Opera'</span>, <span class=\"string\">'Safari'</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    series: [</span></span><br><span class=\"line\"><span class=\"undefined\">      &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">\"浏览器使用比例\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"string\">\"pie\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        radius: <span class=\"string\">\"50%\"</span>, <span class=\"comment\">//圆形半径 支持百分比 百分比的时候 是相对一容器宽高较小的那项的一半</span></span></span><br><span class=\"line\"><span class=\"javascript\">        center: [<span class=\"string\">\"50%\"</span>, <span class=\"string\">\"50%\"</span>],</span></span><br><span class=\"line\"><span class=\"undefined\">        data: [</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">50000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Chrome\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">35000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Firefox\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">10000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"IE\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">15000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Opera\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">20000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Safari\"</span>&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        ]</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    ]</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  chart.setOption(option);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p>​                    <img src=\"http://p4z3kz4fz.bkt.clouddn.com/snipaste_20180307_115013.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>​    ECharts是百度公司出品的一款非常强大的数据可视化工具，<a href=\"https://github.com/ecomfe/echarts-for-weixin\" target=\"_blank\" rel=\"noopener\">补充说明，目前已经推出微信小程序</a>,那么就让我们一起来了解如何使用入门吧。</p>\n<p>​    ECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），提供直观，生动，可交互，可高度个性化定制的数据可视化图表。ECharts 提供了常规的折线图，柱状图，散点图，饼图，K线图，用于统计的盒形图，用于地理数据可视化的地图。</p>","more":"<h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><p>github: <a href=\"https://github.com/ecomfe/echarts\" target=\"_blank\" rel=\"noopener\">https://github.com/ecomfe/echarts</a></p>\n<p>ECharts官网: <a href=\"http://echarts.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://echarts.baidu.com/</a></p>\n<p>star：23k+</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h4 id=\"引入js文件\"><a href=\"#引入js文件\" class=\"headerlink\" title=\"引入js文件\"></a>引入js文件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入 ECharts 文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"echarts.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"准备一个dom容器\"><a href=\"#准备一个dom容器\" class=\"headerlink\" title=\"准备一个dom容器\"></a>准备一个dom容器</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 600px;height:400px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"初始化一个实例\"><a href=\"#初始化一个实例\" class=\"headerlink\" title=\"初始化一个实例\"></a>初始化一个实例</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'main'</span>));</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置图表的配置项和数据\"><a href=\"#设置图表的配置项和数据\" class=\"headerlink\" title=\"设置图表的配置项和数据\"></a>设置图表的配置项和数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定图表的配置项和数据</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">            title: &#123;</span><br><span class=\"line\">                text: <span class=\"string\">'ECharts 入门示例'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            tooltip: &#123;&#125;,</span><br><span class=\"line\">            legend: &#123;</span><br><span class=\"line\">                data:[<span class=\"string\">'销量'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            xAxis: &#123;</span><br><span class=\"line\">                data: [<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            yAxis: &#123;&#125;,</span><br><span class=\"line\">            series: [&#123;</span><br><span class=\"line\">                name: <span class=\"string\">'销量'</span>,</span><br><span class=\"line\">                type: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">                data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后，显示图表\"><a href=\"#最后，显示图表\" class=\"headerlink\" title=\"最后，显示图表\"></a>最后，显示图表</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChart.setOption(option);</span><br></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h4 id=\"echarts\"><a href=\"#echarts\" class=\"headerlink\" title=\"echarts\"></a>echarts</h4><ul>\n<li>echarts.init(dom,theme,opts)   实例一个图表对象<ul>\n<li>dom   实例容器，一般是一个具有高宽的<code>div</code>元素。</li>\n<li>theme 应用的主题。</li>\n<li>opts  可选参数<ul>\n<li>width  可显式指定实例宽度，单位为像素。如果传入值为 <code>null</code>/<code>undefined</code>/<code>auto</code>，则表示自动取 <code>dom</code>（实例容器）的宽度。</li>\n<li>height  可显式指定实例高度，单位为像素。如果传入值为 <code>null</code>/<code>undefined</code>/<code>&#39;auto&#39;</code>，则表示自动取 <code>dom</code>（实例容器）的高度。</li>\n<li>renderer  渲染器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>echart.connect(group)    多个图表实例实现联动<ul>\n<li>group  图表实例的 id，或者图表实例的数组。</li>\n</ul>\n</li>\n<li>echarts.getInstanceByDom  获取dom容器上的实例</li>\n</ul>\n<h2 id=\"图表配置项\"><a href=\"#图表配置项\" class=\"headerlink\" title=\"图表配置项\"></a>图表配置项</h2><ul>\n<li><p><strong>title</strong>  标题组件</p>\n<ul>\n<li>text    <code>string</code> 主标题文本</li>\n<li>link    <code>string</code> 主标题文本超链接</li>\n<li>target    <code>string</code>  超链接打开方式<ul>\n<li>self   当前窗口</li>\n<li>blank   新窗口</li>\n</ul>\n</li>\n<li>subtext    <code>string</code>  副标题文本</li>\n<li>left/right/top/bottom   距离容器的距离</li>\n</ul>\n</li>\n<li><p><strong>legend</strong>   图例组件</p>\n<ul>\n<li>type   图例类型<ul>\n<li>plain    普通图例</li>\n<li>scroll  可滚动翻页的图例</li>\n</ul>\n</li>\n<li>orient    图例列表的布局朝向<ul>\n<li>horizontal</li>\n<li>vertical</li>\n</ul>\n</li>\n<li>left/right/top/bottom</li>\n<li>data</li>\n<li>formatter    格式化图例文本</li>\n</ul>\n</li>\n<li><p><strong>xAxis</strong>  /  <strong>yAxis</strong></p>\n<ul>\n<li>name     <code>string</code>  坐标轴名称</li>\n<li>type    <code>string</code>  坐标轴类型<ul>\n<li>value   竖直轴 适用于连续数据</li>\n<li>category 类目轴，适用于离散的类目数据，为这个类型的时候必须使用data来设置类目数据</li>\n<li>time   时间轴  适用于连续的时序数据</li>\n<li>log   对数轴 适用于对数数据</li>\n</ul>\n</li>\n<li>min   坐标轴刻度最小值</li>\n<li>max    坐标轴刻度最大值</li>\n<li>inverse    是否反向坐标轴  默认false    ECharts3新添加</li>\n</ul>\n</li>\n<li><p><strong>tooltip</strong>  提示框组件</p>\n<ul>\n<li>trigger    触发类型<ul>\n<li>item   主要在散点图，饼图等无类目轴的图表中使用</li>\n<li>axis    坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用</li>\n<li>none   什么都不触发</li>\n</ul>\n</li>\n<li>triggerOn    提示框触发条件<ul>\n<li>mouseover</li>\n<li>click</li>\n<li>mouseover|click</li>\n<li>none</li>\n</ul>\n</li>\n<li>confine  是否将提示框限制在图标都区域内  default:false</li>\n</ul>\n</li>\n<li><p><strong>series</strong>   系列列表</p>\n<ul>\n<li><p>type 图表类型</p>\n<ul>\n<li><p>line    折线图                bar          柱状图/条形图</p>\n<p>pie     饼图                scatter    散点图</p>\n<p>map   地图                …</p>\n</li>\n</ul>\n</li>\n<li><p>name  系列名称  用于tooltip的显示</p>\n</li>\n<li><p>data    系列中的数据内容数组。数组项通常为具体的数据项。</p>\n</li>\n<li><p>markPoint  图标标记</p>\n</li>\n<li><p>markLine    图表标记线</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"案例-浏览器使用率-：\"><a href=\"#案例-浏览器使用率-：\" class=\"headerlink\" title=\"案例(浏览器使用率)：\"></a>案例(浏览器使用率)：</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/echarts.common.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#main</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      width: 600px;</span></span><br><span class=\"line\"><span class=\"undefined\">      height: 400px;</span></span><br><span class=\"line\"><span class=\"undefined\">      margin: 100px auto;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> chart = echarts.init(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#main\"</span>));</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> option = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    title: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      text: <span class=\"string\">\"各浏览器使用量\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      subtext: <span class=\"string\">\"纯属虚构\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      left: <span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    tooltip: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      trigger: <span class=\"string\">\"item\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      formatter: <span class=\"string\">\"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//    legend: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//      orient: \"vertical\",</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//      left: \"left\",</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//      data: [\"张三\",\"王二\",\"找钱\",\"孙俪\",\"周哈\",\"李四\"]</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//    &#125;,</span></span></span><br><span class=\"line\"><span class=\"undefined\">    legend: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      orient: <span class=\"string\">'vertical'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      left: <span class=\"string\">'left'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      data: [<span class=\"string\">'Chrome'</span>, <span class=\"string\">'Firefox'</span>, <span class=\"string\">'IE'</span>, <span class=\"string\">'Opera'</span>, <span class=\"string\">'Safari'</span>]</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    series: [</span></span><br><span class=\"line\"><span class=\"undefined\">      &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        name: <span class=\"string\">\"浏览器使用比例\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"string\">\"pie\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        radius: <span class=\"string\">\"50%\"</span>, <span class=\"comment\">//圆形半径 支持百分比 百分比的时候 是相对一容器宽高较小的那项的一半</span></span></span><br><span class=\"line\"><span class=\"javascript\">        center: [<span class=\"string\">\"50%\"</span>, <span class=\"string\">\"50%\"</span>],</span></span><br><span class=\"line\"><span class=\"undefined\">        data: [</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">50000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Chrome\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">35000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Firefox\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">10000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"IE\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">15000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Opera\"</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;<span class=\"attr\">value</span>: <span class=\"number\">20000</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"Safari\"</span>&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        ]</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    ]</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  chart.setOption(option);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p>​                    <img src=\"http://p4z3kz4fz.bkt.clouddn.com/snipaste_20180307_115013.png\"></p>"},{"title":"提高js性能技巧","date":"2017-06-01T06:32:00.000Z","summary_img":"http://p57ao19ex.bkt.clouddn.com/js3.jpg","_content":"## 提高JS性能的技巧\n\n### 1评估局部变量\n\n\t主要针对IE而言，由于局部变量的查找是从最特定作用域到最大作用域，且可以通过多个域层级，所以这种查找会导致查询到通用的结果。在定义函数作用域的时候，如果一个局部变量在之前没有进行过var变量声明， 那么此处一定要在变量名前加上var关键字以定义其当前的作用域和防止查询，从而提高代码的速度。\n<!--more-->\n\n### 2.除非必要，否则不要使用嵌套循环\n\n\t减少不必要的循环，例如 for 和 while 循环，以保持 JavaScript 的线性，并避免需要遍历数千个对象。无用的循环可能会导致浏览器处理代码时更困难，从而减缓速度。\n### 3.缓存对象以提高性能\n\n\t很多时候，会重复使用脚本来访问某个对象。 将重复访问的对象存储在用户定义的变量中，并且之后在引用该对象时使用此变量，可以立刻实现性能提升。\n### 4.使用.js文件来缓存脚本\n\n\t使用这种技术可以实现性能提升，因为它允许浏览器只加载脚本一次，当页面被重新加载或重新访问时只需要从缓存中调用脚本即可。\n### 5.使用Gzip压缩文件\n\n\t使用 GZip 可以明显地降低 JavaScript 文件的大小，节省带宽，并加快响应时间。 有时 JavaScript 文件非常大，如果没有经过压缩，它可能会造成网站瘫痪。较小的文件能提供更快、更令人满意的网页体验。\n### 6.尽量减少对HTTP的请求\n\n\t通过结合外部文件和直接在 XHTML 页面中嵌入 JavaScript 来尽量减少对 HTTP 返回页面的请求。 每一个特定的 HTTP 请求传输至服务器端都会导致大量的时延。\n### 7.不要重复使用相同的脚本\n\n\t复的脚本对性能会造成显著的影响。重复的脚本会创建不需要的HTTP请求，尤其是在IE浏览器中。在HTML页面中使用脚本标签，可以帮助避免意外地生成重复的脚本。\n### 8.缩短作用域链\n\n\t全局作用域通常较慢，因为每次执行函数的时候，它会引发创建一个临时的调用作用域，JavaScript 会在作用域链中搜索第一个对象，如果找不到该变量，则会遍历链直到搜索到全局对象。\n### 9.使用函数内联\n\n\t函数内联有助于减少函数调用的成本，并用被调用的函数体替换函数调用。 在 JavaScript 中执行函数调用是一个高成本的操作，因为需要执行几个准备步骤：为参数分配空间，复制参数以及解析函数名称。\n\n\n### 10.尽量不要使用全局变量\n\n\t由于脚本引擎需要搜索作用域，所以当从函数内部或其他作用域内引用全局变量时，如果局部作用域丢失，全局变量将被销毁。如果全局作用域中的变量并不一直存在于脚本的生命周期，则可以提升性能。\n### 11.不要一直保留对其他文档的引用\n\n\t当脚本结束后不再保留对其他文档的引用可以实现更快的性能。因为对其他文档中的对象进行的任何引用不会被保存在整个 DOM 树中，并且脚本环境也不会一直保留在内存中。 因此文档本身不用再被加载。\n### 12.不要误用 for-in\n\n\t由于“for-in”循环需要脚本引擎构建包含所有可枚举属性的列表，因此 for 循环内的代码是不会修改这个列表的。 在 for 循环内部，预先计算出列表的长度并赋给变量 len，然后进行迭代。","source":"_posts/提高js性能技巧.md","raw":"---\ntitle: 提高js性能技巧\ndate: 2017-6-01 14:32\ntags: js\ncategories: 前端\nsummary_img: http://p57ao19ex.bkt.clouddn.com/js3.jpg\n---\n## 提高JS性能的技巧\n\n### 1评估局部变量\n\n\t主要针对IE而言，由于局部变量的查找是从最特定作用域到最大作用域，且可以通过多个域层级，所以这种查找会导致查询到通用的结果。在定义函数作用域的时候，如果一个局部变量在之前没有进行过var变量声明， 那么此处一定要在变量名前加上var关键字以定义其当前的作用域和防止查询，从而提高代码的速度。\n<!--more-->\n\n### 2.除非必要，否则不要使用嵌套循环\n\n\t减少不必要的循环，例如 for 和 while 循环，以保持 JavaScript 的线性，并避免需要遍历数千个对象。无用的循环可能会导致浏览器处理代码时更困难，从而减缓速度。\n### 3.缓存对象以提高性能\n\n\t很多时候，会重复使用脚本来访问某个对象。 将重复访问的对象存储在用户定义的变量中，并且之后在引用该对象时使用此变量，可以立刻实现性能提升。\n### 4.使用.js文件来缓存脚本\n\n\t使用这种技术可以实现性能提升，因为它允许浏览器只加载脚本一次，当页面被重新加载或重新访问时只需要从缓存中调用脚本即可。\n### 5.使用Gzip压缩文件\n\n\t使用 GZip 可以明显地降低 JavaScript 文件的大小，节省带宽，并加快响应时间。 有时 JavaScript 文件非常大，如果没有经过压缩，它可能会造成网站瘫痪。较小的文件能提供更快、更令人满意的网页体验。\n### 6.尽量减少对HTTP的请求\n\n\t通过结合外部文件和直接在 XHTML 页面中嵌入 JavaScript 来尽量减少对 HTTP 返回页面的请求。 每一个特定的 HTTP 请求传输至服务器端都会导致大量的时延。\n### 7.不要重复使用相同的脚本\n\n\t复的脚本对性能会造成显著的影响。重复的脚本会创建不需要的HTTP请求，尤其是在IE浏览器中。在HTML页面中使用脚本标签，可以帮助避免意外地生成重复的脚本。\n### 8.缩短作用域链\n\n\t全局作用域通常较慢，因为每次执行函数的时候，它会引发创建一个临时的调用作用域，JavaScript 会在作用域链中搜索第一个对象，如果找不到该变量，则会遍历链直到搜索到全局对象。\n### 9.使用函数内联\n\n\t函数内联有助于减少函数调用的成本，并用被调用的函数体替换函数调用。 在 JavaScript 中执行函数调用是一个高成本的操作，因为需要执行几个准备步骤：为参数分配空间，复制参数以及解析函数名称。\n\n\n### 10.尽量不要使用全局变量\n\n\t由于脚本引擎需要搜索作用域，所以当从函数内部或其他作用域内引用全局变量时，如果局部作用域丢失，全局变量将被销毁。如果全局作用域中的变量并不一直存在于脚本的生命周期，则可以提升性能。\n### 11.不要一直保留对其他文档的引用\n\n\t当脚本结束后不再保留对其他文档的引用可以实现更快的性能。因为对其他文档中的对象进行的任何引用不会被保存在整个 DOM 树中，并且脚本环境也不会一直保留在内存中。 因此文档本身不用再被加载。\n### 12.不要误用 for-in\n\n\t由于“for-in”循环需要脚本引擎构建包含所有可枚举属性的列表，因此 for 循环内的代码是不会修改这个列表的。 在 for 循环内部，预先计算出列表的长度并赋给变量 len，然后进行迭代。","slug":"提高js性能技巧","published":1,"updated":"2018-03-07T03:37:50.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc250012skrxpulwwkkg","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><h2 id=\"提高JS性能的技巧\"><a href=\"#提高JS性能的技巧\" class=\"headerlink\" title=\"提高JS性能的技巧\"></a>提高JS性能的技巧</h2><h3 id=\"1评估局部变量\"><a href=\"#1评估局部变量\" class=\"headerlink\" title=\"1评估局部变量\"></a>1评估局部变量</h3><pre><code>主要针对IE而言，由于局部变量的查找是从最特定作用域到最大作用域，且可以通过多个域层级，所以这种查找会导致查询到通用的结果。在定义函数作用域的时候，如果一个局部变量在之前没有进行过var变量声明， 那么此处一定要在变量名前加上var关键字以定义其当前的作用域和防止查询，从而提高代码的速度。\n</code></pre><a id=\"more\"></a>\n<h3 id=\"2-除非必要，否则不要使用嵌套循环\"><a href=\"#2-除非必要，否则不要使用嵌套循环\" class=\"headerlink\" title=\"2.除非必要，否则不要使用嵌套循环\"></a>2.除非必要，否则不要使用嵌套循环</h3><pre><code>减少不必要的循环，例如 for 和 while 循环，以保持 JavaScript 的线性，并避免需要遍历数千个对象。无用的循环可能会导致浏览器处理代码时更困难，从而减缓速度。\n</code></pre><h3 id=\"3-缓存对象以提高性能\"><a href=\"#3-缓存对象以提高性能\" class=\"headerlink\" title=\"3.缓存对象以提高性能\"></a>3.缓存对象以提高性能</h3><pre><code>很多时候，会重复使用脚本来访问某个对象。 将重复访问的对象存储在用户定义的变量中，并且之后在引用该对象时使用此变量，可以立刻实现性能提升。\n</code></pre><h3 id=\"4-使用-js文件来缓存脚本\"><a href=\"#4-使用-js文件来缓存脚本\" class=\"headerlink\" title=\"4.使用.js文件来缓存脚本\"></a>4.使用.js文件来缓存脚本</h3><pre><code>使用这种技术可以实现性能提升，因为它允许浏览器只加载脚本一次，当页面被重新加载或重新访问时只需要从缓存中调用脚本即可。\n</code></pre><h3 id=\"5-使用Gzip压缩文件\"><a href=\"#5-使用Gzip压缩文件\" class=\"headerlink\" title=\"5.使用Gzip压缩文件\"></a>5.使用Gzip压缩文件</h3><pre><code>使用 GZip 可以明显地降低 JavaScript 文件的大小，节省带宽，并加快响应时间。 有时 JavaScript 文件非常大，如果没有经过压缩，它可能会造成网站瘫痪。较小的文件能提供更快、更令人满意的网页体验。\n</code></pre><h3 id=\"6-尽量减少对HTTP的请求\"><a href=\"#6-尽量减少对HTTP的请求\" class=\"headerlink\" title=\"6.尽量减少对HTTP的请求\"></a>6.尽量减少对HTTP的请求</h3><pre><code>通过结合外部文件和直接在 XHTML 页面中嵌入 JavaScript 来尽量减少对 HTTP 返回页面的请求。 每一个特定的 HTTP 请求传输至服务器端都会导致大量的时延。\n</code></pre><h3 id=\"7-不要重复使用相同的脚本\"><a href=\"#7-不要重复使用相同的脚本\" class=\"headerlink\" title=\"7.不要重复使用相同的脚本\"></a>7.不要重复使用相同的脚本</h3><pre><code>复的脚本对性能会造成显著的影响。重复的脚本会创建不需要的HTTP请求，尤其是在IE浏览器中。在HTML页面中使用脚本标签，可以帮助避免意外地生成重复的脚本。\n</code></pre><h3 id=\"8-缩短作用域链\"><a href=\"#8-缩短作用域链\" class=\"headerlink\" title=\"8.缩短作用域链\"></a>8.缩短作用域链</h3><pre><code>全局作用域通常较慢，因为每次执行函数的时候，它会引发创建一个临时的调用作用域，JavaScript 会在作用域链中搜索第一个对象，如果找不到该变量，则会遍历链直到搜索到全局对象。\n</code></pre><h3 id=\"9-使用函数内联\"><a href=\"#9-使用函数内联\" class=\"headerlink\" title=\"9.使用函数内联\"></a>9.使用函数内联</h3><pre><code>函数内联有助于减少函数调用的成本，并用被调用的函数体替换函数调用。 在 JavaScript 中执行函数调用是一个高成本的操作，因为需要执行几个准备步骤：为参数分配空间，复制参数以及解析函数名称。\n</code></pre><h3 id=\"10-尽量不要使用全局变量\"><a href=\"#10-尽量不要使用全局变量\" class=\"headerlink\" title=\"10.尽量不要使用全局变量\"></a>10.尽量不要使用全局变量</h3><pre><code>由于脚本引擎需要搜索作用域，所以当从函数内部或其他作用域内引用全局变量时，如果局部作用域丢失，全局变量将被销毁。如果全局作用域中的变量并不一直存在于脚本的生命周期，则可以提升性能。\n</code></pre><h3 id=\"11-不要一直保留对其他文档的引用\"><a href=\"#11-不要一直保留对其他文档的引用\" class=\"headerlink\" title=\"11.不要一直保留对其他文档的引用\"></a>11.不要一直保留对其他文档的引用</h3><pre><code>当脚本结束后不再保留对其他文档的引用可以实现更快的性能。因为对其他文档中的对象进行的任何引用不会被保存在整个 DOM 树中，并且脚本环境也不会一直保留在内存中。 因此文档本身不用再被加载。\n</code></pre><h3 id=\"12-不要误用-for-in\"><a href=\"#12-不要误用-for-in\" class=\"headerlink\" title=\"12.不要误用 for-in\"></a>12.不要误用 for-in</h3><pre><code>由于“for-in”循环需要脚本引擎构建包含所有可枚举属性的列表，因此 for 循环内的代码是不会修改这个列表的。 在 for 循环内部，预先计算出列表的长度并赋给变量 len，然后进行迭代。\n</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"提高JS性能的技巧\"><a href=\"#提高JS性能的技巧\" class=\"headerlink\" title=\"提高JS性能的技巧\"></a>提高JS性能的技巧</h2><h3 id=\"1评估局部变量\"><a href=\"#1评估局部变量\" class=\"headerlink\" title=\"1评估局部变量\"></a>1评估局部变量</h3><pre><code>主要针对IE而言，由于局部变量的查找是从最特定作用域到最大作用域，且可以通过多个域层级，所以这种查找会导致查询到通用的结果。在定义函数作用域的时候，如果一个局部变量在之前没有进行过var变量声明， 那么此处一定要在变量名前加上var关键字以定义其当前的作用域和防止查询，从而提高代码的速度。\n</code></pre>","more":"<h3 id=\"2-除非必要，否则不要使用嵌套循环\"><a href=\"#2-除非必要，否则不要使用嵌套循环\" class=\"headerlink\" title=\"2.除非必要，否则不要使用嵌套循环\"></a>2.除非必要，否则不要使用嵌套循环</h3><pre><code>减少不必要的循环，例如 for 和 while 循环，以保持 JavaScript 的线性，并避免需要遍历数千个对象。无用的循环可能会导致浏览器处理代码时更困难，从而减缓速度。\n</code></pre><h3 id=\"3-缓存对象以提高性能\"><a href=\"#3-缓存对象以提高性能\" class=\"headerlink\" title=\"3.缓存对象以提高性能\"></a>3.缓存对象以提高性能</h3><pre><code>很多时候，会重复使用脚本来访问某个对象。 将重复访问的对象存储在用户定义的变量中，并且之后在引用该对象时使用此变量，可以立刻实现性能提升。\n</code></pre><h3 id=\"4-使用-js文件来缓存脚本\"><a href=\"#4-使用-js文件来缓存脚本\" class=\"headerlink\" title=\"4.使用.js文件来缓存脚本\"></a>4.使用.js文件来缓存脚本</h3><pre><code>使用这种技术可以实现性能提升，因为它允许浏览器只加载脚本一次，当页面被重新加载或重新访问时只需要从缓存中调用脚本即可。\n</code></pre><h3 id=\"5-使用Gzip压缩文件\"><a href=\"#5-使用Gzip压缩文件\" class=\"headerlink\" title=\"5.使用Gzip压缩文件\"></a>5.使用Gzip压缩文件</h3><pre><code>使用 GZip 可以明显地降低 JavaScript 文件的大小，节省带宽，并加快响应时间。 有时 JavaScript 文件非常大，如果没有经过压缩，它可能会造成网站瘫痪。较小的文件能提供更快、更令人满意的网页体验。\n</code></pre><h3 id=\"6-尽量减少对HTTP的请求\"><a href=\"#6-尽量减少对HTTP的请求\" class=\"headerlink\" title=\"6.尽量减少对HTTP的请求\"></a>6.尽量减少对HTTP的请求</h3><pre><code>通过结合外部文件和直接在 XHTML 页面中嵌入 JavaScript 来尽量减少对 HTTP 返回页面的请求。 每一个特定的 HTTP 请求传输至服务器端都会导致大量的时延。\n</code></pre><h3 id=\"7-不要重复使用相同的脚本\"><a href=\"#7-不要重复使用相同的脚本\" class=\"headerlink\" title=\"7.不要重复使用相同的脚本\"></a>7.不要重复使用相同的脚本</h3><pre><code>复的脚本对性能会造成显著的影响。重复的脚本会创建不需要的HTTP请求，尤其是在IE浏览器中。在HTML页面中使用脚本标签，可以帮助避免意外地生成重复的脚本。\n</code></pre><h3 id=\"8-缩短作用域链\"><a href=\"#8-缩短作用域链\" class=\"headerlink\" title=\"8.缩短作用域链\"></a>8.缩短作用域链</h3><pre><code>全局作用域通常较慢，因为每次执行函数的时候，它会引发创建一个临时的调用作用域，JavaScript 会在作用域链中搜索第一个对象，如果找不到该变量，则会遍历链直到搜索到全局对象。\n</code></pre><h3 id=\"9-使用函数内联\"><a href=\"#9-使用函数内联\" class=\"headerlink\" title=\"9.使用函数内联\"></a>9.使用函数内联</h3><pre><code>函数内联有助于减少函数调用的成本，并用被调用的函数体替换函数调用。 在 JavaScript 中执行函数调用是一个高成本的操作，因为需要执行几个准备步骤：为参数分配空间，复制参数以及解析函数名称。\n</code></pre><h3 id=\"10-尽量不要使用全局变量\"><a href=\"#10-尽量不要使用全局变量\" class=\"headerlink\" title=\"10.尽量不要使用全局变量\"></a>10.尽量不要使用全局变量</h3><pre><code>由于脚本引擎需要搜索作用域，所以当从函数内部或其他作用域内引用全局变量时，如果局部作用域丢失，全局变量将被销毁。如果全局作用域中的变量并不一直存在于脚本的生命周期，则可以提升性能。\n</code></pre><h3 id=\"11-不要一直保留对其他文档的引用\"><a href=\"#11-不要一直保留对其他文档的引用\" class=\"headerlink\" title=\"11.不要一直保留对其他文档的引用\"></a>11.不要一直保留对其他文档的引用</h3><pre><code>当脚本结束后不再保留对其他文档的引用可以实现更快的性能。因为对其他文档中的对象进行的任何引用不会被保存在整个 DOM 树中，并且脚本环境也不会一直保留在内存中。 因此文档本身不用再被加载。\n</code></pre><h3 id=\"12-不要误用-for-in\"><a href=\"#12-不要误用-for-in\" class=\"headerlink\" title=\"12.不要误用 for-in\"></a>12.不要误用 for-in</h3><pre><code>由于“for-in”循环需要脚本引擎构建包含所有可枚举属性的列表，因此 for 循环内的代码是不会修改这个列表的。 在 for 循环内部，预先计算出列表的长度并赋给变量 len，然后进行迭代。\n</code></pre>"},{"title":"浅析node(二)","date":"2018-02-13T02:54:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/node2.jpg","_content":"关于node的常见知识点札记\n\n- 同步和异步的对比【非阻塞I/O和阻塞I/O】\n\n  异步读取文件\n\n  异步嵌套读取文件\n\n  同步读取文件\n\n  异步和同步操作中，捕获错误的方式\n\n  <!--more-->\n\n  Node 中的模块化\n\n  什么是程序开发中的模块及好处\n\n  - 什么是程序开发中的模块化：把一些功能类似的代码，封装到一个单独的文件中去，这些单独抽离出来的代码文件，就能够提供各种各样好用的功能；这种通过代码功能分割文件的方式，叫做程序中的模块化；\n\n  - 好处：保证了每个文件的功能（职能）单一；需要什么特定的功能，直接调用某一个特定的模块；对将来程序开发和维护都有好处！\n\n\n  Node 中如何实现模块化\n\n  在Node中通过三个东西实现模块化：\n\n-   module：表示一个模块，在Node中，最常见的模块，就是一个个的JS文件！\n  - require：作用是加载其他模块用的；在一个JS文件中，如何引用其他JS文件中的成员呢？就是用require\n  - exports：在Node的模块中，如果这个模块需要向外暴露一些成员，供其他JS模块使用，那么，需要使用exports向外暴露这些成员！\n\n  Node 中的模块化，主要解决的JS文件之间的相互依赖关系！\n\n  Node 中的模块的分类\n\n  node由三部分组成：ECMAScript + 核心API + 第三方等API\n\n  核心模块\n\n  - 什么是核心模块：官方，发现一些功能模块使用非常频繁，然后，官方把这些模块，编译成了二进制可执行文件，然后打包到了Node的安装包中；所以，这些核心模块就已经随着安装Node时候，被安装到了本地；\n  - 如何使用核心模块\n    使用require（‘核心模块的名称’）；\n\n  第三方模块\n\n  - 什么是第三方模块：出了官方提供的好用的核心模块之外，我们程序员发现，还有一些使用也很频繁的代码和方法，一些牛逼的团体、个人、公司，开发出了好用的模块，通过NPM官网，托管出去，供其他人下载使用的这些模块；统称为第三方模块；\n  - 如何使用第三方模块\n    －　通过moment这个第三方模块，来介绍如何使用一个第三方模块；\n  - 第三方模块的使用方式：\n\n  1. 先使用npm下载这个模块！【注意：在安装第三方模块的时候，安装的名字，就是你在require时候导入的名字】\n  2. 使用require导入这个第三方模块！\n  3. 通过官方文档，试着去使用这个第三方模块！\n  4. 注意：无论是核心模块、还是第三方模块，都是通过 标识符名称来引用这个模块的！\n\n  用户模块\n\n  - 什么是用户模块：程序员自己定义的JS文件，统统数据用户模块！\n  - 用户模块向外导出成员的两种方式：\n\n  - 第一种方式：使用global对象，相当于浏览器中的window对象\n    - 1. 全局变量污染，\n    - 1. 不知道成员是从哪个模块中暴露 出去的\n  - 推荐Node提供的exports\n\n  exports 和 module.exports 的区别\n\n  1. 通过 module.exports 可以使用 . 的形式追加属性，也可以使用 等号 直接赋值的形式导出成员；\n  2. exports 只能通过 . 的形式追加属性；不能使用 等号 直接赋值的形式！\n  3. 注意： 在一个 module 中，最终向外暴露的成员，以 module.exports 指向的对象为准！\n  4. 在一个模块中，不要混合使用 module.exports 和 exports\n\n  模块加载规则\n\n  1. 优先从缓存中加载\n  2. 加载核心模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载核心模块！\n  3. 自己的模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载用户模块！\n\n  - 用户模块的查找规则：\n\n      用户模块的查找规则：\n      如果不写后缀名，则先严格按照给定的文件名去查找模块并加载执行；\n      index   ->  index.js  ->   index.json    ->  index.node\n\n  1. 第三方模块查找规则：\n     1. node首先，查看项目根目录中有没有 node_modules 文件夹\n     2. 查找 node_modules 文件夹中，有没有和第三方模块名称一致的文件夹\n     3. 在模块对应的文件夹中，查找有没有 package.json 这个文件\n     4. 在 package.json 文件中，查找有没有 main 属性\n     5. 如果有 main 属性，并且 main 属性指向的路径存在，那么就尝试加载这个路径指定的文件！\n     6. 如果 package.json 文件中，没有 main 属性，或者 main 属性指向的路径不存在，或者没有package.json 文件， 那么，Node尝试加载 模块根目录中 index 相关文件：index.js -> index.json -> index.node\n     7. 如果在node_modules文件夹中，找不到对应的模块文件夹，或者在项目根目录中根本没有node_modules文件夹，则向上一层文件夹中去查找，查找规则同上！\n     8. 如果上一层目录中也没有查找到，则再向上翻一层去查找，直到找到当前项目所在的盘符根目录为止！\n     9. 如果找到了盘符根目录还找不到，则报错：cannot find module ***\n\n  只安装部署依赖项不安装开发工具\n\n      npm i --production\n\n  模块化\n\n  1. node中的模块化基于commonJS:最显著的特点所有依赖项都是同步加载的！！！\n  2. commonJS由于是一个同步加载规范，所以不适合浏览器端使用；于是，浏览器端需要使用异步的模块加载机制\n  3. AMD、CMD\n\n  结合art-template模板引擎在服务器端渲染页面\n\n  art-template官方文档\n\n  服务端渲染和客户端渲染的对比\n\n  博客园官网\n\n  1. 服务器端渲染\n\n  - 特点：Node服务器先读取模板页面，再获取要渲染的数据，然后直接在服务器端把完整的页面渲染拼接好，然后通过网络一次性的把结果发送给浏览器去显示！【注意：通过服务器端渲染，在网络中传输的是一个真正页面】\n  - 优点：请求次数少，速度快，对SEO友好\n  - 缺点：服务器渲染压力大【在后端可以通过缓存机制去解决】\n\n  1. 客户端渲染\n\n  - 特点：先访问服务器获取到模板页面，然后再通过Ajax获取要渲染的数据，拿到这两者之后，再客户端调用模板引擎，渲染得到模板字符串，然后通过JS的方式，把结果展示到页面上！【真正的页面是在客户端浏览器中怼出来的，在进行网络传输的时候，第一次传输的是模板页面，第二次传输的是数据】\n  - 优点：减轻了服务器端的渲染压力\n  - 缺点：请求次数多，用户体验可能没有服务器端渲染好（白屏效果）；对SEO不友好\n\n  使用nodemon来自动重启Node服务\n\n  1. 运行npm i nodemon -g全局安装模块\n  2. 使用方式 和 node 完全一样：\n\n  - node 要执行文件的路径\n  - nodemon 要执行文件的路径\n\n  文件列表小案例\n\n  获取文件的属性\n\n  在优化前, 先封装一个根据指定路径读取文件内容的方法【重点】\n\n  将读取文件夹的方法抽离出来，同时对error进行处理【重点】\n\n  相关文章\n\n  1. art-template 官方文档\n  2. ES6 - 模板字符串\n  3. js中的数组对象排序\n  4. i5ting/tocmd.npm 将MD转换为HTML","source":"_posts/浅析nodejs(二).md","raw":"---\ntitle: 浅析node(二)\ndate: 2018-2-13 10:54\ntags: node\ncategories: node\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/node2.jpg\n---\n关于node的常见知识点札记\n\n- 同步和异步的对比【非阻塞I/O和阻塞I/O】\n\n  异步读取文件\n\n  异步嵌套读取文件\n\n  同步读取文件\n\n  异步和同步操作中，捕获错误的方式\n\n  <!--more-->\n\n  Node 中的模块化\n\n  什么是程序开发中的模块及好处\n\n  - 什么是程序开发中的模块化：把一些功能类似的代码，封装到一个单独的文件中去，这些单独抽离出来的代码文件，就能够提供各种各样好用的功能；这种通过代码功能分割文件的方式，叫做程序中的模块化；\n\n  - 好处：保证了每个文件的功能（职能）单一；需要什么特定的功能，直接调用某一个特定的模块；对将来程序开发和维护都有好处！\n\n\n  Node 中如何实现模块化\n\n  在Node中通过三个东西实现模块化：\n\n-   module：表示一个模块，在Node中，最常见的模块，就是一个个的JS文件！\n  - require：作用是加载其他模块用的；在一个JS文件中，如何引用其他JS文件中的成员呢？就是用require\n  - exports：在Node的模块中，如果这个模块需要向外暴露一些成员，供其他JS模块使用，那么，需要使用exports向外暴露这些成员！\n\n  Node 中的模块化，主要解决的JS文件之间的相互依赖关系！\n\n  Node 中的模块的分类\n\n  node由三部分组成：ECMAScript + 核心API + 第三方等API\n\n  核心模块\n\n  - 什么是核心模块：官方，发现一些功能模块使用非常频繁，然后，官方把这些模块，编译成了二进制可执行文件，然后打包到了Node的安装包中；所以，这些核心模块就已经随着安装Node时候，被安装到了本地；\n  - 如何使用核心模块\n    使用require（‘核心模块的名称’）；\n\n  第三方模块\n\n  - 什么是第三方模块：出了官方提供的好用的核心模块之外，我们程序员发现，还有一些使用也很频繁的代码和方法，一些牛逼的团体、个人、公司，开发出了好用的模块，通过NPM官网，托管出去，供其他人下载使用的这些模块；统称为第三方模块；\n  - 如何使用第三方模块\n    －　通过moment这个第三方模块，来介绍如何使用一个第三方模块；\n  - 第三方模块的使用方式：\n\n  1. 先使用npm下载这个模块！【注意：在安装第三方模块的时候，安装的名字，就是你在require时候导入的名字】\n  2. 使用require导入这个第三方模块！\n  3. 通过官方文档，试着去使用这个第三方模块！\n  4. 注意：无论是核心模块、还是第三方模块，都是通过 标识符名称来引用这个模块的！\n\n  用户模块\n\n  - 什么是用户模块：程序员自己定义的JS文件，统统数据用户模块！\n  - 用户模块向外导出成员的两种方式：\n\n  - 第一种方式：使用global对象，相当于浏览器中的window对象\n    - 1. 全局变量污染，\n    - 1. 不知道成员是从哪个模块中暴露 出去的\n  - 推荐Node提供的exports\n\n  exports 和 module.exports 的区别\n\n  1. 通过 module.exports 可以使用 . 的形式追加属性，也可以使用 等号 直接赋值的形式导出成员；\n  2. exports 只能通过 . 的形式追加属性；不能使用 等号 直接赋值的形式！\n  3. 注意： 在一个 module 中，最终向外暴露的成员，以 module.exports 指向的对象为准！\n  4. 在一个模块中，不要混合使用 module.exports 和 exports\n\n  模块加载规则\n\n  1. 优先从缓存中加载\n  2. 加载核心模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载核心模块！\n  3. 自己的模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载用户模块！\n\n  - 用户模块的查找规则：\n\n      用户模块的查找规则：\n      如果不写后缀名，则先严格按照给定的文件名去查找模块并加载执行；\n      index   ->  index.js  ->   index.json    ->  index.node\n\n  1. 第三方模块查找规则：\n     1. node首先，查看项目根目录中有没有 node_modules 文件夹\n     2. 查找 node_modules 文件夹中，有没有和第三方模块名称一致的文件夹\n     3. 在模块对应的文件夹中，查找有没有 package.json 这个文件\n     4. 在 package.json 文件中，查找有没有 main 属性\n     5. 如果有 main 属性，并且 main 属性指向的路径存在，那么就尝试加载这个路径指定的文件！\n     6. 如果 package.json 文件中，没有 main 属性，或者 main 属性指向的路径不存在，或者没有package.json 文件， 那么，Node尝试加载 模块根目录中 index 相关文件：index.js -> index.json -> index.node\n     7. 如果在node_modules文件夹中，找不到对应的模块文件夹，或者在项目根目录中根本没有node_modules文件夹，则向上一层文件夹中去查找，查找规则同上！\n     8. 如果上一层目录中也没有查找到，则再向上翻一层去查找，直到找到当前项目所在的盘符根目录为止！\n     9. 如果找到了盘符根目录还找不到，则报错：cannot find module ***\n\n  只安装部署依赖项不安装开发工具\n\n      npm i --production\n\n  模块化\n\n  1. node中的模块化基于commonJS:最显著的特点所有依赖项都是同步加载的！！！\n  2. commonJS由于是一个同步加载规范，所以不适合浏览器端使用；于是，浏览器端需要使用异步的模块加载机制\n  3. AMD、CMD\n\n  结合art-template模板引擎在服务器端渲染页面\n\n  art-template官方文档\n\n  服务端渲染和客户端渲染的对比\n\n  博客园官网\n\n  1. 服务器端渲染\n\n  - 特点：Node服务器先读取模板页面，再获取要渲染的数据，然后直接在服务器端把完整的页面渲染拼接好，然后通过网络一次性的把结果发送给浏览器去显示！【注意：通过服务器端渲染，在网络中传输的是一个真正页面】\n  - 优点：请求次数少，速度快，对SEO友好\n  - 缺点：服务器渲染压力大【在后端可以通过缓存机制去解决】\n\n  1. 客户端渲染\n\n  - 特点：先访问服务器获取到模板页面，然后再通过Ajax获取要渲染的数据，拿到这两者之后，再客户端调用模板引擎，渲染得到模板字符串，然后通过JS的方式，把结果展示到页面上！【真正的页面是在客户端浏览器中怼出来的，在进行网络传输的时候，第一次传输的是模板页面，第二次传输的是数据】\n  - 优点：减轻了服务器端的渲染压力\n  - 缺点：请求次数多，用户体验可能没有服务器端渲染好（白屏效果）；对SEO不友好\n\n  使用nodemon来自动重启Node服务\n\n  1. 运行npm i nodemon -g全局安装模块\n  2. 使用方式 和 node 完全一样：\n\n  - node 要执行文件的路径\n  - nodemon 要执行文件的路径\n\n  文件列表小案例\n\n  获取文件的属性\n\n  在优化前, 先封装一个根据指定路径读取文件内容的方法【重点】\n\n  将读取文件夹的方法抽离出来，同时对error进行处理【重点】\n\n  相关文章\n\n  1. art-template 官方文档\n  2. ES6 - 模板字符串\n  3. js中的数组对象排序\n  4. i5ting/tocmd.npm 将MD转换为HTML","slug":"浅析nodejs-二","published":1,"updated":"2018-03-06T22:22:01.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc280015skrx9lfrkt5r","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><p>关于node的常见知识点札记</p>\n<ul>\n<li><p>同步和异步的对比【非阻塞I/O和阻塞I/O】</p>\n<p>异步读取文件</p>\n<p>异步嵌套读取文件</p>\n<p>同步读取文件</p>\n<p>异步和同步操作中，捕获错误的方式</p>\n<a id=\"more\"></a>\n<p>Node 中的模块化</p>\n<p>什么是程序开发中的模块及好处</p>\n<ul>\n<li><p>什么是程序开发中的模块化：把一些功能类似的代码，封装到一个单独的文件中去，这些单独抽离出来的代码文件，就能够提供各种各样好用的功能；这种通过代码功能分割文件的方式，叫做程序中的模块化；</p>\n</li>\n<li><p>好处：保证了每个文件的功能（职能）单一；需要什么特定的功能，直接调用某一个特定的模块；对将来程序开发和维护都有好处！</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>  Node 中如何实现模块化</p>\n<p>  在Node中通过三个东西实现模块化：</p>\n<ul>\n<li><p>module：表示一个模块，在Node中，最常见的模块，就是一个个的JS文件！</p>\n<ul>\n<li>require：作用是加载其他模块用的；在一个JS文件中，如何引用其他JS文件中的成员呢？就是用require</li>\n<li>exports：在Node的模块中，如果这个模块需要向外暴露一些成员，供其他JS模块使用，那么，需要使用exports向外暴露这些成员！</li>\n</ul>\n<p>Node 中的模块化，主要解决的JS文件之间的相互依赖关系！</p>\n<p>Node 中的模块的分类</p>\n<p>node由三部分组成：ECMAScript + 核心API + 第三方等API</p>\n<p>核心模块</p>\n<ul>\n<li>什么是核心模块：官方，发现一些功能模块使用非常频繁，然后，官方把这些模块，编译成了二进制可执行文件，然后打包到了Node的安装包中；所以，这些核心模块就已经随着安装Node时候，被安装到了本地；</li>\n<li>如何使用核心模块<br>使用require（‘核心模块的名称’）；</li>\n</ul>\n<p>第三方模块</p>\n<ul>\n<li>什么是第三方模块：出了官方提供的好用的核心模块之外，我们程序员发现，还有一些使用也很频繁的代码和方法，一些牛逼的团体、个人、公司，开发出了好用的模块，通过NPM官网，托管出去，供其他人下载使用的这些模块；统称为第三方模块；</li>\n<li>如何使用第三方模块<br>－　通过moment这个第三方模块，来介绍如何使用一个第三方模块；</li>\n<li>第三方模块的使用方式：</li>\n</ul>\n<ol>\n<li>先使用npm下载这个模块！【注意：在安装第三方模块的时候，安装的名字，就是你在require时候导入的名字】</li>\n<li>使用require导入这个第三方模块！</li>\n<li>通过官方文档，试着去使用这个第三方模块！</li>\n<li>注意：无论是核心模块、还是第三方模块，都是通过 标识符名称来引用这个模块的！</li>\n</ol>\n<p>用户模块</p>\n<ul>\n<li>什么是用户模块：程序员自己定义的JS文件，统统数据用户模块！</li>\n<li><p>用户模块向外导出成员的两种方式：</p>\n</li>\n<li><p>第一种方式：使用global对象，相当于浏览器中的window对象</p>\n</li>\n<li><ol>\n<li>全局变量污染，</li>\n</ol>\n</li>\n<li><ol>\n<li>不知道成员是从哪个模块中暴露 出去的</li>\n</ol>\n</li>\n<li>推荐Node提供的exports</li>\n</ul>\n<p>exports 和 module.exports 的区别</p>\n<ol>\n<li>通过 module.exports 可以使用 . 的形式追加属性，也可以使用 等号 直接赋值的形式导出成员；</li>\n<li>exports 只能通过 . 的形式追加属性；不能使用 等号 直接赋值的形式！</li>\n<li>注意： 在一个 module 中，最终向外暴露的成员，以 module.exports 指向的对象为准！</li>\n<li>在一个模块中，不要混合使用 module.exports 和 exports</li>\n</ol>\n<p>模块加载规则</p>\n<ol>\n<li>优先从缓存中加载</li>\n<li>加载核心模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载核心模块！</li>\n<li>自己的模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载用户模块！</li>\n</ol>\n<ul>\n<li><p>用户模块的查找规则：</p>\n<p>用户模块的查找规则：<br>如果不写后缀名，则先严格按照给定的文件名去查找模块并加载执行；<br>index   -&gt;  index.js  -&gt;   index.json    -&gt;  index.node</p>\n</li>\n</ul>\n<ol>\n<li>第三方模块查找规则：<ol>\n<li>node首先，查看项目根目录中有没有 node_modules 文件夹</li>\n<li>查找 node_modules 文件夹中，有没有和第三方模块名称一致的文件夹</li>\n<li>在模块对应的文件夹中，查找有没有 package.json 这个文件</li>\n<li>在 package.json 文件中，查找有没有 main 属性</li>\n<li>如果有 main 属性，并且 main 属性指向的路径存在，那么就尝试加载这个路径指定的文件！</li>\n<li>如果 package.json 文件中，没有 main 属性，或者 main 属性指向的路径不存在，或者没有package.json 文件， 那么，Node尝试加载 模块根目录中 index 相关文件：index.js -&gt; index.json -&gt; index.node</li>\n<li>如果在node_modules文件夹中，找不到对应的模块文件夹，或者在项目根目录中根本没有node_modules文件夹，则向上一层文件夹中去查找，查找规则同上！</li>\n<li>如果上一层目录中也没有查找到，则再向上翻一层去查找，直到找到当前项目所在的盘符根目录为止！</li>\n<li>如果找到了盘符根目录还找不到，则报错：cannot find module <em>*</em></li>\n</ol>\n</li>\n</ol>\n<p>只安装部署依赖项不安装开发工具</p>\n<p>  npm i –production</p>\n<p>模块化</p>\n<ol>\n<li>node中的模块化基于commonJS:最显著的特点所有依赖项都是同步加载的！！！</li>\n<li>commonJS由于是一个同步加载规范，所以不适合浏览器端使用；于是，浏览器端需要使用异步的模块加载机制</li>\n<li>AMD、CMD</li>\n</ol>\n<p>结合art-template模板引擎在服务器端渲染页面</p>\n<p>art-template官方文档</p>\n<p>服务端渲染和客户端渲染的对比</p>\n<p>博客园官网</p>\n<ol>\n<li>服务器端渲染</li>\n</ol>\n<ul>\n<li>特点：Node服务器先读取模板页面，再获取要渲染的数据，然后直接在服务器端把完整的页面渲染拼接好，然后通过网络一次性的把结果发送给浏览器去显示！【注意：通过服务器端渲染，在网络中传输的是一个真正页面】</li>\n<li>优点：请求次数少，速度快，对SEO友好</li>\n<li>缺点：服务器渲染压力大【在后端可以通过缓存机制去解决】</li>\n</ul>\n<ol>\n<li>客户端渲染</li>\n</ol>\n<ul>\n<li>特点：先访问服务器获取到模板页面，然后再通过Ajax获取要渲染的数据，拿到这两者之后，再客户端调用模板引擎，渲染得到模板字符串，然后通过JS的方式，把结果展示到页面上！【真正的页面是在客户端浏览器中怼出来的，在进行网络传输的时候，第一次传输的是模板页面，第二次传输的是数据】</li>\n<li>优点：减轻了服务器端的渲染压力</li>\n<li>缺点：请求次数多，用户体验可能没有服务器端渲染好（白屏效果）；对SEO不友好</li>\n</ul>\n<p>使用nodemon来自动重启Node服务</p>\n<ol>\n<li>运行npm i nodemon -g全局安装模块</li>\n<li>使用方式 和 node 完全一样：</li>\n</ol>\n<ul>\n<li>node 要执行文件的路径</li>\n<li>nodemon 要执行文件的路径</li>\n</ul>\n<p>文件列表小案例</p>\n<p>获取文件的属性</p>\n<p>在优化前, 先封装一个根据指定路径读取文件内容的方法【重点】</p>\n<p>将读取文件夹的方法抽离出来，同时对error进行处理【重点】</p>\n<p>相关文章</p>\n<ol>\n<li>art-template 官方文档</li>\n<li>ES6 - 模板字符串</li>\n<li>js中的数组对象排序</li>\n<li>i5ting/tocmd.npm 将MD转换为HTML</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>关于node的常见知识点札记</p>\n<ul>\n<li><p>同步和异步的对比【非阻塞I/O和阻塞I/O】</p>\n<p>异步读取文件</p>\n<p>异步嵌套读取文件</p>\n<p>同步读取文件</p>\n<p>异步和同步操作中，捕获错误的方式</p>","more":"<p>Node 中的模块化</p>\n<p>什么是程序开发中的模块及好处</p>\n<ul>\n<li><p>什么是程序开发中的模块化：把一些功能类似的代码，封装到一个单独的文件中去，这些单独抽离出来的代码文件，就能够提供各种各样好用的功能；这种通过代码功能分割文件的方式，叫做程序中的模块化；</p>\n</li>\n<li><p>好处：保证了每个文件的功能（职能）单一；需要什么特定的功能，直接调用某一个特定的模块；对将来程序开发和维护都有好处！</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>  Node 中如何实现模块化</p>\n<p>  在Node中通过三个东西实现模块化：</p>\n<ul>\n<li><p>module：表示一个模块，在Node中，最常见的模块，就是一个个的JS文件！</p>\n<ul>\n<li>require：作用是加载其他模块用的；在一个JS文件中，如何引用其他JS文件中的成员呢？就是用require</li>\n<li>exports：在Node的模块中，如果这个模块需要向外暴露一些成员，供其他JS模块使用，那么，需要使用exports向外暴露这些成员！</li>\n</ul>\n<p>Node 中的模块化，主要解决的JS文件之间的相互依赖关系！</p>\n<p>Node 中的模块的分类</p>\n<p>node由三部分组成：ECMAScript + 核心API + 第三方等API</p>\n<p>核心模块</p>\n<ul>\n<li>什么是核心模块：官方，发现一些功能模块使用非常频繁，然后，官方把这些模块，编译成了二进制可执行文件，然后打包到了Node的安装包中；所以，这些核心模块就已经随着安装Node时候，被安装到了本地；</li>\n<li>如何使用核心模块<br>使用require（‘核心模块的名称’）；</li>\n</ul>\n<p>第三方模块</p>\n<ul>\n<li>什么是第三方模块：出了官方提供的好用的核心模块之外，我们程序员发现，还有一些使用也很频繁的代码和方法，一些牛逼的团体、个人、公司，开发出了好用的模块，通过NPM官网，托管出去，供其他人下载使用的这些模块；统称为第三方模块；</li>\n<li>如何使用第三方模块<br>－　通过moment这个第三方模块，来介绍如何使用一个第三方模块；</li>\n<li>第三方模块的使用方式：</li>\n</ul>\n<ol>\n<li>先使用npm下载这个模块！【注意：在安装第三方模块的时候，安装的名字，就是你在require时候导入的名字】</li>\n<li>使用require导入这个第三方模块！</li>\n<li>通过官方文档，试着去使用这个第三方模块！</li>\n<li>注意：无论是核心模块、还是第三方模块，都是通过 标识符名称来引用这个模块的！</li>\n</ol>\n<p>用户模块</p>\n<ul>\n<li>什么是用户模块：程序员自己定义的JS文件，统统数据用户模块！</li>\n<li><p>用户模块向外导出成员的两种方式：</p>\n</li>\n<li><p>第一种方式：使用global对象，相当于浏览器中的window对象</p>\n</li>\n<li><ol>\n<li>全局变量污染，</li>\n</ol>\n</li>\n<li><ol>\n<li>不知道成员是从哪个模块中暴露 出去的</li>\n</ol>\n</li>\n<li>推荐Node提供的exports</li>\n</ul>\n<p>exports 和 module.exports 的区别</p>\n<ol>\n<li>通过 module.exports 可以使用 . 的形式追加属性，也可以使用 等号 直接赋值的形式导出成员；</li>\n<li>exports 只能通过 . 的形式追加属性；不能使用 等号 直接赋值的形式！</li>\n<li>注意： 在一个 module 中，最终向外暴露的成员，以 module.exports 指向的对象为准！</li>\n<li>在一个模块中，不要混合使用 module.exports 和 exports</li>\n</ol>\n<p>模块加载规则</p>\n<ol>\n<li>优先从缓存中加载</li>\n<li>加载核心模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载核心模块！</li>\n<li>自己的模块:优先从缓存中加载；如果缓存中没有的话，再去执行加载用户模块！</li>\n</ol>\n<ul>\n<li><p>用户模块的查找规则：</p>\n<p>用户模块的查找规则：<br>如果不写后缀名，则先严格按照给定的文件名去查找模块并加载执行；<br>index   -&gt;  index.js  -&gt;   index.json    -&gt;  index.node</p>\n</li>\n</ul>\n<ol>\n<li>第三方模块查找规则：<ol>\n<li>node首先，查看项目根目录中有没有 node_modules 文件夹</li>\n<li>查找 node_modules 文件夹中，有没有和第三方模块名称一致的文件夹</li>\n<li>在模块对应的文件夹中，查找有没有 package.json 这个文件</li>\n<li>在 package.json 文件中，查找有没有 main 属性</li>\n<li>如果有 main 属性，并且 main 属性指向的路径存在，那么就尝试加载这个路径指定的文件！</li>\n<li>如果 package.json 文件中，没有 main 属性，或者 main 属性指向的路径不存在，或者没有package.json 文件， 那么，Node尝试加载 模块根目录中 index 相关文件：index.js -&gt; index.json -&gt; index.node</li>\n<li>如果在node_modules文件夹中，找不到对应的模块文件夹，或者在项目根目录中根本没有node_modules文件夹，则向上一层文件夹中去查找，查找规则同上！</li>\n<li>如果上一层目录中也没有查找到，则再向上翻一层去查找，直到找到当前项目所在的盘符根目录为止！</li>\n<li>如果找到了盘符根目录还找不到，则报错：cannot find module <em>*</em></li>\n</ol>\n</li>\n</ol>\n<p>只安装部署依赖项不安装开发工具</p>\n<p>  npm i –production</p>\n<p>模块化</p>\n<ol>\n<li>node中的模块化基于commonJS:最显著的特点所有依赖项都是同步加载的！！！</li>\n<li>commonJS由于是一个同步加载规范，所以不适合浏览器端使用；于是，浏览器端需要使用异步的模块加载机制</li>\n<li>AMD、CMD</li>\n</ol>\n<p>结合art-template模板引擎在服务器端渲染页面</p>\n<p>art-template官方文档</p>\n<p>服务端渲染和客户端渲染的对比</p>\n<p>博客园官网</p>\n<ol>\n<li>服务器端渲染</li>\n</ol>\n<ul>\n<li>特点：Node服务器先读取模板页面，再获取要渲染的数据，然后直接在服务器端把完整的页面渲染拼接好，然后通过网络一次性的把结果发送给浏览器去显示！【注意：通过服务器端渲染，在网络中传输的是一个真正页面】</li>\n<li>优点：请求次数少，速度快，对SEO友好</li>\n<li>缺点：服务器渲染压力大【在后端可以通过缓存机制去解决】</li>\n</ul>\n<ol>\n<li>客户端渲染</li>\n</ol>\n<ul>\n<li>特点：先访问服务器获取到模板页面，然后再通过Ajax获取要渲染的数据，拿到这两者之后，再客户端调用模板引擎，渲染得到模板字符串，然后通过JS的方式，把结果展示到页面上！【真正的页面是在客户端浏览器中怼出来的，在进行网络传输的时候，第一次传输的是模板页面，第二次传输的是数据】</li>\n<li>优点：减轻了服务器端的渲染压力</li>\n<li>缺点：请求次数多，用户体验可能没有服务器端渲染好（白屏效果）；对SEO不友好</li>\n</ul>\n<p>使用nodemon来自动重启Node服务</p>\n<ol>\n<li>运行npm i nodemon -g全局安装模块</li>\n<li>使用方式 和 node 完全一样：</li>\n</ol>\n<ul>\n<li>node 要执行文件的路径</li>\n<li>nodemon 要执行文件的路径</li>\n</ul>\n<p>文件列表小案例</p>\n<p>获取文件的属性</p>\n<p>在优化前, 先封装一个根据指定路径读取文件内容的方法【重点】</p>\n<p>将读取文件夹的方法抽离出来，同时对error进行处理【重点】</p>\n<p>相关文章</p>\n<ol>\n<li>art-template 官方文档</li>\n<li>ES6 - 模板字符串</li>\n<li>js中的数组对象排序</li>\n<li>i5ting/tocmd.npm 将MD转换为HTML</li>\n</ol>\n</li>\n</ul>"},{"title":"浅析node","date":"2018-02-13T02:54:00.000Z","summary_img":"http://p56w6hcyq.bkt.clouddn.com/node.jpg","_content":"学习Node.js时候的建议\n\n1. 前端和后端的知识体系不同！不要使用前端的思维方式去学习后端开发！\n\n2. 学习Node.js阶段，把自己当作后端开发人员！\n\n3. 课堂上对重点的知识做笔记，利用一切时间练习课堂代码；晚上抽半个小时梳理总结今天所学知识点；整理今天的笔记！\n\n4. 每天吃饭睡觉走大街上，都要在脑海中闪现今天学习的知识点【×××知识点是什么，怎么用】\n\n   <!--more-->\n\n\n什么是前端和后端\n\n1. 前端主要工作：写页面（HTML）、美化页面（CSS）、调用后台提供的API接口去请求或提交数据（JS）；Ajax （XHR、Jquery  .ajax  .get  $.post），Jquery更多的是进行DOM方面的操作！H5C3，高级、Angular（单页面应用程序）\n\n- 前端主要在浏览器端进行开发；前端主要和页面打交道，用户看到的基本上就是我们前端写出来的（前端就是颜值）\n\n1. 后端主要工作：主要进行业务逻辑的操作、比如数据的增删改查、操作数据库、对外暴露API接口（后台是骨骼、灵魂）\n2. 前后端协作流程：前端写页面，前端调用后台的接口；后台接受前端发过来的请求，然后进行相关的业务处理，把处理的结果返回给前端（提供API接口）\n\nJavascript 的起源\n\n1. 诞生：JS的诞生和一个公司有关，有一个网景公司；当时网速只有20~30KB（电话线），当时，就是为了进行客户端验证，为了减少不必要的网络请求，提高网络效率，网景公司决定研究一门语言，来解决这个问题；JS作者在10之内，就把这门语言写出来了，叫做LiveScript，为了搭上Java这般顺风车，就把LiveScript改名为Javascript；\n2. 浏览器中的一战：微软发现浏览器市场很火，然后就自己开发了一款浏览器【IE】；为了推广自己的IE浏览器，把IE捆绑到了Windows操作系统中；JScript\n\n- 一战胜利的果实：ECMAScript标准的确立；就是一个语言规范；只规定了如何进行分支判断、如何定义变量、如何定义方法.....\n\n1. 短暂的和平期：IE6【微软发现自己已经天下无敌了，然后就把IE6的开发团队给解散了！】在和平期间，JS这门语言主要做什么：表单验证、简单的特效、狗皮膏药（当时被称为脚本语言）\n2. 二战：【主角：谷歌、IE、火（浴火重生）狐】谷歌在2008年，借助于AJax，开始火起来了！一方面提升渲染引擎的效率、另一方面，提升JS解析引擎的效率，最终，二战以谷歌的胜利结束；谷歌有了一款世界上效率最快的JS解析引擎，叫做chrome V8引擎；\n\nNode.js 的起源\n\nnodejs的历史由来\n\n- 作者，之前主要是做高性能服务器维护的；高性能的服务器有哪些必要的条件；必须要是异步非阻塞的、基于事件驱动的；\n- 作者在分析了上面两条基本条件之后，就开始研发高性能服务器！\n- C,C++,Java,C#,Javascript\n- 对于程序员来说，如果同时提供了同步和异步两种编程方式，程序员肯定会选择同步；\n- 作者选择Javascript最主要的原因，就是这门语言是单线程的\n- 多线程：程序员能主动开启子线程的语言，就叫做多线程的语言；Thread td = new Thread();\n- 作者最终，选择的语言是Javascript、解析引擎是V8；\n- 刚开始，作者写出来的这个东西叫做web.js;后来，随着项目扩大和功能的完善，作者发现这款产品，不仅能做高性能的服务器，还能做许多事情，比如可以用这个东西去做前端包管理；于是就改名叫做Node.js;\n- 像前端需要好用的工具，都是使用node.js开发出来的！\n\nECMAScript、浏览器中的Javascript、Node中的Javascript\n\n- ECMAScript：语言规范；不能使用ECMAScript进行实际的编程，因为它只是一个语言标准而已；\n- 浏览器中的Javascript：是ECMAScript这个规范的具体实现；我们可以使用浏览器中的JS进行实际的编程！\n\n- 浏览器中的Javascript组成部分：DOM + BOM + ECMAScript；其中，DOM和BOM和规范无关，是浏览器根据自己的需要，后期扩展的；\n\n- Node中的Javascript：是ECMAScript这个规范的具体实现；也能进行实际的编程！\n\n- Node中的Javascript组成部分：ECMAScript + 核心API + 其他第三方API，由于Node不需要操作浏览器对象和文档对象，所以把BOM和DOM给剔除了！核心API中，提供了 操作 文件的API 和 操作网络的 API等。。。。\n\n什么是Node.js\n\n- Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\n\n- 我们使用JS写的Node代码，说白了，只是单纯的字符串而已；\n- 如果想要执行这些写好的代码，必须要有一个解析执行环境，这个环境就是chrome 的 V8 引擎；\n\n- Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\n\n- 事件驱动：当触发某个事件的时候，执行事件中指定的代码！\n- 非阻塞式 I/O 的模型：采用非阻塞的操作，能够提高处理的效率！\n\n- Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n\n- 先使用npm init -y初始化一下包管理文件package.json，将来所有安装的包，都会记录到这个文件中\n- 使用npm install 包名 --save/--save-dev去安装包；其中，install可以简写成i;\n- --save表示把包安装到部署依赖中（在开发和部署上线都需要使用的包）； --save-dev表示安装到开发依赖（只在项目开发阶段需要用到的包）；\n- --save可以简写成-S；--save-dev可以简写成-D;\n- npm uninstall 包名 --save/--save-dev或者npm remove 包名 --save/--save-dev\n- npm i webpack -g,其中，-g表示全局安装某些包，通过-g安装的包都在C:\\Users\\用户名\\AppData\\Roaming\\npm下面\n\n- NPM 和 （Github、码云） 和 Git之间的关系\n\n- NPM是包管理平台（里面托管了各种各样的包）\n- Github、码云 代码托管平台（托管了各种各样的代码仓库）\n- Git是用来对代码进行分支版本管理\n\n补充：yarn\n\n- yarn和npm的作用完全一样，都是用来管理项目中的第三方依赖包的！\n- yarn是Facebook公司推出来的一套包管理工具！【后期咱们学习React，尤其是ReactNative的时候，默认就是用Yarn去装包的】\n- yarn会缓存曾经安装过的包；但是npm也会缓存，但是效果不如yarn明显；\n- yarn与npm的命令行小结\n\n补充：如何设置npm和yarn的安装镜像：\n\n什么是NPM淘宝镜像呢：由于每次安装包需要走国外的网络，速度很慢，所以，淘宝帮我们在国内创建了一个NPM包托管网站，能够提升使用NPM装包时候的速度！\n\n1. 配置npm的国内淘宝镜像：\n\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n2. 配置yarn的国内淘宝镜像：\n\n    yarn config set registry https://registry.npm.taobao.org --global\n    yarn config set disturl https://npm.taobao.org/dist --global\n\n总结：Node.js 就是一个Javascript的服务端运行环境（依赖于Chrome 的V8引擎），为Javascript提供了服务器端编程的能力！\n\nNode.js 可以做哪些事情\n\n- 【★】Node可以作为前端的一个工具去使用，通过NPM安装好用的工具；Node可以开发一些前端的工具【i5ting_toc】\n- 【★】Node能做服务器\n- 【★】Node还可以操作数据库并对外提供数据接口\n- Node能做即时聊天\n\n【★★】为什么要学习Node.js\n\n- 从企业角度分析：\n\n- 企业对一专多能人才的需求：怎么才能最大限度的压榨员工；省钱\n- 多高性能服务器的需求：怎么才能最大限度的压榨服务器；\n- Node适合做快速的网络请求，但是不适合做大数据的业务逻辑的处理；\n\n- 从自身角度分析：\n\n- 挣钱；\n- 对将来职业生涯有好处：学了Node之后，为我们构建了后端的知识体系，无论将来你会不会做后端的Node开发，但是，起码你已经构建了完整的前后端知识体系！\n- 后面学到的任何新技术：Vue.js，React,React-Native都是基于Node的！包括后面要学的一个构建工具webpack！\n\n在Node中执行相关的JS代码的两种方式\n\n1. 直接在命令行中输入node，进入Node的REPL运行环境：\n\n- R：Read：读取用户输入的字符串内容\n- E：Evaluate：把用户输入的字符串，当作JS代码去解析执行\n- P：Print：打印输出Evaluate解析的结果\n- L：Loop：进入下一次循环\n\n1. 将Node代码写入到一个js文件中，然后通过node 要执行的JS文件路径去运行Node代码\n\n环境变量\n\n为什么可以通过命令行形式，直接启动node或者notepad呢？？？\n\n注意：每当修改了环境变量之后，需要重新启动命令窗口！\n\n什么是环境变量\n\nPath环境变量的作用：能够让我们通过命令行的形式快速启动一个应用程序；\n\n用户变量和系统变量的区别、\n\n用户变量：用户变量是属于每一个用户的，用户之间的用户变量是私有的，不共享的；\n\n系统变量：系统变量是共享的，只能用户能够登录这台电脑，那么就能访问系统变量中的任何东西！【将来咋在配置环境变量的时候，推荐大家配置到系统变量中！】\n\n配置环境变量的两种方式\n\n1. 第一种方式：直接把路径添加到path环境变量中；\n2. 第二种方式：先在环境变量中创建一个新变量，名字类似于：ZOOM_HOME这样，值是我们程序的根目录；然后，再把这个变量名，引用到 Path环境变量中，类似于：%ZOOM_HOME%\n\nPath变量的查找规则\n\n1. 先从当前的目录中查找有没有这个应用程序，如果有，则直接运行，如果没有，则去系统环境变量中，path环境变量下挨个查找对应的文件夹，如果在对应文件夹中能找到，则直接运行，如果找不到，最终报错！\n\n【★★】使用fs模块来操作文件\n\n1. fs.readFile\n2. fs.writeFile\n3. fs.appendFile\n\n【★★★】fs模块中路径问题\n\n箭头函数\n\nNode中的使用http模块创建最基本的web服务器\n\n之前有没有接触过Web服务器？？？\n\n其实，PHPStudy中集成了一个叫做Apache的软件；这个软件就是一个服务器软件，能够托管一个网站；\n\n其实在Node中，并没有类似于Apache这样软件；我们可以通过简单的几行代码，写出一个Web服务器！\n\n【★★★】HTTP协议中的 请求 - 处理 - 响应 模型\n\n【★★】step by step 构建HTTP服务器\n\n升级1：根据不同的URL地址响应不同HTML消息\n\n升级2：根据不同URL地址 - 响应不同的页面\n\n升级3：在响应不同页面的同时响应静态资源（css、图片、js）\n\n【★★★】【难点】升级4：根据不同URL地址 - 响应不同文件的改造\n\n【★★】【难点】网页中资源请求路径问题\n\n相关文章\n\n- JavaScript——历史与简介\n- 深入浅出Node.js（一）：什么是Node.js\n- I/O事件概述\n- 理解Node.js事件驱动编程\n- Node.js 中文网\n- Node.js 英文官网\n- Node.js 菜鸟教程\n- CNode：Node.js专业中文社区\n- 深入浅出Node.js(朴灵)完整扫描版.pdf\n- HTTP Keep-Alive是什么？如何工作？\n- 浏览器User-agent String里的历史故事\n- art-template API\n- yarn与npm的命令行小结","source":"_posts/浅析nodejs.md","raw":"---\ntitle: 浅析node\ndate: 2018-2-13 10:54\ntags: node\ncategories: node\nsummary_img: http://p56w6hcyq.bkt.clouddn.com/node.jpg\n---\n学习Node.js时候的建议\n\n1. 前端和后端的知识体系不同！不要使用前端的思维方式去学习后端开发！\n\n2. 学习Node.js阶段，把自己当作后端开发人员！\n\n3. 课堂上对重点的知识做笔记，利用一切时间练习课堂代码；晚上抽半个小时梳理总结今天所学知识点；整理今天的笔记！\n\n4. 每天吃饭睡觉走大街上，都要在脑海中闪现今天学习的知识点【×××知识点是什么，怎么用】\n\n   <!--more-->\n\n\n什么是前端和后端\n\n1. 前端主要工作：写页面（HTML）、美化页面（CSS）、调用后台提供的API接口去请求或提交数据（JS）；Ajax （XHR、Jquery  .ajax  .get  $.post），Jquery更多的是进行DOM方面的操作！H5C3，高级、Angular（单页面应用程序）\n\n- 前端主要在浏览器端进行开发；前端主要和页面打交道，用户看到的基本上就是我们前端写出来的（前端就是颜值）\n\n1. 后端主要工作：主要进行业务逻辑的操作、比如数据的增删改查、操作数据库、对外暴露API接口（后台是骨骼、灵魂）\n2. 前后端协作流程：前端写页面，前端调用后台的接口；后台接受前端发过来的请求，然后进行相关的业务处理，把处理的结果返回给前端（提供API接口）\n\nJavascript 的起源\n\n1. 诞生：JS的诞生和一个公司有关，有一个网景公司；当时网速只有20~30KB（电话线），当时，就是为了进行客户端验证，为了减少不必要的网络请求，提高网络效率，网景公司决定研究一门语言，来解决这个问题；JS作者在10之内，就把这门语言写出来了，叫做LiveScript，为了搭上Java这般顺风车，就把LiveScript改名为Javascript；\n2. 浏览器中的一战：微软发现浏览器市场很火，然后就自己开发了一款浏览器【IE】；为了推广自己的IE浏览器，把IE捆绑到了Windows操作系统中；JScript\n\n- 一战胜利的果实：ECMAScript标准的确立；就是一个语言规范；只规定了如何进行分支判断、如何定义变量、如何定义方法.....\n\n1. 短暂的和平期：IE6【微软发现自己已经天下无敌了，然后就把IE6的开发团队给解散了！】在和平期间，JS这门语言主要做什么：表单验证、简单的特效、狗皮膏药（当时被称为脚本语言）\n2. 二战：【主角：谷歌、IE、火（浴火重生）狐】谷歌在2008年，借助于AJax，开始火起来了！一方面提升渲染引擎的效率、另一方面，提升JS解析引擎的效率，最终，二战以谷歌的胜利结束；谷歌有了一款世界上效率最快的JS解析引擎，叫做chrome V8引擎；\n\nNode.js 的起源\n\nnodejs的历史由来\n\n- 作者，之前主要是做高性能服务器维护的；高性能的服务器有哪些必要的条件；必须要是异步非阻塞的、基于事件驱动的；\n- 作者在分析了上面两条基本条件之后，就开始研发高性能服务器！\n- C,C++,Java,C#,Javascript\n- 对于程序员来说，如果同时提供了同步和异步两种编程方式，程序员肯定会选择同步；\n- 作者选择Javascript最主要的原因，就是这门语言是单线程的\n- 多线程：程序员能主动开启子线程的语言，就叫做多线程的语言；Thread td = new Thread();\n- 作者最终，选择的语言是Javascript、解析引擎是V8；\n- 刚开始，作者写出来的这个东西叫做web.js;后来，随着项目扩大和功能的完善，作者发现这款产品，不仅能做高性能的服务器，还能做许多事情，比如可以用这个东西去做前端包管理；于是就改名叫做Node.js;\n- 像前端需要好用的工具，都是使用node.js开发出来的！\n\nECMAScript、浏览器中的Javascript、Node中的Javascript\n\n- ECMAScript：语言规范；不能使用ECMAScript进行实际的编程，因为它只是一个语言标准而已；\n- 浏览器中的Javascript：是ECMAScript这个规范的具体实现；我们可以使用浏览器中的JS进行实际的编程！\n\n- 浏览器中的Javascript组成部分：DOM + BOM + ECMAScript；其中，DOM和BOM和规范无关，是浏览器根据自己的需要，后期扩展的；\n\n- Node中的Javascript：是ECMAScript这个规范的具体实现；也能进行实际的编程！\n\n- Node中的Javascript组成部分：ECMAScript + 核心API + 其他第三方API，由于Node不需要操作浏览器对象和文档对象，所以把BOM和DOM给剔除了！核心API中，提供了 操作 文件的API 和 操作网络的 API等。。。。\n\n什么是Node.js\n\n- Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\n\n- 我们使用JS写的Node代码，说白了，只是单纯的字符串而已；\n- 如果想要执行这些写好的代码，必须要有一个解析执行环境，这个环境就是chrome 的 V8 引擎；\n\n- Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\n\n- 事件驱动：当触发某个事件的时候，执行事件中指定的代码！\n- 非阻塞式 I/O 的模型：采用非阻塞的操作，能够提高处理的效率！\n\n- Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n\n- 先使用npm init -y初始化一下包管理文件package.json，将来所有安装的包，都会记录到这个文件中\n- 使用npm install 包名 --save/--save-dev去安装包；其中，install可以简写成i;\n- --save表示把包安装到部署依赖中（在开发和部署上线都需要使用的包）； --save-dev表示安装到开发依赖（只在项目开发阶段需要用到的包）；\n- --save可以简写成-S；--save-dev可以简写成-D;\n- npm uninstall 包名 --save/--save-dev或者npm remove 包名 --save/--save-dev\n- npm i webpack -g,其中，-g表示全局安装某些包，通过-g安装的包都在C:\\Users\\用户名\\AppData\\Roaming\\npm下面\n\n- NPM 和 （Github、码云） 和 Git之间的关系\n\n- NPM是包管理平台（里面托管了各种各样的包）\n- Github、码云 代码托管平台（托管了各种各样的代码仓库）\n- Git是用来对代码进行分支版本管理\n\n补充：yarn\n\n- yarn和npm的作用完全一样，都是用来管理项目中的第三方依赖包的！\n- yarn是Facebook公司推出来的一套包管理工具！【后期咱们学习React，尤其是ReactNative的时候，默认就是用Yarn去装包的】\n- yarn会缓存曾经安装过的包；但是npm也会缓存，但是效果不如yarn明显；\n- yarn与npm的命令行小结\n\n补充：如何设置npm和yarn的安装镜像：\n\n什么是NPM淘宝镜像呢：由于每次安装包需要走国外的网络，速度很慢，所以，淘宝帮我们在国内创建了一个NPM包托管网站，能够提升使用NPM装包时候的速度！\n\n1. 配置npm的国内淘宝镜像：\n\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n2. 配置yarn的国内淘宝镜像：\n\n    yarn config set registry https://registry.npm.taobao.org --global\n    yarn config set disturl https://npm.taobao.org/dist --global\n\n总结：Node.js 就是一个Javascript的服务端运行环境（依赖于Chrome 的V8引擎），为Javascript提供了服务器端编程的能力！\n\nNode.js 可以做哪些事情\n\n- 【★】Node可以作为前端的一个工具去使用，通过NPM安装好用的工具；Node可以开发一些前端的工具【i5ting_toc】\n- 【★】Node能做服务器\n- 【★】Node还可以操作数据库并对外提供数据接口\n- Node能做即时聊天\n\n【★★】为什么要学习Node.js\n\n- 从企业角度分析：\n\n- 企业对一专多能人才的需求：怎么才能最大限度的压榨员工；省钱\n- 多高性能服务器的需求：怎么才能最大限度的压榨服务器；\n- Node适合做快速的网络请求，但是不适合做大数据的业务逻辑的处理；\n\n- 从自身角度分析：\n\n- 挣钱；\n- 对将来职业生涯有好处：学了Node之后，为我们构建了后端的知识体系，无论将来你会不会做后端的Node开发，但是，起码你已经构建了完整的前后端知识体系！\n- 后面学到的任何新技术：Vue.js，React,React-Native都是基于Node的！包括后面要学的一个构建工具webpack！\n\n在Node中执行相关的JS代码的两种方式\n\n1. 直接在命令行中输入node，进入Node的REPL运行环境：\n\n- R：Read：读取用户输入的字符串内容\n- E：Evaluate：把用户输入的字符串，当作JS代码去解析执行\n- P：Print：打印输出Evaluate解析的结果\n- L：Loop：进入下一次循环\n\n1. 将Node代码写入到一个js文件中，然后通过node 要执行的JS文件路径去运行Node代码\n\n环境变量\n\n为什么可以通过命令行形式，直接启动node或者notepad呢？？？\n\n注意：每当修改了环境变量之后，需要重新启动命令窗口！\n\n什么是环境变量\n\nPath环境变量的作用：能够让我们通过命令行的形式快速启动一个应用程序；\n\n用户变量和系统变量的区别、\n\n用户变量：用户变量是属于每一个用户的，用户之间的用户变量是私有的，不共享的；\n\n系统变量：系统变量是共享的，只能用户能够登录这台电脑，那么就能访问系统变量中的任何东西！【将来咋在配置环境变量的时候，推荐大家配置到系统变量中！】\n\n配置环境变量的两种方式\n\n1. 第一种方式：直接把路径添加到path环境变量中；\n2. 第二种方式：先在环境变量中创建一个新变量，名字类似于：ZOOM_HOME这样，值是我们程序的根目录；然后，再把这个变量名，引用到 Path环境变量中，类似于：%ZOOM_HOME%\n\nPath变量的查找规则\n\n1. 先从当前的目录中查找有没有这个应用程序，如果有，则直接运行，如果没有，则去系统环境变量中，path环境变量下挨个查找对应的文件夹，如果在对应文件夹中能找到，则直接运行，如果找不到，最终报错！\n\n【★★】使用fs模块来操作文件\n\n1. fs.readFile\n2. fs.writeFile\n3. fs.appendFile\n\n【★★★】fs模块中路径问题\n\n箭头函数\n\nNode中的使用http模块创建最基本的web服务器\n\n之前有没有接触过Web服务器？？？\n\n其实，PHPStudy中集成了一个叫做Apache的软件；这个软件就是一个服务器软件，能够托管一个网站；\n\n其实在Node中，并没有类似于Apache这样软件；我们可以通过简单的几行代码，写出一个Web服务器！\n\n【★★★】HTTP协议中的 请求 - 处理 - 响应 模型\n\n【★★】step by step 构建HTTP服务器\n\n升级1：根据不同的URL地址响应不同HTML消息\n\n升级2：根据不同URL地址 - 响应不同的页面\n\n升级3：在响应不同页面的同时响应静态资源（css、图片、js）\n\n【★★★】【难点】升级4：根据不同URL地址 - 响应不同文件的改造\n\n【★★】【难点】网页中资源请求路径问题\n\n相关文章\n\n- JavaScript——历史与简介\n- 深入浅出Node.js（一）：什么是Node.js\n- I/O事件概述\n- 理解Node.js事件驱动编程\n- Node.js 中文网\n- Node.js 英文官网\n- Node.js 菜鸟教程\n- CNode：Node.js专业中文社区\n- 深入浅出Node.js(朴灵)完整扫描版.pdf\n- HTTP Keep-Alive是什么？如何工作？\n- 浏览器User-agent String里的历史故事\n- art-template API\n- yarn与npm的命令行小结","slug":"浅析nodejs","published":1,"updated":"2018-03-06T22:22:21.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjey5cc2e001askrxk3101f5m","content":"<script src=\"\\assets\\js\\APlayer.min.js\"> </script><p>学习Node.js时候的建议</p>\n<ol>\n<li><p>前端和后端的知识体系不同！不要使用前端的思维方式去学习后端开发！</p>\n</li>\n<li><p>学习Node.js阶段，把自己当作后端开发人员！</p>\n</li>\n<li><p>课堂上对重点的知识做笔记，利用一切时间练习课堂代码；晚上抽半个小时梳理总结今天所学知识点；整理今天的笔记！</p>\n</li>\n<li><p>每天吃饭睡觉走大街上，都要在脑海中闪现今天学习的知识点【×××知识点是什么，怎么用】</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<p>什么是前端和后端</p>\n<ol>\n<li>前端主要工作：写页面（HTML）、美化页面（CSS）、调用后台提供的API接口去请求或提交数据（JS）；Ajax （XHR、Jquery  .ajax  .get  $.post），Jquery更多的是进行DOM方面的操作！H5C3，高级、Angular（单页面应用程序）</li>\n</ol>\n<ul>\n<li>前端主要在浏览器端进行开发；前端主要和页面打交道，用户看到的基本上就是我们前端写出来的（前端就是颜值）</li>\n</ul>\n<ol>\n<li>后端主要工作：主要进行业务逻辑的操作、比如数据的增删改查、操作数据库、对外暴露API接口（后台是骨骼、灵魂）</li>\n<li>前后端协作流程：前端写页面，前端调用后台的接口；后台接受前端发过来的请求，然后进行相关的业务处理，把处理的结果返回给前端（提供API接口）</li>\n</ol>\n<p>Javascript 的起源</p>\n<ol>\n<li>诞生：JS的诞生和一个公司有关，有一个网景公司；当时网速只有20~30KB（电话线），当时，就是为了进行客户端验证，为了减少不必要的网络请求，提高网络效率，网景公司决定研究一门语言，来解决这个问题；JS作者在10之内，就把这门语言写出来了，叫做LiveScript，为了搭上Java这般顺风车，就把LiveScript改名为Javascript；</li>\n<li>浏览器中的一战：微软发现浏览器市场很火，然后就自己开发了一款浏览器【IE】；为了推广自己的IE浏览器，把IE捆绑到了Windows操作系统中；JScript</li>\n</ol>\n<ul>\n<li>一战胜利的果实：ECMAScript标准的确立；就是一个语言规范；只规定了如何进行分支判断、如何定义变量、如何定义方法…..</li>\n</ul>\n<ol>\n<li>短暂的和平期：IE6【微软发现自己已经天下无敌了，然后就把IE6的开发团队给解散了！】在和平期间，JS这门语言主要做什么：表单验证、简单的特效、狗皮膏药（当时被称为脚本语言）</li>\n<li>二战：【主角：谷歌、IE、火（浴火重生）狐】谷歌在2008年，借助于AJax，开始火起来了！一方面提升渲染引擎的效率、另一方面，提升JS解析引擎的效率，最终，二战以谷歌的胜利结束；谷歌有了一款世界上效率最快的JS解析引擎，叫做chrome V8引擎；</li>\n</ol>\n<p>Node.js 的起源</p>\n<p>nodejs的历史由来</p>\n<ul>\n<li>作者，之前主要是做高性能服务器维护的；高性能的服务器有哪些必要的条件；必须要是异步非阻塞的、基于事件驱动的；</li>\n<li>作者在分析了上面两条基本条件之后，就开始研发高性能服务器！</li>\n<li>C,C++,Java,C#,Javascript</li>\n<li>对于程序员来说，如果同时提供了同步和异步两种编程方式，程序员肯定会选择同步；</li>\n<li>作者选择Javascript最主要的原因，就是这门语言是单线程的</li>\n<li>多线程：程序员能主动开启子线程的语言，就叫做多线程的语言；Thread td = new Thread();</li>\n<li>作者最终，选择的语言是Javascript、解析引擎是V8；</li>\n<li>刚开始，作者写出来的这个东西叫做web.js;后来，随着项目扩大和功能的完善，作者发现这款产品，不仅能做高性能的服务器，还能做许多事情，比如可以用这个东西去做前端包管理；于是就改名叫做Node.js;</li>\n<li>像前端需要好用的工具，都是使用node.js开发出来的！</li>\n</ul>\n<p>ECMAScript、浏览器中的Javascript、Node中的Javascript</p>\n<ul>\n<li>ECMAScript：语言规范；不能使用ECMAScript进行实际的编程，因为它只是一个语言标准而已；</li>\n<li><p>浏览器中的Javascript：是ECMAScript这个规范的具体实现；我们可以使用浏览器中的JS进行实际的编程！</p>\n</li>\n<li><p>浏览器中的Javascript组成部分：DOM + BOM + ECMAScript；其中，DOM和BOM和规范无关，是浏览器根据自己的需要，后期扩展的；</p>\n</li>\n<li><p>Node中的Javascript：是ECMAScript这个规范的具体实现；也能进行实际的编程！</p>\n</li>\n<li><p>Node中的Javascript组成部分：ECMAScript + 核心API + 其他第三方API，由于Node不需要操作浏览器对象和文档对象，所以把BOM和DOM给剔除了！核心API中，提供了 操作 文件的API 和 操作网络的 API等。。。。</p>\n</li>\n</ul>\n<p>什么是Node.js</p>\n<ul>\n<li><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p>\n</li>\n<li><p>我们使用JS写的Node代码，说白了，只是单纯的字符串而已；</p>\n</li>\n<li><p>如果想要执行这些写好的代码，必须要有一个解析执行环境，这个环境就是chrome 的 V8 引擎；</p>\n</li>\n<li><p>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</p>\n</li>\n<li><p>事件驱动：当触发某个事件的时候，执行事件中指定的代码！</p>\n</li>\n<li><p>非阻塞式 I/O 的模型：采用非阻塞的操作，能够提高处理的效率！</p>\n</li>\n<li><p>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n</li>\n<li><p>先使用npm init -y初始化一下包管理文件package.json，将来所有安装的包，都会记录到这个文件中</p>\n</li>\n<li>使用npm install 包名 –save/–save-dev去安装包；其中，install可以简写成i;</li>\n<li>–save表示把包安装到部署依赖中（在开发和部署上线都需要使用的包）； –save-dev表示安装到开发依赖（只在项目开发阶段需要用到的包）；</li>\n<li>–save可以简写成-S；–save-dev可以简写成-D;</li>\n<li>npm uninstall 包名 –save/–save-dev或者npm remove 包名 –save/–save-dev</li>\n<li><p>npm i webpack -g,其中，-g表示全局安装某些包，通过-g安装的包都在C:\\Users\\用户名\\AppData\\Roaming\\npm下面</p>\n</li>\n<li><p>NPM 和 （Github、码云） 和 Git之间的关系</p>\n</li>\n<li><p>NPM是包管理平台（里面托管了各种各样的包）</p>\n</li>\n<li>Github、码云 代码托管平台（托管了各种各样的代码仓库）</li>\n<li>Git是用来对代码进行分支版本管理</li>\n</ul>\n<p>补充：yarn</p>\n<ul>\n<li>yarn和npm的作用完全一样，都是用来管理项目中的第三方依赖包的！</li>\n<li>yarn是Facebook公司推出来的一套包管理工具！【后期咱们学习React，尤其是ReactNative的时候，默认就是用Yarn去装包的】</li>\n<li>yarn会缓存曾经安装过的包；但是npm也会缓存，但是效果不如yarn明显；</li>\n<li>yarn与npm的命令行小结</li>\n</ul>\n<p>补充：如何设置npm和yarn的安装镜像：</p>\n<p>什么是NPM淘宝镜像呢：由于每次安装包需要走国外的网络，速度很慢，所以，淘宝帮我们在国内创建了一个NPM包托管网站，能够提升使用NPM装包时候的速度！</p>\n<ol>\n<li><p>配置npm的国内淘宝镜像：</p>\n<p> npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global<br> npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</p>\n</li>\n<li><p>配置yarn的国内淘宝镜像：</p>\n<p> yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global<br> yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</p>\n</li>\n</ol>\n<p>总结：Node.js 就是一个Javascript的服务端运行环境（依赖于Chrome 的V8引擎），为Javascript提供了服务器端编程的能力！</p>\n<p>Node.js 可以做哪些事情</p>\n<ul>\n<li>【★】Node可以作为前端的一个工具去使用，通过NPM安装好用的工具；Node可以开发一些前端的工具【i5ting_toc】</li>\n<li>【★】Node能做服务器</li>\n<li>【★】Node还可以操作数据库并对外提供数据接口</li>\n<li>Node能做即时聊天</li>\n</ul>\n<p>【★★】为什么要学习Node.js</p>\n<ul>\n<li><p>从企业角度分析：</p>\n</li>\n<li><p>企业对一专多能人才的需求：怎么才能最大限度的压榨员工；省钱</p>\n</li>\n<li>多高性能服务器的需求：怎么才能最大限度的压榨服务器；</li>\n<li><p>Node适合做快速的网络请求，但是不适合做大数据的业务逻辑的处理；</p>\n</li>\n<li><p>从自身角度分析：</p>\n</li>\n<li><p>挣钱；</p>\n</li>\n<li>对将来职业生涯有好处：学了Node之后，为我们构建了后端的知识体系，无论将来你会不会做后端的Node开发，但是，起码你已经构建了完整的前后端知识体系！</li>\n<li>后面学到的任何新技术：Vue.js，React,React-Native都是基于Node的！包括后面要学的一个构建工具webpack！</li>\n</ul>\n<p>在Node中执行相关的JS代码的两种方式</p>\n<ol>\n<li>直接在命令行中输入node，进入Node的REPL运行环境：</li>\n</ol>\n<ul>\n<li>R：Read：读取用户输入的字符串内容</li>\n<li>E：Evaluate：把用户输入的字符串，当作JS代码去解析执行</li>\n<li>P：Print：打印输出Evaluate解析的结果</li>\n<li>L：Loop：进入下一次循环</li>\n</ul>\n<ol>\n<li>将Node代码写入到一个js文件中，然后通过node 要执行的JS文件路径去运行Node代码</li>\n</ol>\n<p>环境变量</p>\n<p>为什么可以通过命令行形式，直接启动node或者notepad呢？？？</p>\n<p>注意：每当修改了环境变量之后，需要重新启动命令窗口！</p>\n<p>什么是环境变量</p>\n<p>Path环境变量的作用：能够让我们通过命令行的形式快速启动一个应用程序；</p>\n<p>用户变量和系统变量的区别、</p>\n<p>用户变量：用户变量是属于每一个用户的，用户之间的用户变量是私有的，不共享的；</p>\n<p>系统变量：系统变量是共享的，只能用户能够登录这台电脑，那么就能访问系统变量中的任何东西！【将来咋在配置环境变量的时候，推荐大家配置到系统变量中！】</p>\n<p>配置环境变量的两种方式</p>\n<ol>\n<li>第一种方式：直接把路径添加到path环境变量中；</li>\n<li>第二种方式：先在环境变量中创建一个新变量，名字类似于：ZOOM_HOME这样，值是我们程序的根目录；然后，再把这个变量名，引用到 Path环境变量中，类似于：%ZOOM_HOME%</li>\n</ol>\n<p>Path变量的查找规则</p>\n<ol>\n<li>先从当前的目录中查找有没有这个应用程序，如果有，则直接运行，如果没有，则去系统环境变量中，path环境变量下挨个查找对应的文件夹，如果在对应文件夹中能找到，则直接运行，如果找不到，最终报错！</li>\n</ol>\n<p>【★★】使用fs模块来操作文件</p>\n<ol>\n<li>fs.readFile</li>\n<li>fs.writeFile</li>\n<li>fs.appendFile</li>\n</ol>\n<p>【★★★】fs模块中路径问题</p>\n<p>箭头函数</p>\n<p>Node中的使用http模块创建最基本的web服务器</p>\n<p>之前有没有接触过Web服务器？？？</p>\n<p>其实，PHPStudy中集成了一个叫做Apache的软件；这个软件就是一个服务器软件，能够托管一个网站；</p>\n<p>其实在Node中，并没有类似于Apache这样软件；我们可以通过简单的几行代码，写出一个Web服务器！</p>\n<p>【★★★】HTTP协议中的 请求 - 处理 - 响应 模型</p>\n<p>【★★】step by step 构建HTTP服务器</p>\n<p>升级1：根据不同的URL地址响应不同HTML消息</p>\n<p>升级2：根据不同URL地址 - 响应不同的页面</p>\n<p>升级3：在响应不同页面的同时响应静态资源（css、图片、js）</p>\n<p>【★★★】【难点】升级4：根据不同URL地址 - 响应不同文件的改造</p>\n<p>【★★】【难点】网页中资源请求路径问题</p>\n<p>相关文章</p>\n<ul>\n<li>JavaScript——历史与简介</li>\n<li>深入浅出Node.js（一）：什么是Node.js</li>\n<li>I/O事件概述</li>\n<li>理解Node.js事件驱动编程</li>\n<li>Node.js 中文网</li>\n<li>Node.js 英文官网</li>\n<li>Node.js 菜鸟教程</li>\n<li>CNode：Node.js专业中文社区</li>\n<li>深入浅出Node.js(朴灵)完整扫描版.pdf</li>\n<li>HTTP Keep-Alive是什么？如何工作？</li>\n<li>浏览器User-agent String里的历史故事</li>\n<li>art-template API</li>\n<li>yarn与npm的命令行小结</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>学习Node.js时候的建议</p>\n<ol>\n<li><p>前端和后端的知识体系不同！不要使用前端的思维方式去学习后端开发！</p>\n</li>\n<li><p>学习Node.js阶段，把自己当作后端开发人员！</p>\n</li>\n<li><p>课堂上对重点的知识做笔记，利用一切时间练习课堂代码；晚上抽半个小时梳理总结今天所学知识点；整理今天的笔记！</p>\n</li>\n<li><p>每天吃饭睡觉走大街上，都要在脑海中闪现今天学习的知识点【×××知识点是什么，怎么用】</p>","more":"</li>\n</ol>\n<p>什么是前端和后端</p>\n<ol>\n<li>前端主要工作：写页面（HTML）、美化页面（CSS）、调用后台提供的API接口去请求或提交数据（JS）；Ajax （XHR、Jquery  .ajax  .get  $.post），Jquery更多的是进行DOM方面的操作！H5C3，高级、Angular（单页面应用程序）</li>\n</ol>\n<ul>\n<li>前端主要在浏览器端进行开发；前端主要和页面打交道，用户看到的基本上就是我们前端写出来的（前端就是颜值）</li>\n</ul>\n<ol>\n<li>后端主要工作：主要进行业务逻辑的操作、比如数据的增删改查、操作数据库、对外暴露API接口（后台是骨骼、灵魂）</li>\n<li>前后端协作流程：前端写页面，前端调用后台的接口；后台接受前端发过来的请求，然后进行相关的业务处理，把处理的结果返回给前端（提供API接口）</li>\n</ol>\n<p>Javascript 的起源</p>\n<ol>\n<li>诞生：JS的诞生和一个公司有关，有一个网景公司；当时网速只有20~30KB（电话线），当时，就是为了进行客户端验证，为了减少不必要的网络请求，提高网络效率，网景公司决定研究一门语言，来解决这个问题；JS作者在10之内，就把这门语言写出来了，叫做LiveScript，为了搭上Java这般顺风车，就把LiveScript改名为Javascript；</li>\n<li>浏览器中的一战：微软发现浏览器市场很火，然后就自己开发了一款浏览器【IE】；为了推广自己的IE浏览器，把IE捆绑到了Windows操作系统中；JScript</li>\n</ol>\n<ul>\n<li>一战胜利的果实：ECMAScript标准的确立；就是一个语言规范；只规定了如何进行分支判断、如何定义变量、如何定义方法…..</li>\n</ul>\n<ol>\n<li>短暂的和平期：IE6【微软发现自己已经天下无敌了，然后就把IE6的开发团队给解散了！】在和平期间，JS这门语言主要做什么：表单验证、简单的特效、狗皮膏药（当时被称为脚本语言）</li>\n<li>二战：【主角：谷歌、IE、火（浴火重生）狐】谷歌在2008年，借助于AJax，开始火起来了！一方面提升渲染引擎的效率、另一方面，提升JS解析引擎的效率，最终，二战以谷歌的胜利结束；谷歌有了一款世界上效率最快的JS解析引擎，叫做chrome V8引擎；</li>\n</ol>\n<p>Node.js 的起源</p>\n<p>nodejs的历史由来</p>\n<ul>\n<li>作者，之前主要是做高性能服务器维护的；高性能的服务器有哪些必要的条件；必须要是异步非阻塞的、基于事件驱动的；</li>\n<li>作者在分析了上面两条基本条件之后，就开始研发高性能服务器！</li>\n<li>C,C++,Java,C#,Javascript</li>\n<li>对于程序员来说，如果同时提供了同步和异步两种编程方式，程序员肯定会选择同步；</li>\n<li>作者选择Javascript最主要的原因，就是这门语言是单线程的</li>\n<li>多线程：程序员能主动开启子线程的语言，就叫做多线程的语言；Thread td = new Thread();</li>\n<li>作者最终，选择的语言是Javascript、解析引擎是V8；</li>\n<li>刚开始，作者写出来的这个东西叫做web.js;后来，随着项目扩大和功能的完善，作者发现这款产品，不仅能做高性能的服务器，还能做许多事情，比如可以用这个东西去做前端包管理；于是就改名叫做Node.js;</li>\n<li>像前端需要好用的工具，都是使用node.js开发出来的！</li>\n</ul>\n<p>ECMAScript、浏览器中的Javascript、Node中的Javascript</p>\n<ul>\n<li>ECMAScript：语言规范；不能使用ECMAScript进行实际的编程，因为它只是一个语言标准而已；</li>\n<li><p>浏览器中的Javascript：是ECMAScript这个规范的具体实现；我们可以使用浏览器中的JS进行实际的编程！</p>\n</li>\n<li><p>浏览器中的Javascript组成部分：DOM + BOM + ECMAScript；其中，DOM和BOM和规范无关，是浏览器根据自己的需要，后期扩展的；</p>\n</li>\n<li><p>Node中的Javascript：是ECMAScript这个规范的具体实现；也能进行实际的编程！</p>\n</li>\n<li><p>Node中的Javascript组成部分：ECMAScript + 核心API + 其他第三方API，由于Node不需要操作浏览器对象和文档对象，所以把BOM和DOM给剔除了！核心API中，提供了 操作 文件的API 和 操作网络的 API等。。。。</p>\n</li>\n</ul>\n<p>什么是Node.js</p>\n<ul>\n<li><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p>\n</li>\n<li><p>我们使用JS写的Node代码，说白了，只是单纯的字符串而已；</p>\n</li>\n<li><p>如果想要执行这些写好的代码，必须要有一个解析执行环境，这个环境就是chrome 的 V8 引擎；</p>\n</li>\n<li><p>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。</p>\n</li>\n<li><p>事件驱动：当触发某个事件的时候，执行事件中指定的代码！</p>\n</li>\n<li><p>非阻塞式 I/O 的模型：采用非阻塞的操作，能够提高处理的效率！</p>\n</li>\n<li><p>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n</li>\n<li><p>先使用npm init -y初始化一下包管理文件package.json，将来所有安装的包，都会记录到这个文件中</p>\n</li>\n<li>使用npm install 包名 –save/–save-dev去安装包；其中，install可以简写成i;</li>\n<li>–save表示把包安装到部署依赖中（在开发和部署上线都需要使用的包）； –save-dev表示安装到开发依赖（只在项目开发阶段需要用到的包）；</li>\n<li>–save可以简写成-S；–save-dev可以简写成-D;</li>\n<li>npm uninstall 包名 –save/–save-dev或者npm remove 包名 –save/–save-dev</li>\n<li><p>npm i webpack -g,其中，-g表示全局安装某些包，通过-g安装的包都在C:\\Users\\用户名\\AppData\\Roaming\\npm下面</p>\n</li>\n<li><p>NPM 和 （Github、码云） 和 Git之间的关系</p>\n</li>\n<li><p>NPM是包管理平台（里面托管了各种各样的包）</p>\n</li>\n<li>Github、码云 代码托管平台（托管了各种各样的代码仓库）</li>\n<li>Git是用来对代码进行分支版本管理</li>\n</ul>\n<p>补充：yarn</p>\n<ul>\n<li>yarn和npm的作用完全一样，都是用来管理项目中的第三方依赖包的！</li>\n<li>yarn是Facebook公司推出来的一套包管理工具！【后期咱们学习React，尤其是ReactNative的时候，默认就是用Yarn去装包的】</li>\n<li>yarn会缓存曾经安装过的包；但是npm也会缓存，但是效果不如yarn明显；</li>\n<li>yarn与npm的命令行小结</li>\n</ul>\n<p>补充：如何设置npm和yarn的安装镜像：</p>\n<p>什么是NPM淘宝镜像呢：由于每次安装包需要走国外的网络，速度很慢，所以，淘宝帮我们在国内创建了一个NPM包托管网站，能够提升使用NPM装包时候的速度！</p>\n<ol>\n<li><p>配置npm的国内淘宝镜像：</p>\n<p> npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global<br> npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</p>\n</li>\n<li><p>配置yarn的国内淘宝镜像：</p>\n<p> yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global<br> yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</p>\n</li>\n</ol>\n<p>总结：Node.js 就是一个Javascript的服务端运行环境（依赖于Chrome 的V8引擎），为Javascript提供了服务器端编程的能力！</p>\n<p>Node.js 可以做哪些事情</p>\n<ul>\n<li>【★】Node可以作为前端的一个工具去使用，通过NPM安装好用的工具；Node可以开发一些前端的工具【i5ting_toc】</li>\n<li>【★】Node能做服务器</li>\n<li>【★】Node还可以操作数据库并对外提供数据接口</li>\n<li>Node能做即时聊天</li>\n</ul>\n<p>【★★】为什么要学习Node.js</p>\n<ul>\n<li><p>从企业角度分析：</p>\n</li>\n<li><p>企业对一专多能人才的需求：怎么才能最大限度的压榨员工；省钱</p>\n</li>\n<li>多高性能服务器的需求：怎么才能最大限度的压榨服务器；</li>\n<li><p>Node适合做快速的网络请求，但是不适合做大数据的业务逻辑的处理；</p>\n</li>\n<li><p>从自身角度分析：</p>\n</li>\n<li><p>挣钱；</p>\n</li>\n<li>对将来职业生涯有好处：学了Node之后，为我们构建了后端的知识体系，无论将来你会不会做后端的Node开发，但是，起码你已经构建了完整的前后端知识体系！</li>\n<li>后面学到的任何新技术：Vue.js，React,React-Native都是基于Node的！包括后面要学的一个构建工具webpack！</li>\n</ul>\n<p>在Node中执行相关的JS代码的两种方式</p>\n<ol>\n<li>直接在命令行中输入node，进入Node的REPL运行环境：</li>\n</ol>\n<ul>\n<li>R：Read：读取用户输入的字符串内容</li>\n<li>E：Evaluate：把用户输入的字符串，当作JS代码去解析执行</li>\n<li>P：Print：打印输出Evaluate解析的结果</li>\n<li>L：Loop：进入下一次循环</li>\n</ul>\n<ol>\n<li>将Node代码写入到一个js文件中，然后通过node 要执行的JS文件路径去运行Node代码</li>\n</ol>\n<p>环境变量</p>\n<p>为什么可以通过命令行形式，直接启动node或者notepad呢？？？</p>\n<p>注意：每当修改了环境变量之后，需要重新启动命令窗口！</p>\n<p>什么是环境变量</p>\n<p>Path环境变量的作用：能够让我们通过命令行的形式快速启动一个应用程序；</p>\n<p>用户变量和系统变量的区别、</p>\n<p>用户变量：用户变量是属于每一个用户的，用户之间的用户变量是私有的，不共享的；</p>\n<p>系统变量：系统变量是共享的，只能用户能够登录这台电脑，那么就能访问系统变量中的任何东西！【将来咋在配置环境变量的时候，推荐大家配置到系统变量中！】</p>\n<p>配置环境变量的两种方式</p>\n<ol>\n<li>第一种方式：直接把路径添加到path环境变量中；</li>\n<li>第二种方式：先在环境变量中创建一个新变量，名字类似于：ZOOM_HOME这样，值是我们程序的根目录；然后，再把这个变量名，引用到 Path环境变量中，类似于：%ZOOM_HOME%</li>\n</ol>\n<p>Path变量的查找规则</p>\n<ol>\n<li>先从当前的目录中查找有没有这个应用程序，如果有，则直接运行，如果没有，则去系统环境变量中，path环境变量下挨个查找对应的文件夹，如果在对应文件夹中能找到，则直接运行，如果找不到，最终报错！</li>\n</ol>\n<p>【★★】使用fs模块来操作文件</p>\n<ol>\n<li>fs.readFile</li>\n<li>fs.writeFile</li>\n<li>fs.appendFile</li>\n</ol>\n<p>【★★★】fs模块中路径问题</p>\n<p>箭头函数</p>\n<p>Node中的使用http模块创建最基本的web服务器</p>\n<p>之前有没有接触过Web服务器？？？</p>\n<p>其实，PHPStudy中集成了一个叫做Apache的软件；这个软件就是一个服务器软件，能够托管一个网站；</p>\n<p>其实在Node中，并没有类似于Apache这样软件；我们可以通过简单的几行代码，写出一个Web服务器！</p>\n<p>【★★★】HTTP协议中的 请求 - 处理 - 响应 模型</p>\n<p>【★★】step by step 构建HTTP服务器</p>\n<p>升级1：根据不同的URL地址响应不同HTML消息</p>\n<p>升级2：根据不同URL地址 - 响应不同的页面</p>\n<p>升级3：在响应不同页面的同时响应静态资源（css、图片、js）</p>\n<p>【★★★】【难点】升级4：根据不同URL地址 - 响应不同文件的改造</p>\n<p>【★★】【难点】网页中资源请求路径问题</p>\n<p>相关文章</p>\n<ul>\n<li>JavaScript——历史与简介</li>\n<li>深入浅出Node.js（一）：什么是Node.js</li>\n<li>I/O事件概述</li>\n<li>理解Node.js事件驱动编程</li>\n<li>Node.js 中文网</li>\n<li>Node.js 英文官网</li>\n<li>Node.js 菜鸟教程</li>\n<li>CNode：Node.js专业中文社区</li>\n<li>深入浅出Node.js(朴灵)完整扫描版.pdf</li>\n<li>HTTP Keep-Alive是什么？如何工作？</li>\n<li>浏览器User-agent String里的历史故事</li>\n<li>art-template API</li>\n<li>yarn与npm的命令行小结</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjey5cc020001skrx0okakd7e","category_id":"cjey5cc0l0005skrxcmcugsyj","_id":"cjey5cc1g000iskrxugd0dec9"},{"post_id":"cjey5cc0d0003skrxkc0ftwzl","category_id":"cjey5cc15000cskrx2xr0m78g","_id":"cjey5cc1r000oskrxgk7tflgj"},{"post_id":"cjey5cc0q0007skrxtz7g8ytf","category_id":"cjey5cc1h000jskrx3l7v9uae","_id":"cjey5cc1z000vskrx1y6qo9iy"},{"post_id":"cjey5cc1o000nskrxdzlqxo3h","category_id":"cjey5cc1h000jskrx3l7v9uae","_id":"cjey5cc240010skrxrpjdsowd"},{"post_id":"cjey5cc0t0009skrx5di7v540","category_id":"cjey5cc1r000pskrxvy90lja4","_id":"cjey5cc280014skrx0mofbnka"},{"post_id":"cjey5cc1w000uskrxcfnr4pp1","category_id":"cjey5cc1h000jskrx3l7v9uae","_id":"cjey5cc2d0019skrx898ffa62"},{"post_id":"cjey5cc21000zskrxtaalat25","category_id":"cjey5cc1h000jskrx3l7v9uae","_id":"cjey5cc2h001cskrxzlrb5w9s"},{"post_id":"cjey5cc250012skrxpulwwkkg","category_id":"cjey5cc1h000jskrx3l7v9uae","_id":"cjey5cc2j001fskrx1mnb6v45"},{"post_id":"cjey5cc10000bskrxdx8lfszj","category_id":"cjey5cc20000xskrxmuleceg7","_id":"cjey5cc2k001hskrxjuwjiwoc"},{"post_id":"cjey5cc19000gskrx5idjva20","category_id":"cjey5cc290016skrxajy7b8vr","_id":"cjey5cc2l001kskrx6g9yai7n"},{"post_id":"cjey5cc1c000hskrxcrqr2ln0","category_id":"cjey5cc2i001dskrx42rwwqnf","_id":"cjey5cc2n001mskrx5rrhehel"},{"post_id":"cjey5cc1k000lskrx90bnw7y9","category_id":"cjey5cc2k001iskrxluyitfo5","_id":"cjey5cc2p001qskrxehrz6udb"},{"post_id":"cjey5cc1s000sskrx9bvvfjbp","category_id":"cjey5cc2n001nskrx45uj2fxq","_id":"cjey5cc2v001uskrxtn5mrqcw"},{"post_id":"cjey5cc280015skrx9lfrkt5r","category_id":"cjey5cc2q001rskrxr4c8mec8","_id":"cjey5cc31001yskrxqsv60ny4"},{"post_id":"cjey5cc2e001askrxk3101f5m","category_id":"cjey5cc2q001rskrxr4c8mec8","_id":"cjey5cc330020skrxi52r1k58"}],"PostTag":[{"post_id":"cjey5cc020001skrx0okakd7e","tag_id":"cjey5cc0p0006skrxm7gekjq6","_id":"cjey5cc18000fskrxfwdmyb5l"},{"post_id":"cjey5cc0d0003skrxkc0ftwzl","tag_id":"cjey5cc16000dskrxywnumxqn","_id":"cjey5cc1n000mskrx3u2bhdfl"},{"post_id":"cjey5cc1k000lskrx90bnw7y9","tag_id":"cjey5cc0p0006skrxm7gekjq6","_id":"cjey5cc1s000rskrx2x65nizr"},{"post_id":"cjey5cc0q0007skrxtz7g8ytf","tag_id":"cjey5cc1h000kskrxhpbza8gk","_id":"cjey5cc1w000tskrx415j03w9"},{"post_id":"cjey5cc1o000nskrxdzlqxo3h","tag_id":"cjey5cc16000dskrxywnumxqn","_id":"cjey5cc20000wskrxolxrvgvd"},{"post_id":"cjey5cc0t0009skrx5di7v540","tag_id":"cjey5cc1s000qskrxgtjiqm7v","_id":"cjey5cc250011skrxh4vdqun0"},{"post_id":"cjey5cc1w000uskrxcfnr4pp1","tag_id":"cjey5cc16000dskrxywnumxqn","_id":"cjey5cc270013skrx8pae0xkx"},{"post_id":"cjey5cc250012skrxpulwwkkg","tag_id":"cjey5cc16000dskrxywnumxqn","_id":"cjey5cc2c0018skrxwz71bxbo"},{"post_id":"cjey5cc10000bskrxdx8lfszj","tag_id":"cjey5cc21000yskrxfen00ojb","_id":"cjey5cc2g001bskrx1ooub7e6"},{"post_id":"cjey5cc19000gskrx5idjva20","tag_id":"cjey5cc2a0017skrx33ifmpyg","_id":"cjey5cc2j001gskrx57o0tui6"},{"post_id":"cjey5cc1c000hskrxcrqr2ln0","tag_id":"cjey5cc2i001eskrxji4t8g6t","_id":"cjey5cc2m001lskrx45mm7rsr"},{"post_id":"cjey5cc1s000sskrx9bvvfjbp","tag_id":"cjey5cc2l001jskrxsruhai9w","_id":"cjey5cc2o001pskrxdny3qzty"},{"post_id":"cjey5cc21000zskrxtaalat25","tag_id":"cjey5cc2o001oskrxgmvf1l0f","_id":"cjey5cc2t001tskrxicoyab9f"},{"post_id":"cjey5cc280015skrx9lfrkt5r","tag_id":"cjey5cc2q001sskrx68s9dt6w","_id":"cjey5cc30001xskrxi32v4pgn"},{"post_id":"cjey5cc2e001askrxk3101f5m","tag_id":"cjey5cc2q001sskrx68s9dt6w","_id":"cjey5cc32001zskrx6sc74933"}],"Tag":[{"name":"life","_id":"cjey5cc0p0006skrxm7gekjq6"},{"name":"js","_id":"cjey5cc16000dskrxywnumxqn"},{"name":"CSS","_id":"cjey5cc1h000kskrxhpbza8gk"},{"name":"PHP","_id":"cjey5cc1s000qskrxgtjiqm7v"},{"name":"Linux","_id":"cjey5cc21000yskrxfen00ojb"},{"name":"console","_id":"cjey5cc2a0017skrx33ifmpyg"},{"name":"canvas","_id":"cjey5cc2i001eskrxji4t8g6t"},{"name":"Vue","_id":"cjey5cc2l001jskrxsruhai9w"},{"name":"ECharts","_id":"cjey5cc2o001oskrxgmvf1l0f"},{"name":"node","_id":"cjey5cc2q001sskrx68s9dt6w"}]}}